//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package unichart ;import (_a "bytes";_b "fmt";_e "github.com/unidoc/unichart/render";_ab "github.com/unidoc/unipdf/v3/common";_ee "github.com/unidoc/unipdf/v3/contentstream";_db "github.com/unidoc/unipdf/v3/contentstream/draw";_ea "github.com/unidoc/unipdf/v3/core";
_cb "github.com/unidoc/unipdf/v3/model";_cga "image/color";_cg "io";_c "math";);func (_gee *Renderer )Close (){_gee ._g .Add_h ()};func (_cad *Renderer )ResetStyle (){_cad .SetFillColor (_cga .Black );_cad .SetStrokeColor (_cga .Transparent );_cad .SetStrokeWidth (0);
_cad .SetFont (_cb .DefaultFont ());_cad .SetFontColor (_cga .Black );_cad .SetFontSize (12);_cad .SetTextRotation (0);};func (_ggf *Renderer )SetStrokeColor (color _cga .Color ){_ggf ._gd =color ;_gf ,_dc ,_bbd ,_ :=_egff (color );_ggf ._g .Add_RG (_gf ,_dc ,_bbd );
};func (_fbg *Renderer )Save (w _cg .Writer )error {if w ==nil {return nil ;};_ ,_egc :=_cg .Copy (w ,_a .NewBuffer (_fbg ._g .Bytes ()));return _egc ;};func (_dg *Renderer )SetStrokeDashArray (dashArray []float64 ){_da :=make ([]int64 ,len (dashArray ));
for _eg ,_gcf :=range dashArray {_da [_eg ]=int64 (_gcf );};_dg ._g .Add_d (_da ,0);};func (_fag *Renderer )MeasureText (text string )_e .Box {_gcc :=_fag ._f ;_fd ,_bae :=_fag ._de .GetFontDescriptor ();if _bae !=nil {_ab .Log .Debug ("W\u0041\u0052\u004e\u003a\u0020\u0055n\u0061\u0062\u006c\u0065\u0020\u0074o\u0020\u0067\u0065\u0074\u0020\u0066\u006fn\u0074\u0020\u0064\u0065\u0073\u0063\u0072\u0069\u0070\u0074o\u0072");
}else {_fcf ,_feg :=_fd .GetCapHeight ();if _feg !=nil {_ab .Log .Debug ("\u0057\u0041\u0052\u004e\u003a\u0020\u0055\u006e\u0061\u0062\u006c\u0065\u0020t\u006f\u0020\u0067\u0065\u0074\u0020f\u006f\u006e\u0074\u0020\u0063\u0061\u0070\u0020\u0068\u0065\u0069\u0067\u0068t\u003a\u0020\u0025\u0076",_feg );
}else {_gcc =_fcf /1000.0*_fag ._f ;};};var (_bd =0.0;_gcfb =_fag .wrapText (text ););for _ ,_af :=range _gcfb {if _cd :=_fag .getTextWidth (_af );_cd > _bd {_bd =_cd ;};};_geec :=_e .NewBox (0,0,int (_bd ),int (_gcc ));if _acf :=_fag ._ac ;_acf !=0{_geec =_geec .Corners ().Rotate (_acf ).Box ();
};return _geec ;};func (_add *Renderer )ArcTo (cx ,cy int ,rx ,ry ,startAngle ,deltaAngle float64 ){startAngle =_bce (2.0*_c .Pi -startAngle );deltaAngle =_bce (-deltaAngle );_ef ,_adc :=deltaAngle ,1;if _c .Abs (deltaAngle )> 90.0{_adc =int (_c .Ceil (_c .Abs (deltaAngle )/90.0));
_ef =deltaAngle /float64 (_adc );};var (_fc =_gca (_ef /2);_gb =_c .Abs (4.0/3.0*(1.0-_c .Cos (_fc ))/_c .Sin (_fc ));_cbd =float64 (cx );_ba =float64 (cy ););for _bf :=0;_bf < _adc ;_bf ++{_gff :=_gca (startAngle +float64 (_bf )*_ef );_bge :=_gca (startAngle +float64 (_bf +1)*_ef );
_dae :=_c .Cos (_gff );_ag :=_c .Cos (_bge );_aed :=_c .Sin (_gff );_ge :=_c .Sin (_bge );var _caa []float64 ;if _ef > 0{_caa =[]float64 {_cbd +rx *_dae ,_ba -ry *_aed ,_cbd +rx *(_dae -_gb *_aed ),_ba -ry *(_aed +_gb *_dae ),_cbd +rx *(_ag +_gb *_ge ),_ba -ry *(_ge -_gb *_ag ),_cbd +rx *_ag ,_ba -ry *_ge };
}else {_caa =[]float64 {_cbd +rx *_dae ,_ba -ry *_aed ,_cbd +rx *(_dae +_gb *_aed ),_ba -ry *(_aed -_gb *_dae ),_cbd +rx *(_ag -_gb *_ge ),_ba -ry *(_ge +_gb *_ag ),_cbd +rx *_ag ,_ba -ry *_ge };};if _bf ==0{_add ._g .Add_l (_caa [0],_caa [1]);};_add ._g .Add_c (_caa [2],_caa [3],_caa [4],_caa [5],_caa [6],_caa [7]);
};};func (_aea *Renderer )SetFont (font _e .Font ){_dgf ,_efb :=font .(*_cb .PdfFont );if !_efb {_ab .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0069\u006e\u0076\u0061\u006c\u0069d\u0020\u0066\u006f\u006e\u0074\u0020\u0074\u0079\u0070\u0065");
return ;};_ged ,_efb :=_aea ._bb [_dgf ];if !_efb {_ged =_ded ("\u0046\u006f\u006e\u0074",1,_aea ._ae .HasFontByName );if _bfc :=_aea ._ae .SetFontByName (_ged ,_dgf .ToPdfObject ());_bfc !=nil {_ab .Log .Debug ("\u0045\u0052\u0052\u004f\u0052:\u0020\u0063\u006f\u0075\u006c\u0064\u0020\u006e\u006f\u0074\u0020\u0061\u0064d\u0020\u0066\u006f\u006e\u0074\u0020\u0025\u0076\u0020\u0074\u006f\u0020\u0072\u0065\u0073\u006f\u0075\u0072\u0063\u0065\u0073",_dgf );
};_aea ._bb [_dgf ]=_ged ;};_aea ._g .Add_Tf (_ged ,_aea ._f );_aea ._de =_dgf ;};func (_ce *Renderer )SetDPI (dpi float64 ){_ce ._dd =dpi };func (_bc *Renderer )Fill (){_bc ._g .Add_f ()};func (_fb *Renderer )LineTo (x ,y int ){_fb ._g .Add_l (float64 (x ),float64 (y ))};
func _eba (_cdb _cga .Color )(uint8 ,uint8 ,uint8 ,uint8 ){_bcd ,_fac ,_ec ,_fegc :=_cdb .RGBA ();return uint8 (_bcd >>8),uint8 (_fac >>8),uint8 (_ec >>8),uint8 (_fegc >>8);};func (_bg *Renderer )SetStrokeWidth (width float64 ){_bg ._gg =width ;_bg ._g .Add_w (width )};
func (_fce *Renderer )Circle (radius float64 ,x ,y int ){_eea :=radius ;if _ffe :=_fce ._gg ;_ffe !=0{_eea -=_ffe /2;};_gec :=_eea *0.551784;_edd :=_db .CubicBezierPath {Curves :[]_db .CubicBezierCurve {_db .NewCubicBezierCurve (-_eea ,0,-_eea ,_gec ,-_gec ,_eea ,0,_eea ),_db .NewCubicBezierCurve (0,_eea ,_gec ,_eea ,_eea ,_gec ,_eea ,0),_db .NewCubicBezierCurve (_eea ,0,_eea ,-_gec ,_gec ,-_eea ,0,-_eea ),_db .NewCubicBezierCurve (0,-_eea ,-_gec ,-_eea ,-_eea ,-_gec ,-_eea ,0)}};
if _fbe :=_fce ._gg ;_fbe !=0{_edd =_edd .Offset (_fbe /2,_fbe /2);};_edd =_edd .Offset (float64 (x ),float64 (y ));_db .DrawBezierPathWithCreator (_edd ,_fce ._g );};func (_bef *Renderer )FillStroke (){_bef ._g .Add_B ()};func (_gc *Renderer )SetFillColor (color _cga .Color ){_gc ._abc =color ;
_fg ,_ed ,_ff ,_ :=_egff (color );_gc ._g .Add_rg (_fg ,_ed ,_ff );};func (_faf *Renderer )wrapText (_bbg string )[]string {var (_gccb []string ;_cca []rune ;);for _ ,_fgd :=range _bbg {if _fgd =='\n'{_gccb =append (_gccb ,string (_cca ));_cca =[]rune {};
continue ;};_cca =append (_cca ,_fgd );};if len (_cca )> 0{_gccb =append (_gccb ,string (_cca ));};return _gccb ;};func _gca (_bdc float64 )float64 {return _bdc *_c .Pi /180.0};func (_ebf *Renderer )ClearTextRotation (){_ebf ._ac =0};func (_cfb *Renderer )MoveTo (x ,y int ){_cfb ._g .Add_m (float64 (x ),float64 (y ))};
func (_fcec *Renderer )SetTextRotation (radians float64 ){_fcec ._ac =_bce (-radians )};func (_gdd *Renderer )QuadCurveTo (cx ,cy ,x ,y int ){_gdd ._g .Add_v (float64 (x ),float64 (y ),float64 (cx ),float64 (cy ));};func (_egf *Renderer )getTextWidth (_dbc string )float64 {var _ddff float64 ;
for _ ,_abd :=range _dbc {_feb ,_cfa :=_egf ._de .GetRuneMetrics (_abd );if !_cfa {_ab .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006fr\u0074e\u0064 \u0072u\u006e\u0065\u0020\u0025\u0076\u0020\u0069\u006e\u0020\u0066\u006f\u006e\u0074",_abd );
};_ddff +=_feb .Wx ;};return _egf ._f *_ddff /1000.0;};func _bce (_abe float64 )float64 {return _abe *180/_c .Pi };func (_eaf *Renderer )GetDPI ()float64 {return _eaf ._dd };func _egff (_gce _cga .Color )(float64 ,float64 ,float64 ,float64 ){_ffa ,_aff ,_gcg ,_ecd :=_eba (_gce );
return float64 (_ffa )/255,float64 (_aff )/255,float64 (_gcg )/255,float64 (_ecd )/255;};func (_cf *Renderer )SetClassName (name string ){};func _ded (_eed string ,_gbe int ,_fed func (_ea .PdfObjectName )bool )_ea .PdfObjectName {_facd :=_ea .PdfObjectName (_b .Sprintf ("\u0025\u0073\u0025\u0064",_eed ,_gbe ));
for _bgf :=_gbe ;_fed (_facd );{_bgf ++;_facd =_ea .PdfObjectName (_b .Sprintf ("\u0025\u0073\u0025\u0064",_eed ,_bgf ));};return _facd ;};func (_ga *Renderer )Text (text string ,x ,y int ){_ga ._g .Add_q ();_ga .SetFont (_ga ._de );_fa ,_ddf ,_eb ,_ :=_egff (_ga ._caf );
_ga ._g .Add_rg (_fa ,_ddf ,_eb );_ga ._g .Translate (float64 (x ),float64 (y )).Scale (1,-1);if _bba :=_ga ._ac ;_bba !=0{_ga ._g .RotateDeg (_bba );};_ga ._g .Add_BT ().Add_TL (_ga ._f );var (_daea =_ga ._de .Encoder ();_ede =_ga .wrapText (text );_dba =len (_ede );
);for _fe ,_dce :=range _ede {_ga ._g .Add_TJ (_ea .MakeStringFromBytes (_daea .Encode (_dce )));if _fe !=_dba -1{_ga ._g .Add_Tstar ();};};_ga ._g .Add_ET ();_ga ._g .Add_Q ();};type Renderer struct{_cc int ;_ca int ;_dd float64 ;_g *_ee .ContentCreator ;
_ae *_cb .PdfPageResources ;_abc _cga .Color ;_gd _cga .Color ;_gg float64 ;_de *_cb .PdfFont ;_f float64 ;_caf _cga .Color ;_ac float64 ;_bb map[*_cb .PdfFont ]_ea .PdfObjectName ;};func (_beb *Renderer )Stroke (){_beb ._g .Add_S ()};func (_bcb *Renderer )SetFontColor (color _cga .Color ){_bcb ._caf =color };
func (_cfe *Renderer )SetFontSize (size float64 ){_cfe ._f =size };func NewRenderer (cc *_ee .ContentCreator ,res *_cb .PdfPageResources )func (int ,int )(_e .Renderer ,error ){return func (_ad ,_dbe int )(_e .Renderer ,error ){_eeb :=&Renderer {_cc :_ad ,_ca :_dbe ,_dd :72,_g :cc ,_ae :res ,_bb :map[*_cb .PdfFont ]_ea .PdfObjectName {}};
_eeb .ResetStyle ();return _eeb ,nil ;};};