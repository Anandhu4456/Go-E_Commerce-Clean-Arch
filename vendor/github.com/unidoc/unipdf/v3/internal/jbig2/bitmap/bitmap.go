//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package bitmap ;import (_eb "encoding/binary";_e "github.com/stretchr/testify/require";_g "github.com/unidoc/unipdf/v3/common";_b "github.com/unidoc/unipdf/v3/internal/bitwise";_fd "github.com/unidoc/unipdf/v3/internal/imageutil";_d "github.com/unidoc/unipdf/v3/internal/jbig2/basic";
_ab "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_ce "image";_cdd "math";_cd "sort";_c "strings";_f "testing";);func NewWithUnpaddedData (width ,height int ,data []byte )(*Bitmap ,error ){const _ggeb ="\u004e\u0065\u0077\u0057it\u0068\u0055\u006e\u0070\u0061\u0064\u0064\u0065\u0064\u0044\u0061\u0074\u0061";
_fbb :=_acc (width ,height );_fbb .Data =data ;if _adaa :=((width *height )+7)>>3;len (data )< _adaa {return nil ,_ab .Errorf (_ggeb ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064a\u0074\u0061\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u003a\u0020\u0027\u0025\u0064\u0027\u002e\u0020\u0054\u0068\u0065\u0020\u0064\u0061t\u0061\u0020s\u0068\u006fu\u006c\u0064\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074 l\u0065\u0061\u0073\u0074\u003a\u0020\u0027\u0025\u0064'\u0020\u0062\u0079\u0074\u0065\u0073",len (data ),_adaa );
};if _bcfa :=_fbb .addPadBits ();_bcfa !=nil {return nil ,_ab .Wrap (_bcfa ,_ggeb ,"");};return _fbb ,nil ;};func _cbcf (_bege ,_fbcc *Bitmap ,_adbe ,_fbge int )(*Bitmap ,error ){const _aedf ="\u0063\u006c\u006f\u0073\u0065\u0042\u0072\u0069\u0063\u006b";
if _fbcc ==nil {return nil ,_ab .Error (_aedf ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _adbe < 1||_fbge < 1{return nil ,_ab .Error (_aedf ,"\u0068S\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0053\u0069z\u0065\u0020\u006e\u006f\u0074\u0020\u003e\u003d\u0020\u0031");
};if _adbe ==1&&_fbge ==1{return _fbcc .Copy (),nil ;};if _adbe ==1||_fbge ==1{_gcf :=SelCreateBrick (_fbge ,_adbe ,_fbge /2,_adbe /2,SelHit );var _eceeg error ;_bege ,_eceeg =_gdbd (_bege ,_fbcc ,_gcf );if _eceeg !=nil {return nil ,_ab .Wrap (_eceeg ,_aedf ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _bege ,nil ;};_geae :=SelCreateBrick (1,_adbe ,0,_adbe /2,SelHit );_aaadg :=SelCreateBrick (_fbge ,1,_fbge /2,0,SelHit );_fac ,_fabb :=_bdefe (nil ,_fbcc ,_geae );if _fabb !=nil {return nil ,_ab .Wrap (_fabb ,_aedf ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};if _bege ,_fabb =_bdefe (_bege ,_fac ,_aaadg );_fabb !=nil {return nil ,_ab .Wrap (_fabb ,_aedf ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};if _ ,_fabb =_aeee (_fac ,_bege ,_geae );_fabb !=nil {return nil ,_ab .Wrap (_fabb ,_aedf ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");
};if _ ,_fabb =_aeee (_bege ,_fac ,_aaadg );_fabb !=nil {return nil ,_ab .Wrap (_fabb ,_aedf ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};return _bege ,nil ;};func _ga (_gac ,_ed *Bitmap )(_ege error ){const _cfbc ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0038";
_gfd :=_ed .RowStride ;_bd :=_gac .RowStride ;var _ada ,_adc ,_dd ,_add ,_dee int ;for _dd =0;_dd < _ed .Height ;_dd ++{_ada =_dd *_gfd ;_adc =8*_dd *_bd ;for _add =0;_add < _gfd ;_add ++{if _ege =_gac .setEightBytes (_adc +_add *8,_bagd [_ed .Data [_ada +_add ]]);
_ege !=nil {return _ab .Wrap (_ege ,_cfbc ,"");};};for _dee =1;_dee < 8;_dee ++{for _add =0;_add < _bd ;_add ++{if _ege =_gac .SetByte (_adc +_dee *_bd +_add ,_gac .Data [_adc +_add ]);_ege !=nil {return _ab .Wrap (_ege ,_cfbc ,"");};};};};return nil ;
};func _acc (_dba ,_gdf int )*Bitmap {return &Bitmap {Width :_dba ,Height :_gdf ,RowStride :(_dba +7)>>3};};func (_agbd *Bitmap )ClipRectangle (box *_ce .Rectangle )(_faeg *Bitmap ,_ddg *_ce .Rectangle ,_bbc error ){const _febb ="\u0043\u006c\u0069\u0070\u0052\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065";
if box ==nil {return nil ,nil ,_ab .Error (_febb ,"\u0062o\u0078 \u0069\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};_gcd ,_bae :=_agbd .Width ,_agbd .Height ;_fbf :=_ce .Rect (0,0,_gcd ,_bae );if !box .Overlaps (_fbf ){return nil ,nil ,_ab .Error (_febb ,"b\u006f\u0078\u0020\u0064oe\u0073n\u0027\u0074\u0020\u006f\u0076e\u0072\u006c\u0061\u0070\u0020\u0062");
};_cbc :=box .Intersect (_fbf );_age ,_cefc :=_cbc .Min .X ,_cbc .Min .Y ;_adde ,_eeb :=_cbc .Dx (),_cbc .Dy ();_faeg =New (_adde ,_eeb );_faeg .Text =_agbd .Text ;if _bbc =_faeg .RasterOperation (0,0,_adde ,_eeb ,PixSrc ,_agbd ,_age ,_cefc );_bbc !=nil {return nil ,nil ,_ab .Wrap (_bbc ,_febb ,"\u0050\u0069\u0078\u0053\u0072\u0063\u0020\u0074\u006f\u0020\u0063\u006ci\u0070\u0070\u0065\u0064");
};_ddg =&_cbc ;return _faeg ,_ddg ,nil ;};func _cfab (_fecc ,_ebfa *Bitmap ,_edec ,_acce int )(*Bitmap ,error ){const _edgb ="\u006fp\u0065\u006e\u0042\u0072\u0069\u0063k";if _ebfa ==nil {return nil ,_ab .Error (_edgb ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");
};if _edec < 1&&_acce < 1{return nil ,_ab .Error (_edgb ,"\u0068\u0053\u0069\u007ae \u003c\u0020\u0031\u0020\u0026\u0026\u0020\u0076\u0053\u0069\u007a\u0065\u0020\u003c \u0031");};if _edec ==1&&_acce ==1{return _ebfa .Copy (),nil ;};if _edec ==1||_acce ==1{var _fgfag error ;
_dgec :=SelCreateBrick (_acce ,_edec ,_acce /2,_edec /2,SelHit );_fecc ,_fgfag =_bade (_fecc ,_ebfa ,_dgec );if _fgfag !=nil {return nil ,_ab .Wrap (_fgfag ,_edgb ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _fecc ,nil ;};_aggb :=SelCreateBrick (1,_edec ,0,_edec /2,SelHit );_agca :=SelCreateBrick (_acce ,1,_acce /2,0,SelHit );_fbfe ,_beefd :=_aeee (nil ,_ebfa ,_aggb );if _beefd !=nil {return nil ,_ab .Wrap (_beefd ,_edgb ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");
};_fecc ,_beefd =_aeee (_fecc ,_fbfe ,_agca );if _beefd !=nil {return nil ,_ab .Wrap (_beefd ,_edgb ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};_ ,_beefd =_bdefe (_fbfe ,_fecc ,_aggb );if _beefd !=nil {return nil ,_ab .Wrap (_beefd ,_edgb ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};_ ,_beefd =_bdefe (_fecc ,_fbfe ,_agca );if _beefd !=nil {return nil ,_ab .Wrap (_beefd ,_edgb ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};return _fecc ,nil ;};func TstImageBitmap ()*Bitmap {return _cbda .Copy ()};func (_egga *ClassedPoints )SortByY (){_egga ._dcfd =_egga .ySortFunction ();
_cd .Sort (_egga )};func (_aga *Bitmap )Equivalent (s *Bitmap )bool {return _aga .equivalent (s )};func (_ecgd *Bitmap )countPixels ()int {var (_afaf int ;_bba uint8 ;_cbb byte ;_beed int ;);_dff :=_ecgd .RowStride ;_dda :=uint (_ecgd .Width &0x07);if _dda !=0{_bba =uint8 ((0xff<<(8-_dda ))&0xff);
_dff --;};for _ade :=0;_ade < _ecgd .Height ;_ade ++{for _beed =0;_beed < _dff ;_beed ++{_cbb =_ecgd .Data [_ade *_ecgd .RowStride +_beed ];_afaf +=int (_fbgc [_cbb ]);};if _dda !=0{_afaf +=int (_fbgc [_ecgd .Data [_ade *_ecgd .RowStride +_beed ]&_bba ]);
};};return _afaf ;};func TstOSymbol (t *_f .T ,scale ...int )*Bitmap {_dgad ,_afeg :=NewWithData (4,5,[]byte {0xF0,0x90,0x90,0x90,0xF0});_e .NoError (t ,_afeg );return TstGetScaledSymbol (t ,_dgad ,scale ...);};type Boxes []*_ce .Rectangle ;func (_fgeee *Bitmaps )SortByHeight (){_gdfga :=(*byHeight )(_fgeee );
_cd .Sort (_gdfga )};func _cged (_fggd *Bitmap ,_ceac *Bitmap ,_bbegc *Selection ,_cbabb **Bitmap )(*Bitmap ,error ){const _bgg ="\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u004d\u006f\u0072\u0070\u0068A\u0072\u0067\u0073\u0031";if _ceac ==nil {return nil ,_ab .Error (_bgg ,"\u004d\u006f\u0072\u0070\u0068\u0041\u0072\u0067\u0073\u0031\u0020'\u0073\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066i\u006e\u0065\u0064");
};if _bbegc ==nil {return nil ,_ab .Error (_bgg ,"\u004d\u006f\u0072\u0068p\u0041\u0072\u0067\u0073\u0031\u0020\u0027\u0073\u0065\u006c'\u0020n\u006f\u0074\u0020\u0064\u0065\u0066\u0069n\u0065\u0064");};_eeba ,_agac :=_bbegc .Height ,_bbegc .Width ;if _eeba ==0||_agac ==0{return nil ,_ab .Error (_bgg ,"\u0073\u0065\u006c\u0065ct\u0069\u006f\u006e\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u0020\u0030");
};if _fggd ==nil {_fggd =_ceac .createTemplate ();*_cbabb =_ceac ;return _fggd ,nil ;};_fggd .Width =_ceac .Width ;_fggd .Height =_ceac .Height ;_fggd .RowStride =_ceac .RowStride ;_fggd .Color =_ceac .Color ;_fggd .Data =make ([]byte ,_ceac .RowStride *_ceac .Height );
if _fggd ==_ceac {*_cbabb =_ceac .Copy ();}else {*_cbabb =_ceac ;};return _fggd ,nil ;};func _defce (_dcbgf *Bitmap ,_dcdb *_d .Stack ,_bdcg ,_ffeb int )(_eadb *_ce .Rectangle ,_dcdg error ){const _adbge ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";
if _dcbgf ==nil {return nil ,_ab .Error (_adbge ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");};if _dcdb ==nil {return nil ,_ab .Error (_adbge ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");
};_abbd ,_cfdg :=_dcbgf .Width ,_dcbgf .Height ;_baae :=_abbd -1;_dcbgg :=_cfdg -1;if _bdcg < 0||_bdcg > _baae ||_ffeb < 0||_ffeb > _dcbgg ||!_dcbgf .GetPixel (_bdcg ,_ffeb ){return nil ,nil ;};_ebge :=_ce .Rect (100000,100000,0,0);if _dcdg =_defg (_dcdb ,_bdcg ,_bdcg ,_ffeb ,1,_dcbgg ,&_ebge );
_dcdg !=nil {return nil ,_ab .Wrap (_dcdg ,_adbge ,"\u0069\u006e\u0069t\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _dcdg =_defg (_dcdb ,_bdcg ,_bdcg ,_ffeb +1,-1,_dcbgg ,&_ebge );_dcdg !=nil {return nil ,_ab .Wrap (_dcdg ,_adbge ,"\u0032\u006ed\u0020\u0069\u006ei\u0074\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");
};_ebge .Min .X ,_ebge .Max .X =_bdcg ,_bdcg ;_ebge .Min .Y ,_ebge .Max .Y =_ffeb ,_ffeb ;var (_cafg *fillSegment ;_agcbg int ;);for _dcdb .Len ()> 0{if _cafg ,_dcdg =_ggba (_dcdb );_dcdg !=nil {return nil ,_ab .Wrap (_dcdg ,_adbge ,"");};_ffeb =_cafg ._adad ;
for _bdcg =_cafg ._dgeaf -1;_bdcg >=0&&_dcbgf .GetPixel (_bdcg ,_ffeb );_bdcg --{if _dcdg =_dcbgf .SetPixel (_bdcg ,_ffeb ,0);_dcdg !=nil {return nil ,_ab .Wrap (_dcdg ,_adbge ,"\u0031s\u0074\u0020\u0073\u0065\u0074");};};if _bdcg >=_cafg ._dgeaf -1{for {for _bdcg ++;
_bdcg <=_cafg ._fccd +1&&_bdcg <=_baae &&!_dcbgf .GetPixel (_bdcg ,_ffeb );_bdcg ++{};_agcbg =_bdcg ;if !(_bdcg <=_cafg ._fccd +1&&_bdcg <=_baae ){break ;};for ;_bdcg <=_baae &&_dcbgf .GetPixel (_bdcg ,_ffeb );_bdcg ++{if _dcdg =_dcbgf .SetPixel (_bdcg ,_ffeb ,0);
_dcdg !=nil {return nil ,_ab .Wrap (_dcdg ,_adbge ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _dcdg =_defg (_dcdb ,_agcbg ,_bdcg -1,_cafg ._adad ,_cafg ._egcgb ,_dcbgg ,&_ebge );_dcdg !=nil {return nil ,_ab .Wrap (_dcdg ,_adbge ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");
};if _bdcg > _cafg ._fccd {if _dcdg =_defg (_dcdb ,_cafg ._fccd +1,_bdcg -1,_cafg ._adad ,-_cafg ._egcgb ,_dcbgg ,&_ebge );_dcdg !=nil {return nil ,_ab .Wrap (_dcdg ,_adbge ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");
};};};continue ;};_agcbg =_bdcg +1;if _agcbg < _cafg ._dgeaf {if _dcdg =_defg (_dcdb ,_agcbg ,_cafg ._dgeaf -1,_cafg ._adad ,-_cafg ._egcgb ,_dcbgg ,&_ebge );_dcdg !=nil {return nil ,_ab .Wrap (_dcdg ,_adbge ,"\u006c\u0065\u0061\u006b\u0020\u006f\u006e\u0020\u006c\u0065\u0066\u0074 \u0073\u0069\u0064\u0065");
};};_bdcg =_cafg ._dgeaf ;for {for ;_bdcg <=_baae &&_dcbgf .GetPixel (_bdcg ,_ffeb );_bdcg ++{if _dcdg =_dcbgf .SetPixel (_bdcg ,_ffeb ,0);_dcdg !=nil {return nil ,_ab .Wrap (_dcdg ,_adbge ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _dcdg =_defg (_dcdb ,_agcbg ,_bdcg -1,_cafg ._adad ,_cafg ._egcgb ,_dcbgg ,&_ebge );
_dcdg !=nil {return nil ,_ab .Wrap (_dcdg ,_adbge ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _bdcg > _cafg ._fccd {if _dcdg =_defg (_dcdb ,_cafg ._fccd +1,_bdcg -1,_cafg ._adad ,-_cafg ._egcgb ,_dcbgg ,&_ebge );_dcdg !=nil {return nil ,_ab .Wrap (_dcdg ,_adbge ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");
};};for _bdcg ++;_bdcg <=_cafg ._fccd +1&&_bdcg <=_baae &&!_dcbgf .GetPixel (_bdcg ,_ffeb );_bdcg ++{};_agcbg =_bdcg ;if !(_bdcg <=_cafg ._fccd +1&&_bdcg <=_baae ){break ;};};};_ebge .Max .X ++;_ebge .Max .Y ++;return &_ebge ,nil ;};func (_dadba CombinationOperator )String ()string {var _dgfg string ;
switch _dadba {case CmbOpOr :_dgfg ="\u004f\u0052";case CmbOpAnd :_dgfg ="\u0041\u004e\u0044";case CmbOpXor :_dgfg ="\u0058\u004f\u0052";case CmbOpXNor :_dgfg ="\u0058\u004e\u004f\u0052";case CmbOpReplace :_dgfg ="\u0052E\u0050\u004c\u0041\u0043\u0045";
case CmbOpNot :_dgfg ="\u004e\u004f\u0054";};return _dgfg ;};func (_ddbb *Bitmap )centroid (_bbce ,_dgdb []int )(Point ,error ){_aeab :=Point {};_ddbb .setPadBits (0);if len (_bbce )==0{_bbce =_bgefg ();};if len (_dgdb )==0{_dgdb =_ffgg ();};var _bfcf ,_feca ,_bdc ,_gdedee ,_egba ,_gcgd int ;
var _fabd byte ;for _egba =0;_egba < _ddbb .Height ;_egba ++{_gcecg :=_ddbb .RowStride *_egba ;_gdedee =0;for _gcgd =0;_gcgd < _ddbb .RowStride ;_gcgd ++{_fabd =_ddbb .Data [_gcecg +_gcgd ];if _fabd !=0{_gdedee +=_dgdb [_fabd ];_bfcf +=_bbce [_fabd ]+_gcgd *8*_dgdb [_fabd ];
};};_bdc +=_gdedee ;_feca +=_gdedee *_egba ;};if _bdc !=0{_aeab .X =float32 (_bfcf )/float32 (_bdc );_aeab .Y =float32 (_feca )/float32 (_bdc );};return _aeab ,nil ;};func init (){for _cacg :=0;_cacg < 256;_cacg ++{_fbgc [_cacg ]=uint8 (_cacg &0x1)+(uint8 (_cacg >>1)&0x1)+(uint8 (_cacg >>2)&0x1)+(uint8 (_cacg >>3)&0x1)+(uint8 (_cacg >>4)&0x1)+(uint8 (_cacg >>5)&0x1)+(uint8 (_cacg >>6)&0x1)+(uint8 (_cacg >>7)&0x1);
};};func (_bcb *Bitmap )Equals (s *Bitmap )bool {if len (_bcb .Data )!=len (s .Data )||_bcb .Width !=s .Width ||_bcb .Height !=s .Height {return false ;};for _dcb :=0;_dcb < _bcb .Height ;_dcb ++{_abb :=_dcb *_bcb .RowStride ;for _dbfa :=0;_dbfa < _bcb .RowStride ;
_dbfa ++{if _bcb .Data [_abb +_dbfa ]!=s .Data [_abb +_dbfa ]{return false ;};};};return true ;};func _gfdc (_cafbd *Bitmap )(_fdcd *Bitmap ,_gdfg int ,_cggb error ){const _baage ="\u0042i\u0074\u006d\u0061\u0070.\u0077\u006f\u0072\u0064\u004da\u0073k\u0042y\u0044\u0069\u006c\u0061\u0074\u0069\u006fn";
if _cafbd ==nil {return nil ,0,_ab .Errorf (_baage ,"\u0027\u0073\u0027\u0020bi\u0074\u006d\u0061\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006ee\u0064");};var _ccbg ,_ccag *Bitmap ;if _ccbg ,_cggb =_egec (nil ,_cafbd );_cggb !=nil {return nil ,0,_ab .Wrap (_cggb ,_baage ,"\u0063\u006f\u0070\u0079\u0020\u0027\u0073\u0027");
};var (_egac [13]int ;_afg ,_gfe int ;);_cade :=12;_aagfd :=_d .NewNumSlice (_cade +1);_fgae :=_d .NewNumSlice (_cade +1);var _ecaf *Boxes ;for _bff :=0;_bff <=_cade ;_bff ++{if _bff ==0{if _ccag ,_cggb =_egec (nil ,_ccbg );_cggb !=nil {return nil ,0,_ab .Wrap (_cggb ,_baage ,"\u0066i\u0072\u0073\u0074\u0020\u0062\u006d2");
};}else {if _ccag ,_cggb =_eccd (_ccbg ,MorphProcess {Operation :MopDilation ,Arguments :[]int {2,1}});_cggb !=nil {return nil ,0,_ab .Wrap (_cggb ,_baage ,"\u0064\u0069\u006ca\u0074\u0069\u006f\u006e\u0020\u0062\u006d\u0032");};};if _ecaf ,_cggb =_ccag .connComponentsBB (4);
_cggb !=nil {return nil ,0,_ab .Wrap (_cggb ,_baage ,"");};_egac [_bff ]=len (*_ecaf );_aagfd .AddInt (_egac [_bff ]);switch _bff {case 0:_afg =_egac [0];default:_gfe =_egac [_bff -1]-_egac [_bff ];_fgae .AddInt (_gfe );};_ccbg =_ccag ;};_baab :=true ;
_gdg :=2;var _dcfg ,_efbb int ;for _efg :=1;_efg < len (*_fgae );_efg ++{if _dcfg ,_cggb =_aagfd .GetInt (_efg );_cggb !=nil {return nil ,0,_ab .Wrap (_cggb ,_baage ,"\u0043\u0068\u0065\u0063ki\u006e\u0067\u0020\u0062\u0065\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0069o\u006e");
};if _baab &&_dcfg < int (0.3*float32 (_afg )){_gdg =_efg +1;_baab =false ;};if _gfe ,_cggb =_fgae .GetInt (_efg );_cggb !=nil {return nil ,0,_ab .Wrap (_cggb ,_baage ,"\u0067\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u006ea\u0044\u0069\u0066\u0066");};
if _gfe > _efbb {_efbb =_gfe ;};};_dbg :=_cafbd .XResolution ;if _dbg ==0{_dbg =150;};if _dbg > 110{_gdg ++;};if _gdg < 2{_g .Log .Trace ("J\u0042\u0049\u0047\u0032\u0020\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0069\u0042\u0065\u0073\u0074 \u0074\u006f\u0020\u006d\u0069\u006e\u0069\u006d\u0075\u006d a\u006c\u006c\u006fw\u0061b\u006c\u0065");
_gdg =2;};_gdfg =_gdg +1;if _fdcd ,_cggb =_cbcf (nil ,_cafbd ,_gdg +1,1);_cggb !=nil {return nil ,0,_ab .Wrap (_cggb ,_baage ,"\u0067\u0065\u0074\u0074in\u0067\u0020\u006d\u0061\u0073\u006b\u0020\u0066\u0061\u0069\u006c\u0065\u0064");};return _fdcd ,_gdfg ,nil ;
};func (_bdaf *Boxes )Get (i int )(*_ce .Rectangle ,error ){const _gbbb ="\u0042o\u0078\u0065\u0073\u002e\u0047\u0065t";if _bdaf ==nil {return nil ,_ab .Error (_gbbb ,"\u0027\u0042\u006f\u0078es\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};if i > len (*_bdaf )-1{return nil ,_ab .Errorf (_gbbb ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return (*_bdaf )[i ],nil ;};func _bgefg ()[]int {_gbg :=make ([]int ,256);
_gbg [0]=0;_gbg [1]=7;var _daeb int ;for _daeb =2;_daeb < 4;_daeb ++{_gbg [_daeb ]=_gbg [_daeb -2]+6;};for _daeb =4;_daeb < 8;_daeb ++{_gbg [_daeb ]=_gbg [_daeb -4]+5;};for _daeb =8;_daeb < 16;_daeb ++{_gbg [_daeb ]=_gbg [_daeb -8]+4;};for _daeb =16;_daeb < 32;
_daeb ++{_gbg [_daeb ]=_gbg [_daeb -16]+3;};for _daeb =32;_daeb < 64;_daeb ++{_gbg [_daeb ]=_gbg [_daeb -32]+2;};for _daeb =64;_daeb < 128;_daeb ++{_gbg [_daeb ]=_gbg [_daeb -64]+1;};for _daeb =128;_daeb < 256;_daeb ++{_gbg [_daeb ]=_gbg [_daeb -128];};
return _gbg ;};func Blit (src *Bitmap ,dst *Bitmap ,x ,y int ,op CombinationOperator )error {var _bfa ,_ggc int ;_ebgg :=src .RowStride -1;if x < 0{_ggc =-x ;x =0;}else if x +src .Width > dst .Width {_ebgg -=src .Width +x -dst .Width ;};if y < 0{_bfa =-y ;
y =0;_ggc +=src .RowStride ;_ebgg +=src .RowStride ;}else if y +src .Height > dst .Height {_bfa =src .Height +y -dst .Height ;};var (_fdaa int ;_gfgd error ;);_cafb :=x &0x07;_bgab :=8-_cafb ;_geec :=src .Width &0x07;_dfbg :=_bgab -_geec ;_dgea :=_bgab &0x07!=0;
_cgad :=src .Width <=((_ebgg -_ggc )<<3)+_bgab ;_cdcdg :=dst .GetByteIndex (x ,y );_cgbbf :=_bfa +dst .Height ;if src .Height > _cgbbf {_fdaa =_cgbbf ;}else {_fdaa =src .Height ;};switch {case !_dgea :_gfgd =_edbb (src ,dst ,_bfa ,_fdaa ,_cdcdg ,_ggc ,_ebgg ,op );
case _cgad :_gfgd =_fag (src ,dst ,_bfa ,_fdaa ,_cdcdg ,_ggc ,_ebgg ,_dfbg ,_cafb ,_bgab ,op );default:_gfgd =_abf (src ,dst ,_bfa ,_fdaa ,_cdcdg ,_ggc ,_ebgg ,_dfbg ,_cafb ,_bgab ,op ,_geec );};return _gfgd ;};func _cad ()(_affc [256]uint64 ){for _fdc :=0;
_fdc < 256;_fdc ++{if _fdc &0x01!=0{_affc [_fdc ]|=0xff;};if _fdc &0x02!=0{_affc [_fdc ]|=0xff00;};if _fdc &0x04!=0{_affc [_fdc ]|=0xff0000;};if _fdc &0x08!=0{_affc [_fdc ]|=0xff000000;};if _fdc &0x10!=0{_affc [_fdc ]|=0xff00000000;};if _fdc &0x20!=0{_affc [_fdc ]|=0xff0000000000;
};if _fdc &0x40!=0{_affc [_fdc ]|=0xff000000000000;};if _fdc &0x80!=0{_affc [_fdc ]|=0xff00000000000000;};};return _affc ;};func RasterOperation (dest *Bitmap ,dx ,dy ,dw ,dh int ,op RasterOperator ,src *Bitmap ,sx ,sy int )error {return _debgc (dest ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );
};func _fag (_gfab ,_acb *Bitmap ,_cdcg ,_agcg ,_bgcg ,_gff ,_aec ,_fdg ,_geca ,_abc int ,_cfge CombinationOperator )error {var _dedc int ;_gbc :=func (){_dedc ++;_bgcg +=_acb .RowStride ;_gff +=_gfab .RowStride ;_aec +=_gfab .RowStride };for _dedc =_cdcg ;
_dedc < _agcg ;_gbc (){var _bebf uint16 ;_aeec :=_bgcg ;for _caac :=_gff ;_caac <=_aec ;_caac ++{_fcdd ,_bafb :=_acb .GetByte (_aeec );if _bafb !=nil {return _bafb ;};_baee ,_bafb :=_gfab .GetByte (_caac );if _bafb !=nil {return _bafb ;};_bebf =(_bebf |uint16 (_baee ))<<uint (_abc );
_baee =byte (_bebf >>8);if _caac ==_aec {_baee =_cgga (uint (_fdg ),_baee );};if _bafb =_acb .SetByte (_aeec ,_becb (_fcdd ,_baee ,_cfge ));_bafb !=nil {return _bafb ;};_aeec ++;_bebf <<=uint (_geca );};};return nil ;};func TstPSymbol (t *_f .T )*Bitmap {t .Helper ();
_ccbef :=New (5,8);_e .NoError (t ,_ccbef .SetPixel (0,0,1));_e .NoError (t ,_ccbef .SetPixel (1,0,1));_e .NoError (t ,_ccbef .SetPixel (2,0,1));_e .NoError (t ,_ccbef .SetPixel (3,0,1));_e .NoError (t ,_ccbef .SetPixel (4,1,1));_e .NoError (t ,_ccbef .SetPixel (0,1,1));
_e .NoError (t ,_ccbef .SetPixel (4,2,1));_e .NoError (t ,_ccbef .SetPixel (0,2,1));_e .NoError (t ,_ccbef .SetPixel (4,3,1));_e .NoError (t ,_ccbef .SetPixel (0,3,1));_e .NoError (t ,_ccbef .SetPixel (0,4,1));_e .NoError (t ,_ccbef .SetPixel (1,4,1));
_e .NoError (t ,_ccbef .SetPixel (2,4,1));_e .NoError (t ,_ccbef .SetPixel (3,4,1));_e .NoError (t ,_ccbef .SetPixel (0,5,1));_e .NoError (t ,_ccbef .SetPixel (0,6,1));_e .NoError (t ,_ccbef .SetPixel (0,7,1));return _ccbef ;};func _abdf ()(_cfgb []byte ){_cfgb =make ([]byte ,256);
for _ddda :=0;_ddda < 256;_ddda ++{_dcc :=byte (_ddda );_cfgb [_dcc ]=(_dcc &0x01)|((_dcc &0x04)>>1)|((_dcc &0x10)>>2)|((_dcc &0x40)>>3)|((_dcc &0x02)<<3)|((_dcc &0x08)<<2)|((_dcc &0x20)<<1)|(_dcc &0x80);};return _cfgb ;};func (_gceea *Bitmap )resizeImageData (_adcd *Bitmap )error {if _adcd ==nil {return _ab .Error ("\u0072e\u0073i\u007a\u0065\u0049\u006d\u0061\u0067\u0065\u0044\u0061\u0074\u0061","\u0073r\u0063 \u0069\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _gceea .SizesEqual (_adcd ){return nil ;};_gceea .Data =make ([]byte ,len (_adcd .Data ));_gceea .Width =_adcd .Width ;_gceea .Height =_adcd .Height ;_gceea .RowStride =_adcd .RowStride ;return nil ;};func (_fed *Bitmap )addPadBits ()(_cedc error ){const _ebbf ="\u0062\u0069\u0074\u006d\u0061\u0070\u002e\u0061\u0064\u0064\u0050\u0061d\u0042\u0069\u0074\u0073";
_cadf :=_fed .Width %8;if _cadf ==0{return nil ;};_bgaa :=_fed .Width /8;_gdeb :=_b .NewReader (_fed .Data );_ffc :=make ([]byte ,_fed .Height *_fed .RowStride );_edb :=_b .NewWriterMSB (_ffc );_aad :=make ([]byte ,_bgaa );var (_cadc int ;_ged uint64 ;
);for _cadc =0;_cadc < _fed .Height ;_cadc ++{if _ ,_cedc =_gdeb .Read (_aad );_cedc !=nil {return _ab .Wrap (_cedc ,_ebbf ,"\u0066u\u006c\u006c\u0020\u0062\u0079\u0074e");};if _ ,_cedc =_edb .Write (_aad );_cedc !=nil {return _ab .Wrap (_cedc ,_ebbf ,"\u0066\u0075\u006c\u006c\u0020\u0062\u0079\u0074\u0065\u0073");
};if _ged ,_cedc =_gdeb .ReadBits (byte (_cadf ));_cedc !=nil {return _ab .Wrap (_cedc ,_ebbf ,"\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0062\u0069\u0074\u0073");};if _cedc =_edb .WriteByte (byte (_ged )<<uint (8-_cadf ));_cedc !=nil {return _ab .Wrap (_cedc ,_ebbf ,"\u006ca\u0073\u0074\u0020\u0062\u0079\u0074e");
};};_fed .Data =_edb .Data ();return nil ;};func (_dce *Bitmap )equivalent (_egbc *Bitmap )bool {if _dce ==_egbc {return true ;};if !_dce .SizesEqual (_egbc ){return false ;};_efbd :=_gdff (_dce ,_egbc ,CmbOpXor );_geafc :=_dce .countPixels ();_fbfc :=int (0.25*float32 (_geafc ));
if _efbd .thresholdPixelSum (_fbfc ){return false ;};var (_cbe [9][9]int ;_bca [18][9]int ;_aagf [9][18]int ;_gfa int ;_gbbf int ;);_bcg :=9;_fce :=_dce .Height /_bcg ;_dcbc :=_dce .Width /_bcg ;_edga ,_aceg :=_fce /2,_dcbc /2;if _fce < _dcbc {_edga =_dcbc /2;
_aceg =_fce /2;};_gecg :=float64 (_edga )*float64 (_aceg )*_cdd .Pi ;_ceae :=int (float64 (_fce *_dcbc /2)*0.9);_bgea :=int (float64 (_dcbc *_fce /2)*0.9);for _cecg :=0;_cecg < _bcg ;_cecg ++{_aafd :=_dcbc *_cecg +_gfa ;var _gbee int ;if _cecg ==_bcg -1{_gfa =0;
_gbee =_dce .Width ;}else {_gbee =_aafd +_dcbc ;if ((_dce .Width -_gfa )%_bcg )> 0{_gfa ++;_gbee ++;};};for _agab :=0;_agab < _bcg ;_agab ++{_gfce :=_fce *_agab +_gbbf ;var _beca int ;if _agab ==_bcg -1{_gbbf =0;_beca =_dce .Height ;}else {_beca =_gfce +_fce ;
if (_dce .Height -_gbbf )%_bcg > 0{_gbbf ++;_beca ++;};};var _gdcc ,_deg ,_beef ,_eagg int ;_bcfe :=(_aafd +_gbee )/2;_dgf :=(_gfce +_beca )/2;for _agdf :=_aafd ;_agdf < _gbee ;_agdf ++{for _caf :=_gfce ;_caf < _beca ;_caf ++{if _efbd .GetPixel (_agdf ,_caf ){if _agdf < _bcfe {_gdcc ++;
}else {_deg ++;};if _caf < _dgf {_eagg ++;}else {_beef ++;};};};};_cbe [_cecg ][_agab ]=_gdcc +_deg ;_bca [_cecg *2][_agab ]=_gdcc ;_bca [_cecg *2+1][_agab ]=_deg ;_aagf [_cecg ][_agab *2]=_eagg ;_aagf [_cecg ][_agab *2+1]=_beef ;};};for _agde :=0;_agde < _bcg *2-1;
_agde ++{for _bccf :=0;_bccf < (_bcg -1);_bccf ++{var _cgef int ;for _gceg :=0;_gceg < 2;_gceg ++{for _edgc :=0;_edgc < 2;_edgc ++{_cgef +=_bca [_agde +_gceg ][_bccf +_edgc ];};};if _cgef > _bgea {return false ;};};};for _ccfbd :=0;_ccfbd < (_bcg -1);_ccfbd ++{for _cga :=0;
_cga < ((_bcg *2)-1);_cga ++{var _bcbc int ;for _gcea :=0;_gcea < 2;_gcea ++{for _bdea :=0;_bdea < 2;_bdea ++{_bcbc +=_aagf [_ccfbd +_gcea ][_cga +_bdea ];};};if _bcbc > _ceae {return false ;};};};for _bbf :=0;_bbf < (_bcg -2);_bbf ++{for _gdcg :=0;_gdcg < (_bcg -2);
_gdcg ++{var _eea ,_fbeg int ;for _eebe :=0;_eebe < 3;_eebe ++{for _degf :=0;_degf < 3;_degf ++{if _eebe ==_degf {_eea +=_cbe [_bbf +_eebe ][_gdcg +_degf ];};if (2-_eebe )==_degf {_fbeg +=_cbe [_bbf +_eebe ][_gdcg +_degf ];};};};if _eea > _bgea ||_fbeg > _bgea {return false ;
};};};for _aagbe :=0;_aagbe < (_bcg -1);_aagbe ++{for _caae :=0;_caae < (_bcg -1);_caae ++{var _gba int ;for _bbac :=0;_bbac < 2;_bbac ++{for _baeg :=0;_baeg < 2;_baeg ++{_gba +=_cbe [_aagbe +_bbac ][_caae +_baeg ];};};if float64 (_gba )> _gecg {return false ;
};};};return true ;};func _dbda (_eeec ,_ffcd ,_aadf *Bitmap )(*Bitmap ,error ){const _cfdf ="\u0062\u0069\u0074\u006d\u0061\u0070\u002e\u0078\u006f\u0072";if _ffcd ==nil {return nil ,_ab .Error (_cfdf ,"'\u0062\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");
};if _aadf ==nil {return nil ,_ab .Error (_cfdf ,"'\u0062\u0032\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _eeec ==_aadf {return nil ,_ab .Error (_cfdf ,"'\u0064\u0027\u0020\u003d\u003d\u0020\u0027\u0062\u0032\u0027");};if !_ffcd .SizesEqual (_aadf ){_g .Log .Debug ("\u0025s\u0020\u002d \u0042\u0069\u0074\u006da\u0070\u0020\u0027b\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074 e\u0071\u0075\u0061l\u0020\u0073i\u007a\u0065\u0020\u0077\u0069\u0074h\u0020\u0027b\u0032\u0027",_cfdf );
};var _ece error ;if _eeec ,_ece =_egec (_eeec ,_ffcd );_ece !=nil {return nil ,_ab .Wrap (_ece ,_cfdf ,"\u0063\u0061n\u0027\u0074\u0020c\u0072\u0065\u0061\u0074\u0065\u0020\u0027\u0064\u0027");};if _ece =_eeec .RasterOperation (0,0,_eeec .Width ,_eeec .Height ,PixSrcXorDst ,_aadf ,0,0);
_ece !=nil {return nil ,_ab .Wrap (_ece ,_cfdf ,"");};return _eeec ,nil ;};func (_ccdc *Bitmap )removeBorderGeneral (_edde ,_dcbaa ,_fba ,_dfcb int )(*Bitmap ,error ){const _agef ="\u0072\u0065\u006d\u006fve\u0042\u006f\u0072\u0064\u0065\u0072\u0047\u0065\u006e\u0065\u0072\u0061\u006c";
if _edde < 0||_dcbaa < 0||_fba < 0||_dfcb < 0{return nil ,_ab .Error (_agef ,"\u006e\u0065g\u0061\u0074\u0069\u0076\u0065\u0020\u0062\u0072\u006f\u0064\u0065\u0072\u0020\u0072\u0065\u006d\u006f\u0076\u0065\u0020\u0076\u0061lu\u0065\u0073");};_gbec ,_cca :=_ccdc .Width ,_ccdc .Height ;
_fdeb :=_gbec -_edde -_dcbaa ;_gcee :=_cca -_fba -_dfcb ;if _fdeb <=0{return nil ,_ab .Errorf (_agef ,"w\u0069\u0064\u0074\u0068: \u0025d\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u003e\u0020\u0030",_fdeb );};if _gcee <=0{return nil ,_ab .Errorf (_agef ,"\u0068\u0065\u0069\u0067ht\u003a\u0020\u0025\u0064\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u003e \u0030",_gcee );
};_ebc :=New (_fdeb ,_gcee );_ebc .Color =_ccdc .Color ;_bcec :=_ebc .RasterOperation (0,0,_fdeb ,_gcee ,PixSrc ,_ccdc ,_edde ,_fba );if _bcec !=nil {return nil ,_ab .Wrap (_bcec ,_agef ,"");};return _ebc ,nil ;};func _gbaa (_bdggc *Bitmap ,_ffe ,_bafd int ,_cafd ,_acfa int ,_dcge RasterOperator ,_dgeae *Bitmap ,_eceeb ,_gegg int )error {var _cccb ,_gffbf ,_ggac ,_cedb int ;
if _ffe < 0{_eceeb -=_ffe ;_cafd +=_ffe ;_ffe =0;};if _eceeb < 0{_ffe -=_eceeb ;_cafd +=_eceeb ;_eceeb =0;};_cccb =_ffe +_cafd -_bdggc .Width ;if _cccb > 0{_cafd -=_cccb ;};_gffbf =_eceeb +_cafd -_dgeae .Width ;if _gffbf > 0{_cafd -=_gffbf ;};if _bafd < 0{_gegg -=_bafd ;
_acfa +=_bafd ;_bafd =0;};if _gegg < 0{_bafd -=_gegg ;_acfa +=_gegg ;_gegg =0;};_ggac =_bafd +_acfa -_bdggc .Height ;if _ggac > 0{_acfa -=_ggac ;};_cedb =_gegg +_acfa -_dgeae .Height ;if _cedb > 0{_acfa -=_cedb ;};if _cafd <=0||_acfa <=0{return nil ;};
var _cabe error ;switch {case _ffe &7==0&&_eceeb &7==0:_cabe =_eeea (_bdggc ,_ffe ,_bafd ,_cafd ,_acfa ,_dcge ,_dgeae ,_eceeb ,_gegg );case _ffe &7==_eceeb &7:_cabe =_ffcg (_bdggc ,_ffe ,_bafd ,_cafd ,_acfa ,_dcge ,_dgeae ,_eceeb ,_gegg );default:_cabe =_bega (_bdggc ,_ffe ,_bafd ,_cafd ,_acfa ,_dcge ,_dgeae ,_eceeb ,_gegg );
};if _cabe !=nil {return _ab .Wrap (_cabe ,"r\u0061\u0073\u0074\u0065\u0072\u004f\u0070\u004c\u006f\u0077","");};return nil ;};func TstWSymbol (t *_f .T ,scale ...int )*Bitmap {_ccaec ,_bcabg :=NewWithData (5,5,[]byte {0x88,0x88,0xA8,0xD8,0x88});_e .NoError (t ,_bcabg );
return TstGetScaledSymbol (t ,_ccaec ,scale ...);};func _abfe (_baegf *Bitmap ,_aaee *_d .Stack ,_aaeee ,_aadd ,_bcgf int )(_egcf *_ce .Rectangle ,_bbfb error ){const _adafb ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";
if _baegf ==nil {return nil ,_ab .Error (_adafb ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");};if _aaee ==nil {return nil ,_ab .Error (_adafb ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");
};switch _bcgf {case 4:if _egcf ,_bbfb =_gacca (_baegf ,_aaee ,_aaeee ,_aadd );_bbfb !=nil {return nil ,_ab .Wrap (_bbfb ,_adafb ,"");};return _egcf ,nil ;case 8:if _egcf ,_bbfb =_defce (_baegf ,_aaee ,_aaeee ,_aadd );_bbfb !=nil {return nil ,_ab .Wrap (_bbfb ,_adafb ,"");
};return _egcf ,nil ;default:return nil ,_ab .Errorf (_adafb ,"\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u0069\u0073 \u006eo\u0074\u0020\u0034\u0020\u006f\u0072\u0020\u0038\u003a\u0020\u0027\u0025\u0064\u0027",_bcgf );
};};const (ComponentConn Component =iota ;ComponentCharacters ;ComponentWords ;);type fillSegment struct{_dgeaf int ;_fccd int ;_adad int ;_egcgb int ;};func _cgc (_cdagf ,_acaf *Bitmap ,_cfega ,_geefd int )(*Bitmap ,error ){const _ccca ="\u0063\u006c\u006f\u0073\u0065\u0053\u0061\u0066\u0065B\u0072\u0069\u0063\u006b";
if _acaf ==nil {return nil ,_ab .Error (_ccca ,"\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _cfega < 1||_geefd < 1{return nil ,_ab .Error (_ccca ,"\u0068s\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0073\u0069z\u0065\u0020\u006e\u006f\u0074\u0020\u003e\u003d\u0020\u0031");
};if _cfega ==1&&_geefd ==1{return _egec (_cdagf ,_acaf );};if MorphBC ==SymmetricMorphBC {_egae ,_dgeg :=_cbcf (_cdagf ,_acaf ,_cfega ,_geefd );if _dgeg !=nil {return nil ,_ab .Wrap (_dgeg ,_ccca ,"\u0053\u0079m\u006d\u0065\u0074r\u0069\u0063\u004d\u006f\u0072\u0070\u0068\u0042\u0043");
};return _egae ,nil ;};_acea :=_bccd (_cfega /2,_geefd /2);_afb :=8*((_acea +7)/8);_cgfda ,_ggea :=_acaf .AddBorder (_afb ,0);if _ggea !=nil {return nil ,_ab .Wrapf (_ggea ,_ccca ,"\u0042\u006f\u0072\u0064\u0065\u0072\u0053\u0069\u007ae\u003a\u0020\u0025\u0064",_afb );
};var _gdgb ,_gdfb *Bitmap ;if _cfega ==1||_geefd ==1{_bdab :=SelCreateBrick (_geefd ,_cfega ,_geefd /2,_cfega /2,SelHit );_gdgb ,_ggea =_gdbd (nil ,_cgfda ,_bdab );if _ggea !=nil {return nil ,_ab .Wrap (_ggea ,_ccca ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};}else {_abcc :=SelCreateBrick (1,_cfega ,0,_cfega /2,SelHit );_ffbef ,_bgaaf :=_bdefe (nil ,_cgfda ,_abcc );if _bgaaf !=nil {return nil ,_ab .Wrap (_bgaaf ,_ccca ,"\u0072\u0065\u0067\u0075la\u0072\u0020\u002d\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0064\u0069\u006c\u0061t\u0065");
};_cde :=SelCreateBrick (_geefd ,1,_geefd /2,0,SelHit );_gdgb ,_bgaaf =_bdefe (nil ,_ffbef ,_cde );if _bgaaf !=nil {return nil ,_ab .Wrap (_bgaaf ,_ccca ,"\u0072\u0065\u0067ul\u0061\u0072\u0020\u002d\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};if _ ,_bgaaf =_aeee (_ffbef ,_gdgb ,_abcc );_bgaaf !=nil {return nil ,_ab .Wrap (_bgaaf ,_ccca ,"r\u0065\u0067\u0075\u006car\u0020-\u0020\u0066\u0069\u0072\u0073t\u0020\u0065\u0072\u006f\u0064\u0065");};if _ ,_bgaaf =_aeee (_gdgb ,_ffbef ,_cde );_bgaaf !=nil {return nil ,_ab .Wrap (_bgaaf ,_ccca ,"\u0072\u0065\u0067\u0075la\u0072\u0020\u002d\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0065\u0072\u006fd\u0065");
};};if _gdfb ,_ggea =_gdgb .RemoveBorder (_afb );_ggea !=nil {return nil ,_ab .Wrap (_ggea ,_ccca ,"\u0072e\u0067\u0075\u006c\u0061\u0072");};if _cdagf ==nil {return _gdfb ,nil ;};if _ ,_ggea =_egec (_cdagf ,_gdfb );_ggea !=nil {return nil ,_ggea ;};return _cdagf ,nil ;
};type byHeight Bitmaps ;func _aabc (_fedgd *Bitmap ,_ebffc ,_ecgfa ,_eeceg ,_bacbd int ,_bffd RasterOperator ){if _ebffc < 0{_eeceg +=_ebffc ;_ebffc =0;};_cdg :=_ebffc +_eeceg -_fedgd .Width ;if _cdg > 0{_eeceg -=_cdg ;};if _ecgfa < 0{_bacbd +=_ecgfa ;
_ecgfa =0;};_ddbba :=_ecgfa +_bacbd -_fedgd .Height ;if _ddbba > 0{_bacbd -=_ddbba ;};if _eeceg <=0||_bacbd <=0{return ;};if (_ebffc &7)==0{_gaed (_fedgd ,_ebffc ,_ecgfa ,_eeceg ,_bacbd ,_bffd );}else {_aafde (_fedgd ,_ebffc ,_ecgfa ,_eeceg ,_bacbd ,_bffd );
};};func (_dbef *Bitmaps )GetBitmap (i int )(*Bitmap ,error ){const _bbbb ="\u0047e\u0074\u0042\u0069\u0074\u006d\u0061p";if _dbef ==nil {return nil ,_ab .Error (_bbbb ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0042\u0069\u0074ma\u0070\u0073");
};if i > len (_dbef .Values )-1{return nil ,_ab .Errorf (_bbbb ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _dbef .Values [i ],nil ;};func (_gce *Bitmap )CreateTemplate ()*Bitmap {return _gce .createTemplate ()};
func CombineBytes (oldByte ,newByte byte ,op CombinationOperator )byte {return _becb (oldByte ,newByte ,op );};func (_gaag *Boxes )selectWithIndicator (_bac *_d .NumSlice )(_fdbb *Boxes ,_fgdcg error ){const _cfbf ="\u0042o\u0078\u0065\u0073\u002es\u0065\u006c\u0065\u0063\u0074W\u0069t\u0068I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";
if _gaag ==nil {return nil ,_ab .Error (_cfbf ,"b\u006f\u0078\u0065\u0073 '\u0062'\u0020\u006e\u006f\u0074\u0020d\u0065\u0066\u0069\u006e\u0065\u0064");};if _bac ==nil {return nil ,_ab .Error (_cfbf ,"\u0027\u006ea\u0027\u0020\u006eo\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};if len (*_bac )!=len (*_gaag ){return nil ,_ab .Error (_cfbf ,"\u0062\u006f\u0078\u0065\u0073\u0020\u0027\u0062\u0027\u0020\u0068\u0061\u0073\u0020\u0064\u0069\u0066\u0066\u0065\u0072\u0065\u006e\u0074\u0020s\u0069\u007a\u0065\u0020\u0074h\u0061\u006e \u0027\u006e\u0061\u0027");
};var _afad ,_cadd int ;for _adca :=0;_adca < len (*_bac );_adca ++{if _afad ,_fgdcg =_bac .GetInt (_adca );_fgdcg !=nil {return nil ,_ab .Wrap (_fgdcg ,_cfbf ,"\u0063\u0068\u0065\u0063\u006b\u0069\u006e\u0067\u0020c\u006f\u0075\u006e\u0074");};if _afad ==1{_cadd ++;
};};if _cadd ==len (*_gaag ){return _gaag ,nil ;};_ggca :=Boxes {};for _eac :=0;_eac < len (*_bac );_eac ++{_afad =int ((*_bac )[_eac ]);if _afad ==0{continue ;};_ggca =append (_ggca ,(*_gaag )[_eac ]);};_fdbb =&_ggca ;return _fdbb ,nil ;};const (CmbOpOr CombinationOperator =iota ;
CmbOpAnd ;CmbOpXor ;CmbOpXNor ;CmbOpReplace ;CmbOpNot ;);func NewWithData (width ,height int ,data []byte )(*Bitmap ,error ){const _gfba ="N\u0065\u0077\u0057\u0069\u0074\u0068\u0044\u0061\u0074\u0061";_cbg :=_acc (width ,height );_cbg .Data =data ;if len (data )< height *_cbg .RowStride {return nil ,_ab .Errorf (_gfba ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0064\u0061\u0074\u0061\u0020l\u0065\u006e\u0067\u0074\u0068\u003a \u0025\u0064\u0020\u002d\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062e\u003a\u0020\u0025\u0064",len (data ),height *_cbg .RowStride );
};return _cbg ,nil ;};func (_efaa *Bitmap )Zero ()bool {_dgbe :=_efaa .Width /8;_bec :=_efaa .Width &7;var _cdc byte ;if _bec !=0{_cdc =byte (0xff<<uint (8-_bec ));};var _fgdc ,_bdef ,_afa int ;for _bdef =0;_bdef < _efaa .Height ;_bdef ++{_fgdc =_efaa .RowStride *_bdef ;
for _afa =0;_afa < _dgbe ;_afa ,_fgdc =_afa +1,_fgdc +1{if _efaa .Data [_fgdc ]!=0{return false ;};};if _bec > 0{if _efaa .Data [_fgdc ]&_cdc !=0{return false ;};};};return true ;};func (_abe *ClassedPoints )validateIntSlice ()error {const _gccg ="\u0076\u0061l\u0069\u0064\u0061t\u0065\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065";
for _ ,_dfcc :=range _abe .IntSlice {if _dfcc >=(_abe .Points .Size ()){return _ab .Errorf (_gccg ,"c\u006c\u0061\u0073\u0073\u0020\u0069\u0064\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0076\u0061\u006ci\u0064 \u0069\u006e\u0064\u0065x\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0070\u006f\u0069\u006e\u0074\u0073\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u003a\u0020\u0025\u0064",_dfcc ,_abe .Points .Size ());
};};return nil ;};func _aadc (_ccge ...MorphProcess )(_efbaf error ){const _afbf ="v\u0065r\u0069\u0066\u0079\u004d\u006f\u0072\u0070\u0068P\u0072\u006f\u0063\u0065ss\u0065\u0073";var _bgga ,_fabe int ;for _aceag ,_gffb :=range _ccge {if _efbaf =_gffb .verify (_aceag ,&_bgga ,&_fabe );
_efbaf !=nil {return _ab .Wrap (_efbaf ,_afbf ,"");};};if _fabe !=0&&_bgga !=0{return _ab .Error (_afbf ,"\u004d\u006f\u0072\u0070\u0068\u0020\u0073\u0065\u0071\u0075\u0065n\u0063\u0065\u0020\u002d\u0020\u0062\u006f\u0072d\u0065r\u0020\u0061\u0064\u0064\u0065\u0064\u0020\u0062\u0075\u0074\u0020\u006e\u0065\u0074\u0020\u0072\u0065\u0064u\u0063\u0074\u0069\u006f\u006e\u0020\u006e\u006f\u0074\u0020\u0030");
};return nil ;};func Copy (d ,s *Bitmap )(*Bitmap ,error ){return _egec (d ,s )};const (_ LocationFilter =iota ;LocSelectWidth ;LocSelectHeight ;LocSelectXVal ;LocSelectYVal ;LocSelectIfEither ;LocSelectIfBoth ;);func (_bbg *Bitmap )GetUnpaddedData ()([]byte ,error ){_gfbc :=uint (_bbg .Width &0x07);
if _gfbc ==0{return _bbg .Data ,nil ;};_aed :=_bbg .Width *_bbg .Height ;if _aed %8!=0{_aed >>=3;_aed ++;}else {_aed >>=3;};_cff :=make ([]byte ,_aed );_cce :=_b .NewWriterMSB (_cff );const _beg ="\u0047e\u0074U\u006e\u0070\u0061\u0064\u0064\u0065\u0064\u0044\u0061\u0074\u0061";
for _eff :=0;_eff < _bbg .Height ;_eff ++{for _bcbe :=0;_bcbe < _bbg .RowStride ;_bcbe ++{_aedb :=_bbg .Data [_eff *_bbg .RowStride +_bcbe ];if _bcbe !=_bbg .RowStride -1{_addad :=_cce .WriteByte (_aedb );if _addad !=nil {return nil ,_ab .Wrap (_addad ,_beg ,"");
};continue ;};for _dfb :=uint (0);_dfb < _gfbc ;_dfb ++{_dgaa :=_cce .WriteBit (int (_aedb >>(7-_dfb )&0x01));if _dgaa !=nil {return nil ,_ab .Wrap (_dgaa ,_beg ,"");};};};};return _cff ,nil ;};func (_ccd *Bitmap )InverseData (){_ccd .inverseData ()};func (_cedca *Bitmaps )AddBox (box *_ce .Rectangle ){_cedca .Boxes =append (_cedca .Boxes ,box )};
type shift int ;func _abd (_ec *Bitmap ,_df int )(*Bitmap ,error ){const _cee ="\u0065x\u0070a\u006e\u0064\u0042\u0069\u006ea\u0072\u0079P\u006f\u0077\u0065\u0072\u0032";if _ec ==nil {return nil ,_ab .Error (_cee ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _df ==1{return _egec (nil ,_ec );};if _df !=2&&_df !=4&&_df !=8{return nil ,_ab .Error (_cee ,"\u0066\u0061\u0063t\u006f\u0072\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0069n\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d\u0020\u0072\u0061\u006e\u0067\u0065");
};_feg :=_df *_ec .Width ;_aae :=_df *_ec .Height ;_ebdc :=New (_feg ,_aae );var _fbe error ;switch _df {case 2:_fbe =_ag (_ebdc ,_ec );case 4:_fbe =_fe (_ebdc ,_ec );case 8:_fbe =_ga (_ebdc ,_ec );};if _fbe !=nil {return nil ,_ab .Wrap (_fbe ,_cee ,"");
};return _ebdc ,nil ;};func (_decd *Bitmap )setEightBytes (_bfb int ,_dfef uint64 )error {_ecae :=_decd .RowStride -(_bfb %_decd .RowStride );if _decd .RowStride !=_decd .Width >>3{_ecae --;};if _ecae >=8{return _decd .setEightFullBytes (_bfb ,_dfef );
};return _decd .setEightPartlyBytes (_bfb ,_ecae ,_dfef );};func _bccd (_beb ,_cedf int )int {if _beb > _cedf {return _beb ;};return _cedf ;};func (_eeeg *byHeight )Less (i ,j int )bool {return _eeeg .Values [i ].Height < _eeeg .Values [j ].Height };func HausTest (p1 ,p2 ,p3 ,p4 *Bitmap ,delX ,delY float32 ,maxDiffW ,maxDiffH int )(bool ,error ){const _caag ="\u0048\u0061\u0075\u0073\u0054\u0065\u0073\u0074";
_fafa ,_ggd :=p1 .Width ,p1 .Height ;_dcgf ,_feec :=p3 .Width ,p3 .Height ;if _d .Abs (_fafa -_dcgf )> maxDiffW {return false ,nil ;};if _d .Abs (_ggd -_feec )> maxDiffH {return false ,nil ;};_acef :=int (delX +_d .Sign (delX )*0.5);_gfed :=int (delY +_d .Sign (delY )*0.5);
var _gaf error ;_egdb :=p1 .CreateTemplate ();if _gaf =_egdb .RasterOperation (0,0,_fafa ,_ggd ,PixSrc ,p1 ,0,0);_gaf !=nil {return false ,_ab .Wrap (_gaf ,_caag ,"p\u0031\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _gaf =_egdb .RasterOperation (_acef ,_gfed ,_fafa ,_ggd ,PixNotSrcAndDst ,p4 ,0,0);
_gaf !=nil {return false ,_ab .Wrap (_gaf ,_caag ,"\u0021p\u0034\u0020\u0026\u0020\u0074");};if _egdb .Zero (){return false ,nil ;};if _gaf =_egdb .RasterOperation (_acef ,_gfed ,_dcgf ,_feec ,PixSrc ,p3 ,0,0);_gaf !=nil {return false ,_ab .Wrap (_gaf ,_caag ,"p\u0033\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");
};if _gaf =_egdb .RasterOperation (0,0,_dcgf ,_feec ,PixNotSrcAndDst ,p2 ,0,0);_gaf !=nil {return false ,_ab .Wrap (_gaf ,_caag ,"\u0021p\u0032\u0020\u0026\u0020\u0074");};return _egdb .Zero (),nil ;};func (_bga *Bitmap )AddBorder (borderSize ,val int )(*Bitmap ,error ){if borderSize ==0{return _bga .Copy (),nil ;
};_cfgc ,_dbd :=_bga .addBorderGeneral (borderSize ,borderSize ,borderSize ,borderSize ,val );if _dbd !=nil {return nil ,_ab .Wrap (_dbd ,"\u0041d\u0064\u0042\u006f\u0072\u0064\u0065r","");};return _cfgc ,nil ;};func _gdbd (_bgdc ,_gdba *Bitmap ,_gead *Selection )(*Bitmap ,error ){const _gedd ="c\u006c\u006f\u0073\u0065\u0042\u0069\u0074\u006d\u0061\u0070";
var _cbeb error ;if _bgdc ,_cbeb =_bded (_bgdc ,_gdba ,_gead );_cbeb !=nil {return nil ,_cbeb ;};_cgab ,_cbeb :=_bdefe (nil ,_gdba ,_gead );if _cbeb !=nil {return nil ,_ab .Wrap (_cbeb ,_gedd ,"");};if _ ,_cbeb =_aeee (_bgdc ,_cgab ,_gead );_cbeb !=nil {return nil ,_ab .Wrap (_cbeb ,_gedd ,"");
};return _bgdc ,nil ;};func TstGetScaledSymbol (t *_f .T ,sm *Bitmap ,scale ...int )*Bitmap {if len (scale )==0{return sm ;};if scale [0]==1{return sm ;};_aefff ,_aabbc :=MorphSequence (sm ,MorphProcess {Operation :MopReplicativeBinaryExpansion ,Arguments :scale });
_e .NoError (t ,_aabbc );return _aefff ;};func (_ddb *Bitmap )setEightPartlyBytes (_egc ,_acgg int ,_fedd uint64 )(_bfbg error ){var (_acec byte ;_bcfc int ;);const _egaa ="\u0073\u0065\u0074\u0045ig\u0068\u0074\u0050\u0061\u0072\u0074\u006c\u0079\u0042\u0079\u0074\u0065\u0073";
for _cfc :=1;_cfc <=_acgg ;_cfc ++{_bcfc =64-_cfc *8;_acec =byte (_fedd >>uint (_bcfc )&0xff);_g .Log .Trace ("\u0074\u0065\u006d\u0070\u003a\u0020\u0025\u0030\u0038\u0062\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a %\u0064,\u0020\u0069\u0064\u0078\u003a\u0020\u0025\u0064\u002c\u0020\u0066\u0075l\u006c\u0042\u0079\u0074\u0065\u0073\u004e\u0075\u006d\u0062\u0065\u0072\u003a\u0020\u0025\u0064\u002c \u0073\u0068\u0069\u0066\u0074\u003a\u0020\u0025\u0064",_acec ,_egc ,_egc +_cfc -1,_acgg ,_bcfc );
if _bfbg =_ddb .SetByte (_egc +_cfc -1,_acec );_bfbg !=nil {return _ab .Wrap (_bfbg ,_egaa ,"\u0066\u0075\u006c\u006c\u0042\u0079\u0074\u0065");};};_eded :=_ddb .RowStride *8-_ddb .Width ;if _eded ==0{return nil ;};_bcfc -=8;_acec =byte (_fedd >>uint (_bcfc )&0xff)<<uint (_eded );
if _bfbg =_ddb .SetByte (_egc +_acgg ,_acec );_bfbg !=nil {return _ab .Wrap (_bfbg ,_egaa ,"\u0070\u0061\u0064\u0064\u0065\u0064");};return nil ;};func (_cbbd *Points )AddPoint (x ,y float32 ){*_cbbd =append (*_cbbd ,Point {x ,y })};type BoundaryCondition int ;
type SizeComparison int ;func (_ffb *Bitmap )nextOnPixelLow (_fgg ,_dcf ,_agba ,_bcd ,_cfde int )(_aeb _ce .Point ,_ceg bool ,_ceec error ){const _eegf ="B\u0069\u0074\u006d\u0061p.\u006ee\u0078\u0074\u004f\u006e\u0050i\u0078\u0065\u006c\u004c\u006f\u0077";
var (_gef int ;_cab byte ;);_gcec :=_cfde *_agba ;_gcef :=_gcec +(_bcd /8);if _cab ,_ceec =_ffb .GetByte (_gcef );_ceec !=nil {return _aeb ,false ,_ab .Wrap (_ceec ,_eegf ,"\u0078\u0053\u0074\u0061\u0072\u0074\u0020\u0061\u006e\u0064 \u0079\u0053\u0074\u0061\u0072\u0074\u0020o\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065");
};if _cab !=0{_agda :=_bcd -(_bcd %8)+7;for _gef =_bcd ;_gef <=_agda &&_gef < _fgg ;_gef ++{if _ffb .GetPixel (_gef ,_cfde ){_aeb .X =_gef ;_aeb .Y =_cfde ;return _aeb ,true ,nil ;};};};_bcca :=(_bcd /8)+1;_gef =8*_bcca ;var _fdd int ;for _gcef =_gcec +_bcca ;
_gef < _fgg ;_gcef ,_gef =_gcef +1,_gef +8{if _cab ,_ceec =_ffb .GetByte (_gcef );_ceec !=nil {return _aeb ,false ,_ab .Wrap (_ceec ,_eegf ,"r\u0065\u0073\u0074\u0020of\u0020t\u0068\u0065\u0020\u006c\u0069n\u0065\u0020\u0062\u0079\u0074\u0065");};if _cab ==0{continue ;
};for _fdd =0;_fdd < 8&&_gef < _fgg ;_fdd ,_gef =_fdd +1,_gef +1{if _ffb .GetPixel (_gef ,_cfde ){_aeb .X =_gef ;_aeb .Y =_cfde ;return _aeb ,true ,nil ;};};};for _agg :=_cfde +1;_agg < _dcf ;_agg ++{_gcec =_agg *_agba ;for _gcef ,_gef =_gcec ,0;_gef < _fgg ;
_gcef ,_gef =_gcef +1,_gef +8{if _cab ,_ceec =_ffb .GetByte (_gcef );_ceec !=nil {return _aeb ,false ,_ab .Wrap (_ceec ,_eegf ,"\u0066o\u006cl\u006f\u0077\u0069\u006e\u0067\u0020\u006c\u0069\u006e\u0065\u0073");};if _cab ==0{continue ;};for _fdd =0;_fdd < 8&&_gef < _fgg ;
_fdd ,_gef =_fdd +1,_gef +1{if _ffb .GetPixel (_gef ,_agg ){_aeb .X =_gef ;_aeb .Y =_agg ;return _aeb ,true ,nil ;};};};};return _aeb ,false ,nil ;};func TstAddSymbol (t *_f .T ,bms *Bitmaps ,sym *Bitmap ,x *int ,y int ,space int ){bms .AddBitmap (sym );
_bgeed :=_ce .Rect (*x ,y ,*x +sym .Width ,y +sym .Height );bms .AddBox (&_bgeed );*x +=sym .Width +space ;};func (_cba *Bitmap )setPadBits (_gab int ){_gcaa :=8-_cba .Width %8;if _gcaa ==8{return ;};_gae :=_cba .Width /8;_dadbc :=_aaecc [_gcaa ];if _gab ==0{_dadbc ^=_dadbc ;
};var _fdfe int ;for _daab :=0;_daab < _cba .Height ;_daab ++{_fdfe =_daab *_cba .RowStride +_gae ;if _gab ==0{_cba .Data [_fdfe ]&=_dadbc ;}else {_cba .Data [_fdfe ]|=_dadbc ;};};};type SelectionValue int ;var (_cbd *Bitmap ;_cbda *Bitmap ;);func (_dcce *ClassedPoints )YAtIndex (i int )float32 {return (*_dcce .Points )[_dcce .IntSlice [i ]].Y };
type Getter interface{GetBitmap ()*Bitmap ;};func _becb (_eece ,_fdebc byte ,_gefd CombinationOperator )byte {switch _gefd {case CmbOpOr :return _fdebc |_eece ;case CmbOpAnd :return _fdebc &_eece ;case CmbOpXor :return _fdebc ^_eece ;case CmbOpXNor :return ^(_fdebc ^_eece );
case CmbOpNot :return ^(_fdebc );default:return _fdebc ;};};func _gfc (_aee ,_bge *Bitmap ,_agb int ,_faa []byte ,_efa int )(_ddd error ){const _fcd ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0034";
var (_dge ,_bad ,_edd ,_cgdf ,_fbce ,_gca ,_ccg ,_deagb int ;_cfe ,_dca uint32 ;_dbc ,_gfcg byte ;_fda uint16 ;);_fea :=make ([]byte ,4);_bab :=make ([]byte ,4);for _edd =0;_edd < _aee .Height -1;_edd ,_cgdf =_edd +2,_cgdf +1{_dge =_edd *_aee .RowStride ;
_bad =_cgdf *_bge .RowStride ;for _fbce ,_gca =0,0;_fbce < _efa ;_fbce ,_gca =_fbce +4,_gca +1{for _ccg =0;_ccg < 4;_ccg ++{_deagb =_dge +_fbce +_ccg ;if _deagb <=len (_aee .Data )-1&&_deagb < _dge +_aee .RowStride {_fea [_ccg ]=_aee .Data [_deagb ];}else {_fea [_ccg ]=0x00;
};_deagb =_dge +_aee .RowStride +_fbce +_ccg ;if _deagb <=len (_aee .Data )-1&&_deagb < _dge +(2*_aee .RowStride ){_bab [_ccg ]=_aee .Data [_deagb ];}else {_bab [_ccg ]=0x00;};};_cfe =_eb .BigEndian .Uint32 (_fea );_dca =_eb .BigEndian .Uint32 (_bab );
_dca &=_cfe ;_dca &=_dca <<1;_dca &=0xaaaaaaaa;_cfe =_dca |(_dca <<7);_dbc =byte (_cfe >>24);_gfcg =byte ((_cfe >>8)&0xff);_deagb =_bad +_gca ;if _deagb +1==len (_bge .Data )-1||_deagb +1>=_bad +_bge .RowStride {_bge .Data [_deagb ]=_faa [_dbc ];if _ddd =_bge .SetByte (_deagb ,_faa [_dbc ]);
_ddd !=nil {return _ab .Wrapf (_ddd ,_fcd ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_deagb );};}else {_fda =(uint16 (_faa [_dbc ])<<8)|uint16 (_faa [_gfcg ]);if _ddd =_bge .setTwoBytes (_deagb ,_fda );_ddd !=nil {return _ab .Wrapf (_ddd ,_fcd ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_deagb );
};_gca ++;};};};return nil ;};func (_ccea *byWidth )Len ()int {return len (_ccea .Values )};func TstImageBitmapInverseData ()[]byte {_bggaa :=_cbda .Copy ();_bggaa .InverseData ();return _bggaa .Data ;};func _aefg (_fdca int )int {if _fdca < 0{return -_fdca ;
};return _fdca ;};var _ddae =[5]int {1,2,3,0,4};func _dcacg (_egaec ,_adfg *Bitmap ,_fcab ,_dfce int )(*Bitmap ,error ){const _abbg ="\u0065\u0072\u006f\u0064\u0065\u0042\u0072\u0069\u0063\u006b";if _adfg ==nil {return nil ,_ab .Error (_abbg ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _fcab < 1||_dfce < 1{return nil ,_ab .Error (_abbg ,"\u0068\u0073\u0069\u007a\u0065\u0020\u0061\u006e\u0064\u0020\u0076\u0073\u0069\u007a\u0065\u0020\u0061\u0072e\u0020\u006e\u006f\u0074\u0020\u0067\u0072e\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u006fr\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0031");
};if _fcab ==1&&_dfce ==1{_dfee ,_cefe :=_egec (_egaec ,_adfg );if _cefe !=nil {return nil ,_ab .Wrap (_cefe ,_abbg ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u0026\u0026 \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _dfee ,nil ;};if _fcab ==1||_dfce ==1{_bccg :=SelCreateBrick (_dfce ,_fcab ,_dfce /2,_fcab /2,SelHit );_fabbf ,_eegfc :=_aeee (_egaec ,_adfg ,_bccg );if _eegfc !=nil {return nil ,_ab .Wrap (_eegfc ,_abbg ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _fabbf ,nil ;};_cegb :=SelCreateBrick (1,_fcab ,0,_fcab /2,SelHit );_fdeg :=SelCreateBrick (_dfce ,1,_dfce /2,0,SelHit );_fccg ,_cbbaf :=_aeee (nil ,_adfg ,_cegb );if _cbbaf !=nil {return nil ,_ab .Wrap (_cbbaf ,_abbg ,"\u0031s\u0074\u0020\u0065\u0072\u006f\u0064e");
};_egaec ,_cbbaf =_aeee (_egaec ,_fccg ,_fdeg );if _cbbaf !=nil {return nil ,_ab .Wrap (_cbbaf ,_abbg ,"\u0032n\u0064\u0020\u0065\u0072\u006f\u0064e");};return _egaec ,nil ;};func TstNSymbol (t *_f .T ,scale ...int )*Bitmap {_baga ,_cdagb :=NewWithData (4,5,[]byte {0x90,0xD0,0xB0,0x90,0x90});
_e .NoError (t ,_cdagb );return TstGetScaledSymbol (t ,_baga ,scale ...);};func ClipBoxToRectangle (box *_ce .Rectangle ,wi ,hi int )(_eddd *_ce .Rectangle ,_fagf error ){const _ebeaf ="\u0043l\u0069p\u0042\u006f\u0078\u0054\u006fR\u0065\u0063t\u0061\u006e\u0067\u006c\u0065";
if box ==nil {return nil ,_ab .Error (_ebeaf ,"\u0027\u0062\u006f\u0078\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");};if box .Min .X >=wi ||box .Min .Y >=hi ||box .Max .X <=0||box .Max .Y <=0{return nil ,_ab .Error (_ebeaf ,"\u0027\u0062\u006fx'\u0020\u006f\u0075\u0074\u0073\u0069\u0064\u0065\u0020\u0072\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065");
};_dbea :=*box ;_eddd =&_dbea ;if _eddd .Min .X < 0{_eddd .Max .X +=_eddd .Min .X ;_eddd .Min .X =0;};if _eddd .Min .Y < 0{_eddd .Max .Y +=_eddd .Min .Y ;_eddd .Min .Y =0;};if _eddd .Max .X > wi {_eddd .Max .X =wi ;};if _eddd .Max .Y > hi {_eddd .Max .Y =hi ;
};return _eddd ,nil ;};func _abf (_cefg ,_bgfd *Bitmap ,_addc ,_dead ,_ebcd ,_abbc ,_cegd ,_decf ,_aceb ,_gbbg int ,_cada CombinationOperator ,_eec int )error {var _eeaf int ;_edda :=func (){_eeaf ++;_ebcd +=_bgfd .RowStride ;_abbc +=_cefg .RowStride ;
_cegd +=_cefg .RowStride };for _eeaf =_addc ;_eeaf < _dead ;_edda (){var _ceb uint16 ;_eedf :=_ebcd ;for _gddb :=_abbc ;_gddb <=_cegd ;_gddb ++{_ecec ,_cgbd :=_bgfd .GetByte (_eedf );if _cgbd !=nil {return _cgbd ;};_dafc ,_cgbd :=_cefg .GetByte (_gddb );
if _cgbd !=nil {return _cgbd ;};_ceb =(_ceb |(uint16 (_dafc )&0xff))<<uint (_gbbg );_dafc =byte (_ceb >>8);if _cgbd =_bgfd .SetByte (_eedf ,_becb (_ecec ,_dafc ,_cada ));_cgbd !=nil {return _cgbd ;};_eedf ++;_ceb <<=uint (_aceb );if _gddb ==_cegd {_dafc =byte (_ceb >>(8-uint8 (_gbbg )));
if _eec !=0{_dafc =_cgga (uint (8+_decf ),_dafc );};_ecec ,_cgbd =_bgfd .GetByte (_eedf );if _cgbd !=nil {return _cgbd ;};if _cgbd =_bgfd .SetByte (_eedf ,_becb (_ecec ,_dafc ,_cada ));_cgbd !=nil {return _cgbd ;};};};};return nil ;};func (_ggace *Bitmaps )SortByWidth (){_bdda :=(*byWidth )(_ggace );
_cd .Sort (_bdda )};func TstISymbol (t *_f .T ,scale ...int )*Bitmap {_bfce ,_dcbgd :=NewWithData (1,5,[]byte {0x80,0x80,0x80,0x80,0x80});_e .NoError (t ,_dcbgd );return TstGetScaledSymbol (t ,_bfce ,scale ...);};func Dilate (d *Bitmap ,s *Bitmap ,sel *Selection )(*Bitmap ,error ){return _bdefe (d ,s ,sel )};
func (_ccbc *Bitmaps )GroupByWidth ()(*BitmapsArray ,error ){const _bdga ="\u0047\u0072\u006fu\u0070\u0042\u0079\u0057\u0069\u0064\u0074\u0068";if len (_ccbc .Values )==0{return nil ,_ab .Error (_bdga ,"\u006eo\u0020v\u0061\u006c\u0075\u0065\u0073 \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");
};_dcbaag :=&BitmapsArray {};_ccbc .SortByWidth ();_ccbca :=-1;_gdad :=-1;for _gdab :=0;_gdab < len (_ccbc .Values );_gdab ++{_faaff :=_ccbc .Values [_gdab ].Width ;if _faaff > _ccbca {_ccbca =_faaff ;_gdad ++;_dcbaag .Values =append (_dcbaag .Values ,&Bitmaps {});
};_dcbaag .Values [_gdad ].AddBitmap (_ccbc .Values [_gdab ]);};return _dcbaag ,nil ;};func TstCSymbol (t *_f .T )*Bitmap {t .Helper ();_acad :=New (6,6);_e .NoError (t ,_acad .SetPixel (1,0,1));_e .NoError (t ,_acad .SetPixel (2,0,1));_e .NoError (t ,_acad .SetPixel (3,0,1));
_e .NoError (t ,_acad .SetPixel (4,0,1));_e .NoError (t ,_acad .SetPixel (0,1,1));_e .NoError (t ,_acad .SetPixel (5,1,1));_e .NoError (t ,_acad .SetPixel (0,2,1));_e .NoError (t ,_acad .SetPixel (0,3,1));_e .NoError (t ,_acad .SetPixel (0,4,1));_e .NoError (t ,_acad .SetPixel (5,4,1));
_e .NoError (t ,_acad .SetPixel (1,5,1));_e .NoError (t ,_acad .SetPixel (2,5,1));_e .NoError (t ,_acad .SetPixel (3,5,1));_e .NoError (t ,_acad .SetPixel (4,5,1));return _acad ;};func (_gbccf *Bitmaps )CountPixels ()*_d .NumSlice {_afade :=&_d .NumSlice {};
for _ ,_ggfc :=range _gbccf .Values {_afade .AddInt (_ggfc .CountPixels ());};return _afade ;};func (_fgec *Bitmap )GetByteIndex (x ,y int )int {return y *_fgec .RowStride +(x >>3)};func (_fgb *Bitmap )SetPadBits (value int ){_fgb .setPadBits (value )};
func (_defd *Bitmaps )GetBox (i int )(*_ce .Rectangle ,error ){const _dcbag ="\u0047\u0065\u0074\u0042\u006f\u0078";if _defd ==nil {return nil ,_ab .Error (_dcbag ,"\u0070\u0072\u006f\u0076id\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074\u006d\u0061\u0070s\u0027");
};if i > len (_defd .Boxes )-1{return nil ,_ab .Errorf (_dcbag ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _defd .Boxes [i ],nil ;};func (_bfg *Bitmap )setBit (_fdcb int ){_bfg .Data [(_fdcb >>3)]|=0x80>>uint (_fdcb &7)};
func (_aaed *Bitmaps )SelectByIndexes (idx []int )(*Bitmaps ,error ){const _eecc ="B\u0069\u0074\u006d\u0061\u0070\u0073.\u0053\u006f\u0072\u0074\u0049\u006e\u0064\u0065\u0078e\u0073\u0042\u0079H\u0065i\u0067\u0068\u0074";_dgba ,_bdae :=_aaed .selectByIndexes (idx );
if _bdae !=nil {return nil ,_ab .Wrap (_bdae ,_eecc ,"");};return _dgba ,nil ;};func _ag (_cc ,_db *Bitmap )(_cf error ){const _be ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0032";_ee :=_db .RowStride ;
_ebd :=_cc .RowStride ;var (_dc byte ;_bc uint16 ;_ad ,_af ,_cef ,_da ,_aa int ;);for _cef =0;_cef < _db .Height ;_cef ++{_ad =_cef *_ee ;_af =2*_cef *_ebd ;for _da =0;_da < _ee ;_da ++{_dc =_db .Data [_ad +_da ];_bc =_dgaag [_dc ];_aa =_af +_da *2;if _cc .RowStride !=_db .RowStride *2&&(_da +1)*2> _cc .RowStride {_cf =_cc .SetByte (_aa ,byte (_bc >>8));
}else {_cf =_cc .setTwoBytes (_aa ,_bc );};if _cf !=nil {return _ab .Wrap (_cf ,_be ,"");};};for _da =0;_da < _ebd ;_da ++{_aa =_af +_ebd +_da ;_dc =_cc .Data [_af +_da ];if _cf =_cc .SetByte (_aa ,_dc );_cf !=nil {return _ab .Wrapf (_cf ,_be ,"c\u006f\u0070\u0079\u0020\u0064\u006fu\u0062\u006c\u0065\u0064\u0020\u006ci\u006e\u0065\u003a\u0020\u0027\u0025\u0064'\u002c\u0020\u0042\u0079\u0074\u0065\u003a\u0020\u0027\u0025d\u0027",_af +_da ,_af +_ebd +_da );
};};};return nil ;};func (_cacc *Bitmap )GetBitOffset (x int )int {return x &0x07};func (_bbcf *Bitmap )SetByte (index int ,v byte )error {if index > len (_bbcf .Data )-1||index < 0{return _ab .Errorf ("\u0053e\u0074\u0042\u0079\u0074\u0065","\u0069\u006e\u0064\u0065x \u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u003a\u0020%\u0064",index );
};_bbcf .Data [index ]=v ;return nil ;};type RasterOperator int ;func (_edf *Bitmap )CountPixels ()int {return _edf .countPixels ()};func TstWriteSymbols (t *_f .T ,bms *Bitmaps ,src *Bitmap ){for _fefd :=0;_fefd < bms .Size ();_fefd ++{_dfbbc :=bms .Values [_fefd ];
_eedb :=bms .Boxes [_fefd ];_gbeac :=src .RasterOperation (_eedb .Min .X ,_eedb .Min .Y ,_dfbbc .Width ,_dfbbc .Height ,PixSrc ,_dfbbc ,0,0);_e .NoError (t ,_gbeac );};};func (_adee *Bitmap )RasterOperation (dx ,dy ,dw ,dh int ,op RasterOperator ,src *Bitmap ,sx ,sy int )error {return _debgc (_adee ,dx ,dy ,dw ,dh ,op ,src ,sx ,sy );
};func (_geaf *Bitmap )SetPixel (x ,y int ,pixel byte )error {_fcba :=_geaf .GetByteIndex (x ,y );if _fcba > len (_geaf .Data )-1{return _ab .Errorf ("\u0053\u0065\u0074\u0050\u0069\u0078\u0065\u006c","\u0069\u006e\u0064\u0065x \u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065\u003a\u0020%\u0064",_fcba );
};_fcfc :=_geaf .GetBitOffset (x );_eee :=uint (7-_fcfc );_eag :=_geaf .Data [_fcba ];var _adf byte ;if pixel ==1{_adf =_eag |(pixel &0x01<<_eee );}else {_adf =_eag &^(1<<_eee );};_geaf .Data [_fcba ]=_adf ;return nil ;};func (_cggg *Boxes )SelectBySize (width ,height int ,tp LocationFilter ,relation SizeComparison )(_fddc *Boxes ,_abga error ){const _cdcc ="\u0042o\u0078e\u0073\u002e\u0053\u0065\u006ce\u0063\u0074B\u0079\u0053\u0069\u007a\u0065";
if _cggg ==nil {return nil ,_ab .Error (_cdcc ,"b\u006f\u0078\u0065\u0073 '\u0062'\u0020\u006e\u006f\u0074\u0020d\u0065\u0066\u0069\u006e\u0065\u0064");};if len (*_cggg )==0{return _cggg ,nil ;};switch tp {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_ab .Errorf (_cdcc ,"\u0069\u006e\u0076al\u0069\u0064\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",tp );
};switch relation {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE :default:return nil ,_ab .Errorf (_cdcc ,"i\u006e\u0076\u0061\u006c\u0069\u0064 \u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0020t\u0079\u0070\u0065:\u0020'\u0025\u0064\u0027",tp );
};_adfc :=_cggg .makeSizeIndicator (width ,height ,tp ,relation );_edgd ,_abga :=_cggg .selectWithIndicator (_adfc );if _abga !=nil {return nil ,_ab .Wrap (_abga ,_cdcc ,"");};return _edgd ,nil ;};func MorphSequence (src *Bitmap ,sequence ...MorphProcess )(*Bitmap ,error ){return _eccd (src ,sequence ...);
};func (_deb *Bitmap )SizesEqual (s *Bitmap )bool {if _deb ==s {return true ;};if _deb .Width !=s .Width ||_deb .Height !=s .Height {return false ;};return true ;};func _efd (_deag ,_cge *Bitmap ,_edg int ,_gcg []byte ,_faf int )(_bf error ){const _gfb ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0033";
var (_ccf ,_baf ,_eed ,_ccb ,_fga ,_agce ,_geg ,_fcb int ;_fbc ,_eca ,_gea ,_cefb uint32 ;_gad ,_fgd byte ;_ccfb uint16 ;);_ced :=make ([]byte ,4);_bgcb :=make ([]byte ,4);for _eed =0;_eed < _deag .Height -1;_eed ,_ccb =_eed +2,_ccb +1{_ccf =_eed *_deag .RowStride ;
_baf =_ccb *_cge .RowStride ;for _fga ,_agce =0,0;_fga < _faf ;_fga ,_agce =_fga +4,_agce +1{for _geg =0;_geg < 4;_geg ++{_fcb =_ccf +_fga +_geg ;if _fcb <=len (_deag .Data )-1&&_fcb < _ccf +_deag .RowStride {_ced [_geg ]=_deag .Data [_fcb ];}else {_ced [_geg ]=0x00;
};_fcb =_ccf +_deag .RowStride +_fga +_geg ;if _fcb <=len (_deag .Data )-1&&_fcb < _ccf +(2*_deag .RowStride ){_bgcb [_geg ]=_deag .Data [_fcb ];}else {_bgcb [_geg ]=0x00;};};_fbc =_eb .BigEndian .Uint32 (_ced );_eca =_eb .BigEndian .Uint32 (_bgcb );_gea =_fbc &_eca ;
_gea |=_gea <<1;_cefb =_fbc |_eca ;_cefb &=_cefb <<1;_eca =_gea &_cefb ;_eca &=0xaaaaaaaa;_fbc =_eca |(_eca <<7);_gad =byte (_fbc >>24);_fgd =byte ((_fbc >>8)&0xff);_fcb =_baf +_agce ;if _fcb +1==len (_cge .Data )-1||_fcb +1>=_baf +_cge .RowStride {if _bf =_cge .SetByte (_fcb ,_gcg [_gad ]);
_bf !=nil {return _ab .Wrapf (_bf ,_gfb ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_fcb );};}else {_ccfb =(uint16 (_gcg [_gad ])<<8)|uint16 (_gcg [_fgd ]);if _bf =_cge .setTwoBytes (_fcb ,_ccfb );_bf !=nil {return _ab .Wrapf (_bf ,_gfb ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_fcb );
};_agce ++;};};};return nil ;};func (_ffegg *byWidth )Swap (i ,j int ){_ffegg .Values [i ],_ffegg .Values [j ]=_ffegg .Values [j ],_ffegg .Values [i ];if _ffegg .Boxes !=nil {_ffegg .Boxes [i ],_ffegg .Boxes [j ]=_ffegg .Boxes [j ],_ffegg .Boxes [i ];};
};const (_ SizeSelection =iota ;SizeSelectByWidth ;SizeSelectByHeight ;SizeSelectByMaxDimension ;SizeSelectByArea ;SizeSelectByPerimeter ;);func TstWordBitmap (t *_f .T ,scale ...int )*Bitmap {_edgee :=1;if len (scale )> 0{_edgee =scale [0];};_dfcae :=3;
_aedfb :=9+7+15+2*_dfcae ;_efdce :=5+_dfcae +5;_ccaeb :=New (_aedfb *_edgee ,_efdce *_edgee );_gcggb :=&Bitmaps {};var _eada *int ;_dfcae *=_edgee ;_gbea :=0;_eada =&_gbea ;_cegae :=0;_aggg :=TstDSymbol (t ,scale ...);TstAddSymbol (t ,_gcggb ,_aggg ,_eada ,_cegae ,1*_edgee );
_aggg =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_gcggb ,_aggg ,_eada ,_cegae ,_dfcae );_aggg =TstISymbol (t ,scale ...);TstAddSymbol (t ,_gcggb ,_aggg ,_eada ,_cegae ,1*_edgee );_aggg =TstTSymbol (t ,scale ...);TstAddSymbol (t ,_gcggb ,_aggg ,_eada ,_cegae ,_dfcae );
_aggg =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_gcggb ,_aggg ,_eada ,_cegae ,1*_edgee );_aggg =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_gcggb ,_aggg ,_eada ,_cegae ,1*_edgee );_aggg =TstWSymbol (t ,scale ...);TstAddSymbol (t ,_gcggb ,_aggg ,_eada ,_cegae ,0);
*_eada =0;_cegae =5*_edgee +_dfcae ;_aggg =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_gcggb ,_aggg ,_eada ,_cegae ,1*_edgee );_aggg =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_gcggb ,_aggg ,_eada ,_cegae ,_dfcae );_aggg =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_gcggb ,_aggg ,_eada ,_cegae ,1*_edgee );
_aggg =TstESymbol (t ,scale ...);TstAddSymbol (t ,_gcggb ,_aggg ,_eada ,_cegae ,1*_edgee );_aggg =TstVSymbol (t ,scale ...);TstAddSymbol (t ,_gcggb ,_aggg ,_eada ,_cegae ,1*_edgee );_aggg =TstESymbol (t ,scale ...);TstAddSymbol (t ,_gcggb ,_aggg ,_eada ,_cegae ,1*_edgee );
_aggg =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_gcggb ,_aggg ,_eada ,_cegae ,0);TstWriteSymbols (t ,_gcggb ,_ccaeb );return _ccaeb ;};func TstImageBitmapData ()[]byte {return _cbda .Data };func _dadc (_fbeb ,_gde *Bitmap ,_cbf int ,_acg []byte ,_feb int )(_ggg error ){const _cae ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0031";
var (_gaa ,_egd ,_fbg ,_dcgcg ,_fff ,_bag ,_bcc ,_bde int ;_gdd ,_fdb uint32 ;_fge ,_bgc byte ;_aagb uint16 ;);_fde :=make ([]byte ,4);_aeg :=make ([]byte ,4);for _fbg =0;_fbg < _fbeb .Height -1;_fbg ,_dcgcg =_fbg +2,_dcgcg +1{_gaa =_fbg *_fbeb .RowStride ;
_egd =_dcgcg *_gde .RowStride ;for _fff ,_bag =0,0;_fff < _feb ;_fff ,_bag =_fff +4,_bag +1{for _bcc =0;_bcc < 4;_bcc ++{_bde =_gaa +_fff +_bcc ;if _bde <=len (_fbeb .Data )-1&&_bde < _gaa +_fbeb .RowStride {_fde [_bcc ]=_fbeb .Data [_bde ];}else {_fde [_bcc ]=0x00;
};_bde =_gaa +_fbeb .RowStride +_fff +_bcc ;if _bde <=len (_fbeb .Data )-1&&_bde < _gaa +(2*_fbeb .RowStride ){_aeg [_bcc ]=_fbeb .Data [_bde ];}else {_aeg [_bcc ]=0x00;};};_gdd =_eb .BigEndian .Uint32 (_fde );_fdb =_eb .BigEndian .Uint32 (_aeg );_fdb |=_gdd ;
_fdb |=_fdb <<1;_fdb &=0xaaaaaaaa;_gdd =_fdb |(_fdb <<7);_fge =byte (_gdd >>24);_bgc =byte ((_gdd >>8)&0xff);_bde =_egd +_bag ;if _bde +1==len (_gde .Data )-1||_bde +1>=_egd +_gde .RowStride {_gde .Data [_bde ]=_acg [_fge ];}else {_aagb =(uint16 (_acg [_fge ])<<8)|uint16 (_acg [_bgc ]);
if _ggg =_gde .setTwoBytes (_bde ,_aagb );_ggg !=nil {return _ab .Wrapf (_ggg ,_cae ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_bde );
};_bag ++;};};};return nil ;};func TstDSymbol (t *_f .T ,scale ...int )*Bitmap {_ddcc ,_ccgg :=NewWithData (4,5,[]byte {0xf0,0x90,0x90,0x90,0xE0});_e .NoError (t ,_ccgg );return TstGetScaledSymbol (t ,_ddcc ,scale ...);};func (_gbge Points )Size ()int {return len (_gbge )};
func (_eggc Points )Get (i int )(Point ,error ){if i > len (_eggc )-1{return Point {},_ab .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _eggc [i ],nil ;};func _fe (_ebf ,_eg *Bitmap )(_fb error ){const _ea ="\u0065\u0078\u0070\u0061nd\u0042\u0069\u006e\u0061\u0072\u0079\u0046\u0061\u0063\u0074\u006f\u0072\u0034";_ac :=_eg .RowStride ;_ca :=_ebf .RowStride ;_ebe :=_eg .RowStride *4-_ebf .RowStride ;
var (_gg ,_gc byte ;_cfg uint32 ;_dg ,_de ,_gf ,_dgg ,_egb ,_cfb ,_agc int ;);for _gf =0;_gf < _eg .Height ;_gf ++{_dg =_gf *_ac ;_de =4*_gf *_ca ;for _dgg =0;_dgg < _ac ;_dgg ++{_gg =_eg .Data [_dg +_dgg ];_cfg =_beedc [_gg ];_cfb =_de +_dgg *4;if _ebe !=0&&(_dgg +1)*4> _ebf .RowStride {for _egb =_ebe ;
_egb > 0;_egb --{_gc =byte ((_cfg >>uint (_egb *8))&0xff);_agc =_cfb +(_ebe -_egb );if _fb =_ebf .SetByte (_agc ,_gc );_fb !=nil {return _ab .Wrapf (_fb ,_ea ,"D\u0069\u0066\u0066\u0065\u0072\u0065n\u0074\u0020\u0072\u006f\u0077\u0073\u0074\u0072\u0069d\u0065\u0073\u002e \u004b:\u0020\u0025\u0064",_egb );
};};}else if _fb =_ebf .setFourBytes (_cfb ,_cfg );_fb !=nil {return _ab .Wrap (_fb ,_ea ,"");};if _fb =_ebf .setFourBytes (_de +_dgg *4,_beedc [_eg .Data [_dg +_dgg ]]);_fb !=nil {return _ab .Wrap (_fb ,_ea ,"");};};for _egb =1;_egb < 4;_egb ++{for _dgg =0;
_dgg < _ca ;_dgg ++{if _fb =_ebf .SetByte (_de +_egb *_ca +_dgg ,_ebf .Data [_de +_dgg ]);_fb !=nil {return _ab .Wrapf (_fb ,_ea ,"\u0063\u006f\u0070\u0079\u0020\u0027\u0071\u0075\u0061\u0064\u0072\u0061\u0062l\u0065\u0027\u0020\u006c\u0069\u006ee\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0062\u0079\u0074\u0065\u003a \u0027\u0025\u0064\u0027",_egb ,_dgg );
};};};};return nil ;};func (_dfga *ClassedPoints )xSortFunction ()func (_ccgeb int ,_ccfd int )bool {return func (_aebf ,_bacd int )bool {return _dfga .XAtIndex (_aebf )< _dfga .XAtIndex (_bacd )};};func _bded (_dbeg ,_dfbf *Bitmap ,_fcca *Selection )(*Bitmap ,error ){const _decfc ="\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u004d\u006f\u0072\u0070\u0068A\u0072\u0067\u0073\u0032";
var _cdf ,_aebga int ;if _dfbf ==nil {return nil ,_ab .Error (_decfc ,"s\u006fu\u0072\u0063\u0065\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");};if _fcca ==nil {return nil ,_ab .Error (_decfc ,"\u0073e\u006c \u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};_cdf =_fcca .Width ;_aebga =_fcca .Height ;if _cdf ==0||_aebga ==0{return nil ,_ab .Error (_decfc ,"\u0073\u0065\u006c\u0020\u006f\u0066\u0020\u0073\u0069\u007a\u0065\u0020\u0030");};if _dbeg ==nil {return _dfbf .createTemplate (),nil ;};if _egcg :=_dbeg .resizeImageData (_dfbf );
_egcg !=nil {return nil ,_egcg ;};return _dbeg ,nil ;};func _gcce (_cgba ,_aabd *Bitmap ,_cbcg ,_ccfba int )(_ffbc error ){const _cdba ="\u0073e\u0065d\u0066\u0069\u006c\u006c\u0042i\u006e\u0061r\u0079\u004c\u006f\u0077\u0034";var (_fgcd ,_bfef ,_gfge ,_gcbb int ;
_bdca ,_bgae ,_ebaf ,_bcegb ,_fbceb ,_ffag ,_cfaf byte ;);for _fgcd =0;_fgcd < _cbcg ;_fgcd ++{_gfge =_fgcd *_cgba .RowStride ;_gcbb =_fgcd *_aabd .RowStride ;for _bfef =0;_bfef < _ccfba ;_bfef ++{_bdca ,_ffbc =_cgba .GetByte (_gfge +_bfef );if _ffbc !=nil {return _ab .Wrap (_ffbc ,_cdba ,"\u0066i\u0072\u0073\u0074\u0020\u0067\u0065t");
};_bgae ,_ffbc =_aabd .GetByte (_gcbb +_bfef );if _ffbc !=nil {return _ab .Wrap (_ffbc ,_cdba ,"\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0067\u0065\u0074");};if _fgcd > 0{_ebaf ,_ffbc =_cgba .GetByte (_gfge -_cgba .RowStride +_bfef );if _ffbc !=nil {return _ab .Wrap (_ffbc ,_cdba ,"\u0069\u0020\u003e \u0030");
};_bdca |=_ebaf ;};if _bfef > 0{_bcegb ,_ffbc =_cgba .GetByte (_gfge +_bfef -1);if _ffbc !=nil {return _ab .Wrap (_ffbc ,_cdba ,"\u006a\u0020\u003e \u0030");};_bdca |=_bcegb <<7;};_bdca &=_bgae ;if _bdca ==0||(^_bdca )==0{if _ffbc =_cgba .SetByte (_gfge +_bfef ,_bdca );
_ffbc !=nil {return _ab .Wrap (_ffbc ,_cdba ,"b\u0074\u0020\u003d\u003d 0\u0020|\u007c\u0020\u0028\u005e\u0062t\u0029\u0020\u003d\u003d\u0020\u0030");};continue ;};for {_cfaf =_bdca ;_bdca =(_bdca |(_bdca >>1)|(_bdca <<1))&_bgae ;if (_bdca ^_cfaf )==0{if _ffbc =_cgba .SetByte (_gfge +_bfef ,_bdca );
_ffbc !=nil {return _ab .Wrap (_ffbc ,_cdba ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0070\u0072\u0065\u0076 \u0062\u0079\u0074\u0065");};break ;};};};};for _fgcd =_cbcg -1;_fgcd >=0;_fgcd --{_gfge =_fgcd *_cgba .RowStride ;_gcbb =_fgcd *_aabd .RowStride ;
for _bfef =_ccfba -1;_bfef >=0;_bfef --{if _bdca ,_ffbc =_cgba .GetByte (_gfge +_bfef );_ffbc !=nil {return _ab .Wrap (_ffbc ,_cdba ,"\u0072\u0065\u0076\u0065\u0072\u0073\u0065\u0020\u0066\u0069\u0072\u0073t\u0020\u0067\u0065\u0074");};if _bgae ,_ffbc =_aabd .GetByte (_gcbb +_bfef );
_ffbc !=nil {return _ab .Wrap (_ffbc ,_cdba ,"r\u0065\u0076\u0065\u0072se\u0020g\u0065\u0074\u0020\u006d\u0061s\u006b\u0020\u0062\u0079\u0074\u0065");};if _fgcd < _cbcg -1{if _fbceb ,_ffbc =_cgba .GetByte (_gfge +_cgba .RowStride +_bfef );_ffbc !=nil {return _ab .Wrap (_ffbc ,_cdba ,"\u0072\u0065v\u0065\u0072\u0073e\u0020\u0069\u0020\u003c\u0020\u0068\u0020\u002d\u0031");
};_bdca |=_fbceb ;};if _bfef < _ccfba -1{if _ffag ,_ffbc =_cgba .GetByte (_gfge +_bfef +1);_ffbc !=nil {return _ab .Wrap (_ffbc ,_cdba ,"\u0072\u0065\u0076\u0065rs\u0065\u0020\u006a\u0020\u003c\u0020\u0077\u0070\u006c\u0020\u002d\u0020\u0031");};_bdca |=_ffag >>7;
};_bdca &=_bgae ;if _bdca ==0||(^_bdca )==0{if _ffbc =_cgba .SetByte (_gfge +_bfef ,_bdca );_ffbc !=nil {return _ab .Wrap (_ffbc ,_cdba ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u006d\u0061\u0073k\u0065\u0064\u0020\u0062\u0079\u0074\u0065\u0020\u0066\u0061i\u006c\u0065\u0064");
};continue ;};for {_cfaf =_bdca ;_bdca =(_bdca |(_bdca >>1)|(_bdca <<1))&_bgae ;if (_bdca ^_cfaf )==0{if _ffbc =_cgba .SetByte (_gfge +_bfef ,_bdca );_ffbc !=nil {return _ab .Wrap (_ffbc ,_cdba ,"\u0072e\u0076\u0065\u0072\u0073e\u0020\u0073\u0065\u0074\u0074i\u006eg\u0020p\u0072\u0065\u0076\u0020\u0062\u0079\u0074e");
};break ;};};};};return nil ;};func _bega (_gdfe *Bitmap ,_edge ,_effg ,_dcfe ,_dbga int ,_cfgca RasterOperator ,_bcgb *Bitmap ,_acgf ,_dbcc int )error {var (_badeg bool ;_bebe bool ;_fcaba byte ;_debe int ;_aeca int ;_egce int ;_eae int ;_gffe bool ;_dggag int ;
_dde int ;_gagc int ;_effd bool ;_eecg byte ;_faca int ;_ccab int ;_aba int ;_gfcd byte ;_daae int ;_bcee int ;_aegd uint ;_bfgd uint ;_faaa byte ;_dacf shift ;_bbdbb bool ;_bgee bool ;_aegga ,_eebee int ;);if _acgf &7!=0{_bcee =8-(_acgf &7);};if _edge &7!=0{_aeca =8-(_edge &7);
};if _bcee ==0&&_aeca ==0{_faaa =_aaecc [0];}else {if _aeca > _bcee {_aegd =uint (_aeca -_bcee );}else {_aegd =uint (8-(_bcee -_aeca ));};_bfgd =8-_aegd ;_faaa =_aaecc [_aegd ];};if (_edge &7)!=0{_badeg =true ;_debe =8-(_edge &7);_fcaba =_aaecc [_debe ];
_egce =_gdfe .RowStride *_effg +(_edge >>3);_eae =_bcgb .RowStride *_dbcc +(_acgf >>3);_daae =8-(_acgf &7);if _debe > _daae {_dacf =_bdaba ;if _dcfe >=_bcee {_bbdbb =true ;};}else {_dacf =_ffeg ;};};if _dcfe < _debe {_bebe =true ;_fcaba &=_cgde [8-_debe +_dcfe ];
};if !_bebe {_dggag =(_dcfe -_debe )>>3;if _dggag !=0{_gffe =true ;_dde =_gdfe .RowStride *_effg +((_edge +_aeca )>>3);_gagc =_bcgb .RowStride *_dbcc +((_acgf +_aeca )>>3);};};_faca =(_edge +_dcfe )&7;if !(_bebe ||_faca ==0){_effd =true ;_eecg =_cgde [_faca ];
_ccab =_gdfe .RowStride *_effg +((_edge +_aeca )>>3)+_dggag ;_aba =_bcgb .RowStride *_dbcc +((_acgf +_aeca )>>3)+_dggag ;if _faca > int (_bfgd ){_bgee =true ;};};switch _cfgca {case PixSrc :if _badeg {for _aegga =0;_aegga < _dbga ;_aegga ++{if _dacf ==_bdaba {_gfcd =_bcgb .Data [_eae ]<<_aegd ;
if _bbdbb {_gfcd =_bbbfe (_gfcd ,_bcgb .Data [_eae +1]>>_bfgd ,_faaa );};}else {_gfcd =_bcgb .Data [_eae ]>>_bfgd ;};_gdfe .Data [_egce ]=_bbbfe (_gdfe .Data [_egce ],_gfcd ,_fcaba );_egce +=_gdfe .RowStride ;_eae +=_bcgb .RowStride ;};};if _gffe {for _aegga =0;
_aegga < _dbga ;_aegga ++{for _eebee =0;_eebee < _dggag ;_eebee ++{_gfcd =_bbbfe (_bcgb .Data [_gagc +_eebee ]<<_aegd ,_bcgb .Data [_gagc +_eebee +1]>>_bfgd ,_faaa );_gdfe .Data [_dde +_eebee ]=_gfcd ;};_dde +=_gdfe .RowStride ;_gagc +=_bcgb .RowStride ;
};};if _effd {for _aegga =0;_aegga < _dbga ;_aegga ++{_gfcd =_bcgb .Data [_aba ]<<_aegd ;if _bgee {_gfcd =_bbbfe (_gfcd ,_bcgb .Data [_aba +1]>>_bfgd ,_faaa );};_gdfe .Data [_ccab ]=_bbbfe (_gdfe .Data [_ccab ],_gfcd ,_eecg );_ccab +=_gdfe .RowStride ;
_aba +=_bcgb .RowStride ;};};case PixNotSrc :if _badeg {for _aegga =0;_aegga < _dbga ;_aegga ++{if _dacf ==_bdaba {_gfcd =_bcgb .Data [_eae ]<<_aegd ;if _bbdbb {_gfcd =_bbbfe (_gfcd ,_bcgb .Data [_eae +1]>>_bfgd ,_faaa );};}else {_gfcd =_bcgb .Data [_eae ]>>_bfgd ;
};_gdfe .Data [_egce ]=_bbbfe (_gdfe .Data [_egce ],^_gfcd ,_fcaba );_egce +=_gdfe .RowStride ;_eae +=_bcgb .RowStride ;};};if _gffe {for _aegga =0;_aegga < _dbga ;_aegga ++{for _eebee =0;_eebee < _dggag ;_eebee ++{_gfcd =_bbbfe (_bcgb .Data [_gagc +_eebee ]<<_aegd ,_bcgb .Data [_gagc +_eebee +1]>>_bfgd ,_faaa );
_gdfe .Data [_dde +_eebee ]=^_gfcd ;};_dde +=_gdfe .RowStride ;_gagc +=_bcgb .RowStride ;};};if _effd {for _aegga =0;_aegga < _dbga ;_aegga ++{_gfcd =_bcgb .Data [_aba ]<<_aegd ;if _bgee {_gfcd =_bbbfe (_gfcd ,_bcgb .Data [_aba +1]>>_bfgd ,_faaa );};_gdfe .Data [_ccab ]=_bbbfe (_gdfe .Data [_ccab ],^_gfcd ,_eecg );
_ccab +=_gdfe .RowStride ;_aba +=_bcgb .RowStride ;};};case PixSrcOrDst :if _badeg {for _aegga =0;_aegga < _dbga ;_aegga ++{if _dacf ==_bdaba {_gfcd =_bcgb .Data [_eae ]<<_aegd ;if _bbdbb {_gfcd =_bbbfe (_gfcd ,_bcgb .Data [_eae +1]>>_bfgd ,_faaa );};}else {_gfcd =_bcgb .Data [_eae ]>>_bfgd ;
};_gdfe .Data [_egce ]=_bbbfe (_gdfe .Data [_egce ],_gfcd |_gdfe .Data [_egce ],_fcaba );_egce +=_gdfe .RowStride ;_eae +=_bcgb .RowStride ;};};if _gffe {for _aegga =0;_aegga < _dbga ;_aegga ++{for _eebee =0;_eebee < _dggag ;_eebee ++{_gfcd =_bbbfe (_bcgb .Data [_gagc +_eebee ]<<_aegd ,_bcgb .Data [_gagc +_eebee +1]>>_bfgd ,_faaa );
_gdfe .Data [_dde +_eebee ]|=_gfcd ;};_dde +=_gdfe .RowStride ;_gagc +=_bcgb .RowStride ;};};if _effd {for _aegga =0;_aegga < _dbga ;_aegga ++{_gfcd =_bcgb .Data [_aba ]<<_aegd ;if _bgee {_gfcd =_bbbfe (_gfcd ,_bcgb .Data [_aba +1]>>_bfgd ,_faaa );};_gdfe .Data [_ccab ]=_bbbfe (_gdfe .Data [_ccab ],_gfcd |_gdfe .Data [_ccab ],_eecg );
_ccab +=_gdfe .RowStride ;_aba +=_bcgb .RowStride ;};};case PixSrcAndDst :if _badeg {for _aegga =0;_aegga < _dbga ;_aegga ++{if _dacf ==_bdaba {_gfcd =_bcgb .Data [_eae ]<<_aegd ;if _bbdbb {_gfcd =_bbbfe (_gfcd ,_bcgb .Data [_eae +1]>>_bfgd ,_faaa );};
}else {_gfcd =_bcgb .Data [_eae ]>>_bfgd ;};_gdfe .Data [_egce ]=_bbbfe (_gdfe .Data [_egce ],_gfcd &_gdfe .Data [_egce ],_fcaba );_egce +=_gdfe .RowStride ;_eae +=_bcgb .RowStride ;};};if _gffe {for _aegga =0;_aegga < _dbga ;_aegga ++{for _eebee =0;_eebee < _dggag ;
_eebee ++{_gfcd =_bbbfe (_bcgb .Data [_gagc +_eebee ]<<_aegd ,_bcgb .Data [_gagc +_eebee +1]>>_bfgd ,_faaa );_gdfe .Data [_dde +_eebee ]&=_gfcd ;};_dde +=_gdfe .RowStride ;_gagc +=_bcgb .RowStride ;};};if _effd {for _aegga =0;_aegga < _dbga ;_aegga ++{_gfcd =_bcgb .Data [_aba ]<<_aegd ;
if _bgee {_gfcd =_bbbfe (_gfcd ,_bcgb .Data [_aba +1]>>_bfgd ,_faaa );};_gdfe .Data [_ccab ]=_bbbfe (_gdfe .Data [_ccab ],_gfcd &_gdfe .Data [_ccab ],_eecg );_ccab +=_gdfe .RowStride ;_aba +=_bcgb .RowStride ;};};case PixSrcXorDst :if _badeg {for _aegga =0;
_aegga < _dbga ;_aegga ++{if _dacf ==_bdaba {_gfcd =_bcgb .Data [_eae ]<<_aegd ;if _bbdbb {_gfcd =_bbbfe (_gfcd ,_bcgb .Data [_eae +1]>>_bfgd ,_faaa );};}else {_gfcd =_bcgb .Data [_eae ]>>_bfgd ;};_gdfe .Data [_egce ]=_bbbfe (_gdfe .Data [_egce ],_gfcd ^_gdfe .Data [_egce ],_fcaba );
_egce +=_gdfe .RowStride ;_eae +=_bcgb .RowStride ;};};if _gffe {for _aegga =0;_aegga < _dbga ;_aegga ++{for _eebee =0;_eebee < _dggag ;_eebee ++{_gfcd =_bbbfe (_bcgb .Data [_gagc +_eebee ]<<_aegd ,_bcgb .Data [_gagc +_eebee +1]>>_bfgd ,_faaa );_gdfe .Data [_dde +_eebee ]^=_gfcd ;
};_dde +=_gdfe .RowStride ;_gagc +=_bcgb .RowStride ;};};if _effd {for _aegga =0;_aegga < _dbga ;_aegga ++{_gfcd =_bcgb .Data [_aba ]<<_aegd ;if _bgee {_gfcd =_bbbfe (_gfcd ,_bcgb .Data [_aba +1]>>_bfgd ,_faaa );};_gdfe .Data [_ccab ]=_bbbfe (_gdfe .Data [_ccab ],_gfcd ^_gdfe .Data [_ccab ],_eecg );
_ccab +=_gdfe .RowStride ;_aba +=_bcgb .RowStride ;};};case PixNotSrcOrDst :if _badeg {for _aegga =0;_aegga < _dbga ;_aegga ++{if _dacf ==_bdaba {_gfcd =_bcgb .Data [_eae ]<<_aegd ;if _bbdbb {_gfcd =_bbbfe (_gfcd ,_bcgb .Data [_eae +1]>>_bfgd ,_faaa );
};}else {_gfcd =_bcgb .Data [_eae ]>>_bfgd ;};_gdfe .Data [_egce ]=_bbbfe (_gdfe .Data [_egce ],^_gfcd |_gdfe .Data [_egce ],_fcaba );_egce +=_gdfe .RowStride ;_eae +=_bcgb .RowStride ;};};if _gffe {for _aegga =0;_aegga < _dbga ;_aegga ++{for _eebee =0;
_eebee < _dggag ;_eebee ++{_gfcd =_bbbfe (_bcgb .Data [_gagc +_eebee ]<<_aegd ,_bcgb .Data [_gagc +_eebee +1]>>_bfgd ,_faaa );_gdfe .Data [_dde +_eebee ]|=^_gfcd ;};_dde +=_gdfe .RowStride ;_gagc +=_bcgb .RowStride ;};};if _effd {for _aegga =0;_aegga < _dbga ;
_aegga ++{_gfcd =_bcgb .Data [_aba ]<<_aegd ;if _bgee {_gfcd =_bbbfe (_gfcd ,_bcgb .Data [_aba +1]>>_bfgd ,_faaa );};_gdfe .Data [_ccab ]=_bbbfe (_gdfe .Data [_ccab ],^_gfcd |_gdfe .Data [_ccab ],_eecg );_ccab +=_gdfe .RowStride ;_aba +=_bcgb .RowStride ;
};};case PixNotSrcAndDst :if _badeg {for _aegga =0;_aegga < _dbga ;_aegga ++{if _dacf ==_bdaba {_gfcd =_bcgb .Data [_eae ]<<_aegd ;if _bbdbb {_gfcd =_bbbfe (_gfcd ,_bcgb .Data [_eae +1]>>_bfgd ,_faaa );};}else {_gfcd =_bcgb .Data [_eae ]>>_bfgd ;};_gdfe .Data [_egce ]=_bbbfe (_gdfe .Data [_egce ],^_gfcd &_gdfe .Data [_egce ],_fcaba );
_egce +=_gdfe .RowStride ;_eae +=_bcgb .RowStride ;};};if _gffe {for _aegga =0;_aegga < _dbga ;_aegga ++{for _eebee =0;_eebee < _dggag ;_eebee ++{_gfcd =_bbbfe (_bcgb .Data [_gagc +_eebee ]<<_aegd ,_bcgb .Data [_gagc +_eebee +1]>>_bfgd ,_faaa );_gdfe .Data [_dde +_eebee ]&=^_gfcd ;
};_dde +=_gdfe .RowStride ;_gagc +=_bcgb .RowStride ;};};if _effd {for _aegga =0;_aegga < _dbga ;_aegga ++{_gfcd =_bcgb .Data [_aba ]<<_aegd ;if _bgee {_gfcd =_bbbfe (_gfcd ,_bcgb .Data [_aba +1]>>_bfgd ,_faaa );};_gdfe .Data [_ccab ]=_bbbfe (_gdfe .Data [_ccab ],^_gfcd &_gdfe .Data [_ccab ],_eecg );
_ccab +=_gdfe .RowStride ;_aba +=_bcgb .RowStride ;};};case PixSrcOrNotDst :if _badeg {for _aegga =0;_aegga < _dbga ;_aegga ++{if _dacf ==_bdaba {_gfcd =_bcgb .Data [_eae ]<<_aegd ;if _bbdbb {_gfcd =_bbbfe (_gfcd ,_bcgb .Data [_eae +1]>>_bfgd ,_faaa );
};}else {_gfcd =_bcgb .Data [_eae ]>>_bfgd ;};_gdfe .Data [_egce ]=_bbbfe (_gdfe .Data [_egce ],_gfcd |^_gdfe .Data [_egce ],_fcaba );_egce +=_gdfe .RowStride ;_eae +=_bcgb .RowStride ;};};if _gffe {for _aegga =0;_aegga < _dbga ;_aegga ++{for _eebee =0;
_eebee < _dggag ;_eebee ++{_gfcd =_bbbfe (_bcgb .Data [_gagc +_eebee ]<<_aegd ,_bcgb .Data [_gagc +_eebee +1]>>_bfgd ,_faaa );_gdfe .Data [_dde +_eebee ]=_gfcd |^_gdfe .Data [_dde +_eebee ];};_dde +=_gdfe .RowStride ;_gagc +=_bcgb .RowStride ;};};if _effd {for _aegga =0;
_aegga < _dbga ;_aegga ++{_gfcd =_bcgb .Data [_aba ]<<_aegd ;if _bgee {_gfcd =_bbbfe (_gfcd ,_bcgb .Data [_aba +1]>>_bfgd ,_faaa );};_gdfe .Data [_ccab ]=_bbbfe (_gdfe .Data [_ccab ],_gfcd |^_gdfe .Data [_ccab ],_eecg );_ccab +=_gdfe .RowStride ;_aba +=_bcgb .RowStride ;
};};case PixSrcAndNotDst :if _badeg {for _aegga =0;_aegga < _dbga ;_aegga ++{if _dacf ==_bdaba {_gfcd =_bcgb .Data [_eae ]<<_aegd ;if _bbdbb {_gfcd =_bbbfe (_gfcd ,_bcgb .Data [_eae +1]>>_bfgd ,_faaa );};}else {_gfcd =_bcgb .Data [_eae ]>>_bfgd ;};_gdfe .Data [_egce ]=_bbbfe (_gdfe .Data [_egce ],_gfcd &^_gdfe .Data [_egce ],_fcaba );
_egce +=_gdfe .RowStride ;_eae +=_bcgb .RowStride ;};};if _gffe {for _aegga =0;_aegga < _dbga ;_aegga ++{for _eebee =0;_eebee < _dggag ;_eebee ++{_gfcd =_bbbfe (_bcgb .Data [_gagc +_eebee ]<<_aegd ,_bcgb .Data [_gagc +_eebee +1]>>_bfgd ,_faaa );_gdfe .Data [_dde +_eebee ]=_gfcd &^_gdfe .Data [_dde +_eebee ];
};_dde +=_gdfe .RowStride ;_gagc +=_bcgb .RowStride ;};};if _effd {for _aegga =0;_aegga < _dbga ;_aegga ++{_gfcd =_bcgb .Data [_aba ]<<_aegd ;if _bgee {_gfcd =_bbbfe (_gfcd ,_bcgb .Data [_aba +1]>>_bfgd ,_faaa );};_gdfe .Data [_ccab ]=_bbbfe (_gdfe .Data [_ccab ],_gfcd &^_gdfe .Data [_ccab ],_eecg );
_ccab +=_gdfe .RowStride ;_aba +=_bcgb .RowStride ;};};case PixNotPixSrcOrDst :if _badeg {for _aegga =0;_aegga < _dbga ;_aegga ++{if _dacf ==_bdaba {_gfcd =_bcgb .Data [_eae ]<<_aegd ;if _bbdbb {_gfcd =_bbbfe (_gfcd ,_bcgb .Data [_eae +1]>>_bfgd ,_faaa );
};}else {_gfcd =_bcgb .Data [_eae ]>>_bfgd ;};_gdfe .Data [_egce ]=_bbbfe (_gdfe .Data [_egce ],^(_gfcd |_gdfe .Data [_egce ]),_fcaba );_egce +=_gdfe .RowStride ;_eae +=_bcgb .RowStride ;};};if _gffe {for _aegga =0;_aegga < _dbga ;_aegga ++{for _eebee =0;
_eebee < _dggag ;_eebee ++{_gfcd =_bbbfe (_bcgb .Data [_gagc +_eebee ]<<_aegd ,_bcgb .Data [_gagc +_eebee +1]>>_bfgd ,_faaa );_gdfe .Data [_dde +_eebee ]=^(_gfcd |_gdfe .Data [_dde +_eebee ]);};_dde +=_gdfe .RowStride ;_gagc +=_bcgb .RowStride ;};};if _effd {for _aegga =0;
_aegga < _dbga ;_aegga ++{_gfcd =_bcgb .Data [_aba ]<<_aegd ;if _bgee {_gfcd =_bbbfe (_gfcd ,_bcgb .Data [_aba +1]>>_bfgd ,_faaa );};_gdfe .Data [_ccab ]=_bbbfe (_gdfe .Data [_ccab ],^(_gfcd |_gdfe .Data [_ccab ]),_eecg );_ccab +=_gdfe .RowStride ;_aba +=_bcgb .RowStride ;
};};case PixNotPixSrcAndDst :if _badeg {for _aegga =0;_aegga < _dbga ;_aegga ++{if _dacf ==_bdaba {_gfcd =_bcgb .Data [_eae ]<<_aegd ;if _bbdbb {_gfcd =_bbbfe (_gfcd ,_bcgb .Data [_eae +1]>>_bfgd ,_faaa );};}else {_gfcd =_bcgb .Data [_eae ]>>_bfgd ;};_gdfe .Data [_egce ]=_bbbfe (_gdfe .Data [_egce ],^(_gfcd &_gdfe .Data [_egce ]),_fcaba );
_egce +=_gdfe .RowStride ;_eae +=_bcgb .RowStride ;};};if _gffe {for _aegga =0;_aegga < _dbga ;_aegga ++{for _eebee =0;_eebee < _dggag ;_eebee ++{_gfcd =_bbbfe (_bcgb .Data [_gagc +_eebee ]<<_aegd ,_bcgb .Data [_gagc +_eebee +1]>>_bfgd ,_faaa );_gdfe .Data [_dde +_eebee ]=^(_gfcd &_gdfe .Data [_dde +_eebee ]);
};_dde +=_gdfe .RowStride ;_gagc +=_bcgb .RowStride ;};};if _effd {for _aegga =0;_aegga < _dbga ;_aegga ++{_gfcd =_bcgb .Data [_aba ]<<_aegd ;if _bgee {_gfcd =_bbbfe (_gfcd ,_bcgb .Data [_aba +1]>>_bfgd ,_faaa );};_gdfe .Data [_ccab ]=_bbbfe (_gdfe .Data [_ccab ],^(_gfcd &_gdfe .Data [_ccab ]),_eecg );
_ccab +=_gdfe .RowStride ;_aba +=_bcgb .RowStride ;};};case PixNotPixSrcXorDst :if _badeg {for _aegga =0;_aegga < _dbga ;_aegga ++{if _dacf ==_bdaba {_gfcd =_bcgb .Data [_eae ]<<_aegd ;if _bbdbb {_gfcd =_bbbfe (_gfcd ,_bcgb .Data [_eae +1]>>_bfgd ,_faaa );
};}else {_gfcd =_bcgb .Data [_eae ]>>_bfgd ;};_gdfe .Data [_egce ]=_bbbfe (_gdfe .Data [_egce ],^(_gfcd ^_gdfe .Data [_egce ]),_fcaba );_egce +=_gdfe .RowStride ;_eae +=_bcgb .RowStride ;};};if _gffe {for _aegga =0;_aegga < _dbga ;_aegga ++{for _eebee =0;
_eebee < _dggag ;_eebee ++{_gfcd =_bbbfe (_bcgb .Data [_gagc +_eebee ]<<_aegd ,_bcgb .Data [_gagc +_eebee +1]>>_bfgd ,_faaa );_gdfe .Data [_dde +_eebee ]=^(_gfcd ^_gdfe .Data [_dde +_eebee ]);};_dde +=_gdfe .RowStride ;_gagc +=_bcgb .RowStride ;};};if _effd {for _aegga =0;
_aegga < _dbga ;_aegga ++{_gfcd =_bcgb .Data [_aba ]<<_aegd ;if _bgee {_gfcd =_bbbfe (_gfcd ,_bcgb .Data [_aba +1]>>_bfgd ,_faaa );};_gdfe .Data [_ccab ]=_bbbfe (_gdfe .Data [_ccab ],^(_gfcd ^_gdfe .Data [_ccab ]),_eecg );_ccab +=_gdfe .RowStride ;_aba +=_bcgb .RowStride ;
};};default:_g .Log .Debug ("\u004f\u0070e\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006e\u006f\u0074\u0020\u0070\u0065\u0072\u006d\u0069tt\u0065\u0064",_cfgca );return _ab .Error ("\u0072a\u0073t\u0065\u0072\u004f\u0070\u0047e\u006e\u0065r\u0061\u006c\u004c\u006f\u0077","\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065r\u0061\u0074\u0069\u006f\u006e\u0020\u006eo\u0074\u0020\u0070\u0065\u0072\u006d\u0069\u0074\u0074\u0065\u0064");
};return nil ;};func (_gfdd *Bitmap )GetVanillaData ()[]byte {if _gfdd .Color ==Chocolate {_gfdd .inverseData ();};return _gfdd .Data ;};type SizeSelection int ;var (_dgaag =_gfg ();_beedc =_ecg ();_bagd =_cad (););func (_gecc *Bitmap )setTwoBytes (_bagb int ,_cafe uint16 )error {if _bagb +1> len (_gecc .Data )-1{return _ab .Errorf ("s\u0065\u0074\u0054\u0077\u006f\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",_bagb );
};_gecc .Data [_bagb ]=byte ((_cafe &0xff00)>>8);_gecc .Data [_bagb +1]=byte (_cafe &0xff);return nil ;};func (_bdcb *Points )Add (pt *Points )error {const _cfba ="\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0041\u0064\u0064";if _bdcb ==nil {return _ab .Error (_cfba ,"\u0070o\u0069n\u0074\u0073\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if pt ==nil {return _ab .Error (_cfba ,"a\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0070\u006f\u0069\u006e\u0074\u0073\u0020\u006eo\u0074\u0020\u0064e\u0066i\u006e\u0065\u0064");};*_bdcb =append (*_bdcb ,*pt ...);return nil ;};func TstASymbol (t *_f .T )*Bitmap {t .Helper ();
_ebce :=New (6,6);_e .NoError (t ,_ebce .SetPixel (1,0,1));_e .NoError (t ,_ebce .SetPixel (2,0,1));_e .NoError (t ,_ebce .SetPixel (3,0,1));_e .NoError (t ,_ebce .SetPixel (4,0,1));_e .NoError (t ,_ebce .SetPixel (5,1,1));_e .NoError (t ,_ebce .SetPixel (1,2,1));
_e .NoError (t ,_ebce .SetPixel (2,2,1));_e .NoError (t ,_ebce .SetPixel (3,2,1));_e .NoError (t ,_ebce .SetPixel (4,2,1));_e .NoError (t ,_ebce .SetPixel (5,2,1));_e .NoError (t ,_ebce .SetPixel (0,3,1));_e .NoError (t ,_ebce .SetPixel (5,3,1));_e .NoError (t ,_ebce .SetPixel (0,4,1));
_e .NoError (t ,_ebce .SetPixel (5,4,1));_e .NoError (t ,_ebce .SetPixel (1,5,1));_e .NoError (t ,_ebce .SetPixel (2,5,1));_e .NoError (t ,_ebce .SetPixel (3,5,1));_e .NoError (t ,_ebce .SetPixel (4,5,1));_e .NoError (t ,_ebce .SetPixel (5,5,1));return _ebce ;
};func _gacca (_aefc *Bitmap ,_fddcf *_d .Stack ,_fcde ,_afe int )(_fbba *_ce .Rectangle ,_dcfa error ){const _eabbc ="\u0073e\u0065d\u0046\u0069\u006c\u006c\u0053\u0074\u0061\u0063\u006b\u0042\u0042";if _aefc ==nil {return nil ,_ab .Error (_eabbc ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0027\u0073\u0027\u0020\u0042\u0069\u0074\u006d\u0061\u0070");
};if _fddcf ==nil {return nil ,_ab .Error (_eabbc ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0027\u0073\u0074ac\u006b\u0027");};_eafc ,_gbdb :=_aefc .Width ,_aefc .Height ;_dfdc :=_eafc -1;_dbbce :=_gbdb -1;if _fcde < 0||_fcde > _dfdc ||_afe < 0||_afe > _dbbce ||!_aefc .GetPixel (_fcde ,_afe ){return nil ,nil ;
};var _cfed *_ce .Rectangle ;_cfed ,_dcfa =Rect (100000,100000,0,0);if _dcfa !=nil {return nil ,_ab .Wrap (_dcfa ,_eabbc ,"");};if _dcfa =_defg (_fddcf ,_fcde ,_fcde ,_afe ,1,_dbbce ,_cfed );_dcfa !=nil {return nil ,_ab .Wrap (_dcfa ,_eabbc ,"\u0069\u006e\u0069t\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");
};if _dcfa =_defg (_fddcf ,_fcde ,_fcde ,_afe +1,-1,_dbbce ,_cfed );_dcfa !=nil {return nil ,_ab .Wrap (_dcfa ,_eabbc ,"\u0032\u006ed\u0020\u0069\u006ei\u0074\u0069\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};_cfed .Min .X ,_cfed .Max .X =_fcde ,_fcde ;
_cfed .Min .Y ,_cfed .Max .Y =_afe ,_afe ;var (_gbfad *fillSegment ;_edag int ;);for _fddcf .Len ()> 0{if _gbfad ,_dcfa =_ggba (_fddcf );_dcfa !=nil {return nil ,_ab .Wrap (_dcfa ,_eabbc ,"");};_afe =_gbfad ._adad ;for _fcde =_gbfad ._dgeaf ;_fcde >=0&&_aefc .GetPixel (_fcde ,_afe );
_fcde --{if _dcfa =_aefc .SetPixel (_fcde ,_afe ,0);_dcfa !=nil {return nil ,_ab .Wrap (_dcfa ,_eabbc ,"");};};if _fcde >=_gbfad ._dgeaf {for _fcde ++;_fcde <=_gbfad ._fccd &&_fcde <=_dfdc &&!_aefc .GetPixel (_fcde ,_afe );_fcde ++{};_edag =_fcde ;if !(_fcde <=_gbfad ._fccd &&_fcde <=_dfdc ){continue ;
};}else {_edag =_fcde +1;if _edag < _gbfad ._dgeaf -1{if _dcfa =_defg (_fddcf ,_edag ,_gbfad ._dgeaf -1,_gbfad ._adad ,-_gbfad ._egcgb ,_dbbce ,_cfed );_dcfa !=nil {return nil ,_ab .Wrap (_dcfa ,_eabbc ,"\u006c\u0065\u0061\u006b\u0020\u006f\u006e\u0020\u006c\u0065\u0066\u0074 \u0073\u0069\u0064\u0065");
};};_fcde =_gbfad ._dgeaf +1;};for {for ;_fcde <=_dfdc &&_aefc .GetPixel (_fcde ,_afe );_fcde ++{if _dcfa =_aefc .SetPixel (_fcde ,_afe ,0);_dcfa !=nil {return nil ,_ab .Wrap (_dcfa ,_eabbc ,"\u0032n\u0064\u0020\u0073\u0065\u0074");};};if _dcfa =_defg (_fddcf ,_edag ,_fcde -1,_gbfad ._adad ,_gbfad ._egcgb ,_dbbce ,_cfed );
_dcfa !=nil {return nil ,_ab .Wrap (_dcfa ,_eabbc ,"n\u006f\u0072\u006d\u0061\u006c\u0020\u0070\u0075\u0073\u0068");};if _fcde > _gbfad ._fccd +1{if _dcfa =_defg (_fddcf ,_gbfad ._fccd +1,_fcde -1,_gbfad ._adad ,-_gbfad ._egcgb ,_dbbce ,_cfed );_dcfa !=nil {return nil ,_ab .Wrap (_dcfa ,_eabbc ,"\u006ce\u0061k\u0020\u006f\u006e\u0020\u0072i\u0067\u0068t\u0020\u0073\u0069\u0064\u0065");
};};for _fcde ++;_fcde <=_gbfad ._fccd &&_fcde <=_dfdc &&!_aefc .GetPixel (_fcde ,_afe );_fcde ++{};_edag =_fcde ;if !(_fcde <=_gbfad ._fccd &&_fcde <=_dfdc ){break ;};};};_cfed .Max .X ++;_cfed .Max .Y ++;return _cfed ,nil ;};func _bade (_dbdee ,_fef *Bitmap ,_dggf *Selection )(*Bitmap ,error ){const _dffa ="\u006f\u0070\u0065\u006e";
var _dgee error ;_dbdee ,_dgee =_bded (_dbdee ,_fef ,_dggf );if _dgee !=nil {return nil ,_ab .Wrap (_dgee ,_dffa ,"");};_geb ,_dgee :=_aeee (nil ,_fef ,_dggf );if _dgee !=nil {return nil ,_ab .Wrap (_dgee ,_dffa ,"");};_ ,_dgee =_bdefe (_dbdee ,_geb ,_dggf );
if _dgee !=nil {return nil ,_ab .Wrap (_dgee ,_dffa ,"");};return _dbdee ,nil ;};func (_gbac Points )YSorter ()func (_ggee ,_fccgg int )bool {return func (_bfgf ,_cagf int )bool {return _gbac [_bfgf ].Y < _gbac [_cagf ].Y };};func (_dbcg *ClassedPoints )GetIntXByClass (i int )(int ,error ){const _acddd ="\u0043\u006c\u0061\u0073s\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047e\u0074I\u006e\u0074\u0059\u0042\u0079\u0043\u006ca\u0073\u0073";
if i >=_dbcg .IntSlice .Size (){return 0,_ab .Errorf (_acddd ,"\u0069\u003a\u0020\u0027\u0025\u0064\u0027 \u0069\u0073\u0020o\u0075\u0074\u0020\u006ff\u0020\u0074\u0068\u0065\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065",i );
};return int (_dbcg .XAtIndex (i )),nil ;};func (_bgef *Bitmap )RemoveBorder (borderSize int )(*Bitmap ,error ){if borderSize ==0{return _bgef .Copy (),nil ;};_eef ,_aeea :=_bgef .removeBorderGeneral (borderSize ,borderSize ,borderSize ,borderSize );if _aeea !=nil {return nil ,_ab .Wrap (_aeea ,"\u0052\u0065\u006do\u0076\u0065\u0042\u006f\u0072\u0064\u0065\u0072","");
};return _eef ,nil ;};func NewClassedPoints (points *Points ,classes _d .IntSlice )(*ClassedPoints ,error ){const _bcgd ="\u004e\u0065w\u0043\u006c\u0061s\u0073\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073";if points ==nil {return nil ,_ab .Error (_bcgd ,"\u0070\u0072\u006f\u0076id\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0070\u006f\u0069\u006e\u0074\u0073");
};if classes ==nil {return nil ,_ab .Error (_bcgd ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0063\u006c\u0061ss\u0065\u0073");};_degc :=&ClassedPoints {Points :points ,IntSlice :classes };if _feggf :=_degc .validateIntSlice ();_feggf !=nil {return nil ,_ab .Wrap (_feggf ,_bcgd ,"");
};return _degc ,nil ;};func _ecg ()(_dfe [256]uint32 ){for _bee :=0;_bee < 256;_bee ++{if _bee &0x01!=0{_dfe [_bee ]|=0xf;};if _bee &0x02!=0{_dfe [_bee ]|=0xf0;};if _bee &0x04!=0{_dfe [_bee ]|=0xf00;};if _bee &0x08!=0{_dfe [_bee ]|=0xf000;};if _bee &0x10!=0{_dfe [_bee ]|=0xf0000;
};if _bee &0x20!=0{_dfe [_bee ]|=0xf00000;};if _bee &0x40!=0{_dfe [_bee ]|=0xf000000;};if _bee &0x80!=0{_dfe [_bee ]|=0xf0000000;};};return _dfe ;};func _aef (_ecc *Bitmap ,_dad int ,_cgd []byte )(_gaga *Bitmap ,_ebeb error ){const _ebb ="\u0072\u0065\u0064\u0075\u0063\u0065\u0052\u0061\u006e\u006b\u0042\u0069n\u0061\u0072\u0079\u0032";
if _ecc ==nil {return nil ,_ab .Error (_ebb ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if _dad < 1||_dad > 4{return nil ,_ab .Error (_ebb ,"\u006c\u0065\u0076\u0065\u006c\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0069\u006e\u0020\u0073e\u0074\u0020\u007b\u0031\u002c\u0032\u002c\u0033\u002c\u0034\u007d");
};if _ecc .Height <=1{return nil ,_ab .Errorf (_ebb ,"\u0073o\u0075\u0072c\u0065\u0020\u0068e\u0069\u0067\u0068\u0074\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0061t\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0027\u0032\u0027\u0020-\u0020\u0069\u0073\u003a\u0020\u0027\u0025\u0064\u0027",_ecc .Height );
};_gaga =New (_ecc .Width /2,_ecc .Height /2);if _cgd ==nil {_cgd =_abdf ();};_adda :=_bbee (_ecc .RowStride ,2*_gaga .RowStride );switch _dad {case 1:_ebeb =_dadc (_ecc ,_gaga ,_dad ,_cgd ,_adda );case 2:_ebeb =_dadb (_ecc ,_gaga ,_dad ,_cgd ,_adda );
case 3:_ebeb =_efd (_ecc ,_gaga ,_dad ,_cgd ,_adda );case 4:_ebeb =_gfc (_ecc ,_gaga ,_dad ,_cgd ,_adda );};if _ebeb !=nil {return nil ,_ebeb ;};return _gaga ,nil ;};func (_dcae *Bitmap )nextOnPixel (_dfg ,_bgb int )(_cgg _ce .Point ,_cbgf bool ,_ccdb error ){const _fabc ="n\u0065\u0078\u0074\u004f\u006e\u0050\u0069\u0078\u0065\u006c";
_cgg ,_cbgf ,_ccdb =_dcae .nextOnPixelLow (_dcae .Width ,_dcae .Height ,_dcae .RowStride ,_dfg ,_bgb );if _ccdb !=nil {return _cgg ,false ,_ab .Wrap (_ccdb ,_fabc ,"");};return _cgg ,_cbgf ,nil ;};type LocationFilter int ;type CombinationOperator int ;
func _ge (_cg *Bitmap ,_bdd *Bitmap ,_dcg int )(_gd error ){const _ef ="e\u0078\u0070\u0061\u006edB\u0069n\u0061\u0072\u0079\u0050\u006fw\u0065\u0072\u0032\u004c\u006f\u0077";switch _dcg {case 2:_gd =_ag (_cg ,_bdd );case 4:_gd =_fe (_cg ,_bdd );case 8:_gd =_ga (_cg ,_bdd );
default:return _ab .Error (_ef ,"\u0065\u0078p\u0061\u006e\u0073\u0069o\u006e\u0020f\u0061\u0063\u0074\u006f\u0072\u0020\u006e\u006ft\u0020\u0069\u006e\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d\u0020r\u0061\u006e\u0067\u0065");};if _gd !=nil {_gd =_ab .Wrap (_gd ,_ef ,"");
};return _gd ;};func (_becg *Bitmaps )makeSizeIndicator (_dccd ,_baebf int ,_decde LocationFilter ,_adaca SizeComparison )(_becae *_d .NumSlice ,_cdbb error ){const _efgc ="\u0042i\u0074\u006d\u0061\u0070s\u002e\u006d\u0061\u006b\u0065S\u0069z\u0065I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";
if _becg ==nil {return nil ,_ab .Error (_efgc ,"\u0062\u0069\u0074ma\u0070\u0073\u0020\u0027\u0062\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};switch _decde {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_ab .Errorf (_efgc ,"\u0070\u0072\u006f\u0076\u0069d\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006c\u006fc\u0061\u0074\u0069\u006f\u006e\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",_decde );
};switch _adaca {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE ,SizeSelectIfEQ :default:return nil ,_ab .Errorf (_efgc ,"\u0069\u006e\u0076\u0061li\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025d\u0027",_adaca );
};_becae =&_d .NumSlice {};var (_acab ,_aedd ,_ddgc int ;_efdd *Bitmap ;);for _ ,_efdd =range _becg .Values {_acab =0;_aedd ,_ddgc =_efdd .Width ,_efdd .Height ;switch _decde {case LocSelectWidth :if (_adaca ==SizeSelectIfLT &&_aedd < _dccd )||(_adaca ==SizeSelectIfGT &&_aedd > _dccd )||(_adaca ==SizeSelectIfLTE &&_aedd <=_dccd )||(_adaca ==SizeSelectIfGTE &&_aedd >=_dccd )||(_adaca ==SizeSelectIfEQ &&_aedd ==_dccd ){_acab =1;
};case LocSelectHeight :if (_adaca ==SizeSelectIfLT &&_ddgc < _baebf )||(_adaca ==SizeSelectIfGT &&_ddgc > _baebf )||(_adaca ==SizeSelectIfLTE &&_ddgc <=_baebf )||(_adaca ==SizeSelectIfGTE &&_ddgc >=_baebf )||(_adaca ==SizeSelectIfEQ &&_ddgc ==_baebf ){_acab =1;
};case LocSelectIfEither :if (_adaca ==SizeSelectIfLT &&(_aedd < _dccd ||_ddgc < _baebf ))||(_adaca ==SizeSelectIfGT &&(_aedd > _dccd ||_ddgc > _baebf ))||(_adaca ==SizeSelectIfLTE &&(_aedd <=_dccd ||_ddgc <=_baebf ))||(_adaca ==SizeSelectIfGTE &&(_aedd >=_dccd ||_ddgc >=_baebf ))||(_adaca ==SizeSelectIfEQ &&(_aedd ==_dccd ||_ddgc ==_baebf )){_acab =1;
};case LocSelectIfBoth :if (_adaca ==SizeSelectIfLT &&(_aedd < _dccd &&_ddgc < _baebf ))||(_adaca ==SizeSelectIfGT &&(_aedd > _dccd &&_ddgc > _baebf ))||(_adaca ==SizeSelectIfLTE &&(_aedd <=_dccd &&_ddgc <=_baebf ))||(_adaca ==SizeSelectIfGTE &&(_aedd >=_dccd &&_ddgc >=_baebf ))||(_adaca ==SizeSelectIfEQ &&(_aedd ==_dccd &&_ddgc ==_baebf )){_acab =1;
};};_becae .AddInt (_acab );};return _becae ,nil ;};type Points []Point ;const (Vanilla Color =iota ;Chocolate ;);func _eeea (_ccae *Bitmap ,_ccagc ,_egbca ,_accb ,_agcgcg int ,_ceaf RasterOperator ,_fgca *Bitmap ,_gfbg ,_ebef int )error {var (_gcfe byte ;
_dgcc int ;_efe int ;_gcdcg ,_gbbc int ;_ggfe ,_eabb int ;);_bcegd :=_accb >>3;_dcgg :=_accb &7;if _dcgg > 0{_gcfe =_cgde [_dcgg ];};_dgcc =_fgca .RowStride *_ebef +(_gfbg >>3);_efe =_ccae .RowStride *_egbca +(_ccagc >>3);switch _ceaf {case PixSrc :for _ggfe =0;
_ggfe < _agcgcg ;_ggfe ++{_gcdcg =_dgcc +_ggfe *_fgca .RowStride ;_gbbc =_efe +_ggfe *_ccae .RowStride ;for _eabb =0;_eabb < _bcegd ;_eabb ++{_ccae .Data [_gbbc ]=_fgca .Data [_gcdcg ];_gbbc ++;_gcdcg ++;};if _dcgg > 0{_ccae .Data [_gbbc ]=_bbbfe (_ccae .Data [_gbbc ],_fgca .Data [_gcdcg ],_gcfe );
};};case PixNotSrc :for _ggfe =0;_ggfe < _agcgcg ;_ggfe ++{_gcdcg =_dgcc +_ggfe *_fgca .RowStride ;_gbbc =_efe +_ggfe *_ccae .RowStride ;for _eabb =0;_eabb < _bcegd ;_eabb ++{_ccae .Data [_gbbc ]=^(_fgca .Data [_gcdcg ]);_gbbc ++;_gcdcg ++;};if _dcgg > 0{_ccae .Data [_gbbc ]=_bbbfe (_ccae .Data [_gbbc ],^_fgca .Data [_gcdcg ],_gcfe );
};};case PixSrcOrDst :for _ggfe =0;_ggfe < _agcgcg ;_ggfe ++{_gcdcg =_dgcc +_ggfe *_fgca .RowStride ;_gbbc =_efe +_ggfe *_ccae .RowStride ;for _eabb =0;_eabb < _bcegd ;_eabb ++{_ccae .Data [_gbbc ]|=_fgca .Data [_gcdcg ];_gbbc ++;_gcdcg ++;};if _dcgg > 0{_ccae .Data [_gbbc ]=_bbbfe (_ccae .Data [_gbbc ],_fgca .Data [_gcdcg ]|_ccae .Data [_gbbc ],_gcfe );
};};case PixSrcAndDst :for _ggfe =0;_ggfe < _agcgcg ;_ggfe ++{_gcdcg =_dgcc +_ggfe *_fgca .RowStride ;_gbbc =_efe +_ggfe *_ccae .RowStride ;for _eabb =0;_eabb < _bcegd ;_eabb ++{_ccae .Data [_gbbc ]&=_fgca .Data [_gcdcg ];_gbbc ++;_gcdcg ++;};if _dcgg > 0{_ccae .Data [_gbbc ]=_bbbfe (_ccae .Data [_gbbc ],_fgca .Data [_gcdcg ]&_ccae .Data [_gbbc ],_gcfe );
};};case PixSrcXorDst :for _ggfe =0;_ggfe < _agcgcg ;_ggfe ++{_gcdcg =_dgcc +_ggfe *_fgca .RowStride ;_gbbc =_efe +_ggfe *_ccae .RowStride ;for _eabb =0;_eabb < _bcegd ;_eabb ++{_ccae .Data [_gbbc ]^=_fgca .Data [_gcdcg ];_gbbc ++;_gcdcg ++;};if _dcgg > 0{_ccae .Data [_gbbc ]=_bbbfe (_ccae .Data [_gbbc ],_fgca .Data [_gcdcg ]^_ccae .Data [_gbbc ],_gcfe );
};};case PixNotSrcOrDst :for _ggfe =0;_ggfe < _agcgcg ;_ggfe ++{_gcdcg =_dgcc +_ggfe *_fgca .RowStride ;_gbbc =_efe +_ggfe *_ccae .RowStride ;for _eabb =0;_eabb < _bcegd ;_eabb ++{_ccae .Data [_gbbc ]|=^(_fgca .Data [_gcdcg ]);_gbbc ++;_gcdcg ++;};if _dcgg > 0{_ccae .Data [_gbbc ]=_bbbfe (_ccae .Data [_gbbc ],^(_fgca .Data [_gcdcg ])|_ccae .Data [_gbbc ],_gcfe );
};};case PixNotSrcAndDst :for _ggfe =0;_ggfe < _agcgcg ;_ggfe ++{_gcdcg =_dgcc +_ggfe *_fgca .RowStride ;_gbbc =_efe +_ggfe *_ccae .RowStride ;for _eabb =0;_eabb < _bcegd ;_eabb ++{_ccae .Data [_gbbc ]&=^(_fgca .Data [_gcdcg ]);_gbbc ++;_gcdcg ++;};if _dcgg > 0{_ccae .Data [_gbbc ]=_bbbfe (_ccae .Data [_gbbc ],^(_fgca .Data [_gcdcg ])&_ccae .Data [_gbbc ],_gcfe );
};};case PixSrcOrNotDst :for _ggfe =0;_ggfe < _agcgcg ;_ggfe ++{_gcdcg =_dgcc +_ggfe *_fgca .RowStride ;_gbbc =_efe +_ggfe *_ccae .RowStride ;for _eabb =0;_eabb < _bcegd ;_eabb ++{_ccae .Data [_gbbc ]=_fgca .Data [_gcdcg ]|^(_ccae .Data [_gbbc ]);_gbbc ++;
_gcdcg ++;};if _dcgg > 0{_ccae .Data [_gbbc ]=_bbbfe (_ccae .Data [_gbbc ],_fgca .Data [_gcdcg ]|^(_ccae .Data [_gbbc ]),_gcfe );};};case PixSrcAndNotDst :for _ggfe =0;_ggfe < _agcgcg ;_ggfe ++{_gcdcg =_dgcc +_ggfe *_fgca .RowStride ;_gbbc =_efe +_ggfe *_ccae .RowStride ;
for _eabb =0;_eabb < _bcegd ;_eabb ++{_ccae .Data [_gbbc ]=_fgca .Data [_gcdcg ]&^(_ccae .Data [_gbbc ]);_gbbc ++;_gcdcg ++;};if _dcgg > 0{_ccae .Data [_gbbc ]=_bbbfe (_ccae .Data [_gbbc ],_fgca .Data [_gcdcg ]&^(_ccae .Data [_gbbc ]),_gcfe );};};case PixNotPixSrcOrDst :for _ggfe =0;
_ggfe < _agcgcg ;_ggfe ++{_gcdcg =_dgcc +_ggfe *_fgca .RowStride ;_gbbc =_efe +_ggfe *_ccae .RowStride ;for _eabb =0;_eabb < _bcegd ;_eabb ++{_ccae .Data [_gbbc ]=^(_fgca .Data [_gcdcg ]|_ccae .Data [_gbbc ]);_gbbc ++;_gcdcg ++;};if _dcgg > 0{_ccae .Data [_gbbc ]=_bbbfe (_ccae .Data [_gbbc ],^(_fgca .Data [_gcdcg ]|_ccae .Data [_gbbc ]),_gcfe );
};};case PixNotPixSrcAndDst :for _ggfe =0;_ggfe < _agcgcg ;_ggfe ++{_gcdcg =_dgcc +_ggfe *_fgca .RowStride ;_gbbc =_efe +_ggfe *_ccae .RowStride ;for _eabb =0;_eabb < _bcegd ;_eabb ++{_ccae .Data [_gbbc ]=^(_fgca .Data [_gcdcg ]&_ccae .Data [_gbbc ]);_gbbc ++;
_gcdcg ++;};if _dcgg > 0{_ccae .Data [_gbbc ]=_bbbfe (_ccae .Data [_gbbc ],^(_fgca .Data [_gcdcg ]&_ccae .Data [_gbbc ]),_gcfe );};};case PixNotPixSrcXorDst :for _ggfe =0;_ggfe < _agcgcg ;_ggfe ++{_gcdcg =_dgcc +_ggfe *_fgca .RowStride ;_gbbc =_efe +_ggfe *_ccae .RowStride ;
for _eabb =0;_eabb < _bcegd ;_eabb ++{_ccae .Data [_gbbc ]=^(_fgca .Data [_gcdcg ]^_ccae .Data [_gbbc ]);_gbbc ++;_gcdcg ++;};if _dcgg > 0{_ccae .Data [_gbbc ]=_bbbfe (_ccae .Data [_gbbc ],^(_fgca .Data [_gcdcg ]^_ccae .Data [_gbbc ]),_gcfe );};};default:_g .Log .Debug ("\u0050\u0072ov\u0069\u0064\u0065d\u0020\u0069\u006e\u0076ali\u0064 r\u0061\u0073\u0074\u0065\u0072\u0020\u006fpe\u0072\u0061\u0074\u006f\u0072\u003a\u0020%\u0076",_ceaf );
return _ab .Error ("\u0072\u0061\u0073\u0074er\u004f\u0070\u0042\u0079\u0074\u0065\u0041\u006c\u0069\u0067\u006e\u0065\u0064\u004co\u0077","\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");
};return nil ;};func _bce (_ba *Bitmap ,_gag ,_fdf int )(*Bitmap ,error ){const _dcd ="e\u0078\u0070\u0061\u006edB\u0069n\u0061\u0072\u0079\u0052\u0065p\u006c\u0069\u0063\u0061\u0074\u0065";if _ba ==nil {return nil ,_ab .Error (_dcd ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _gag <=0||_fdf <=0{return nil ,_ab .Error (_dcd ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0073\u0063\u0061l\u0065\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u003a\u0020<\u003d\u0020\u0030");};if _gag ==_fdf {if _gag ==1{_ggf ,_cfd :=_egec (nil ,_ba );
if _cfd !=nil {return nil ,_ab .Wrap (_cfd ,_dcd ,"\u0078\u0046\u0061\u0063\u0074\u0020\u003d\u003d\u0020y\u0046\u0061\u0063\u0074");};return _ggf ,nil ;};if _gag ==2||_gag ==4||_gag ==8{_bb ,_aff :=_abd (_ba ,_gag );if _aff !=nil {return nil ,_ab .Wrap (_aff ,_dcd ,"\u0078\u0046a\u0063\u0074\u0020i\u006e\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d");
};return _bb ,nil ;};};_fbed :=_gag *_ba .Width ;_aaa :=_fdf *_ba .Height ;_gb :=New (_fbed ,_aaa );_dfc :=_gb .RowStride ;var (_fg ,_baa ,_ae ,_dea ,_eeg int ;_aag byte ;_efb error ;);for _baa =0;_baa < _ba .Height ;_baa ++{_fg =_fdf *_baa *_dfc ;for _ae =0;
_ae < _ba .Width ;_ae ++{if _ff :=_ba .GetPixel (_ae ,_baa );_ff {_eeg =_gag *_ae ;for _dea =0;_dea < _gag ;_dea ++{_gb .setBit (_fg *8+_eeg +_dea );};};};for _dea =1;_dea < _fdf ;_dea ++{_ebg :=_fg +_dea *_dfc ;for _bda :=0;_bda < _dfc ;_bda ++{if _aag ,_efb =_gb .GetByte (_fg +_bda );
_efb !=nil {return nil ,_ab .Wrapf (_efb ,_dcd ,"\u0072\u0065\u0070\u006cic\u0061\u0074\u0069\u006e\u0067\u0020\u006c\u0069\u006e\u0065\u003a\u0020\u0027\u0025d\u0027",_dea );};if _efb =_gb .SetByte (_ebg +_bda ,_aag );_efb !=nil {return nil ,_ab .Wrap (_efb ,_dcd ,"\u0053\u0065\u0074\u0074in\u0067\u0020\u0062\u0079\u0074\u0065\u0020\u0066\u0061\u0069\u006c\u0065\u0064");
};};};};return _gb ,nil ;};type Component int ;func _bbee (_cbec ,_gbfb int )int {if _cbec < _gbfb {return _cbec ;};return _gbfb ;};func (_dag *Bitmap )setEightFullBytes (_bbcg int ,_gacc uint64 )error {if _bbcg +7> len (_dag .Data )-1{return _ab .Error ("\u0073\u0065\u0074\u0045\u0069\u0067\u0068\u0074\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");
};_dag .Data [_bbcg ]=byte ((_gacc &0xff00000000000000)>>56);_dag .Data [_bbcg +1]=byte ((_gacc &0xff000000000000)>>48);_dag .Data [_bbcg +2]=byte ((_gacc &0xff0000000000)>>40);_dag .Data [_bbcg +3]=byte ((_gacc &0xff00000000)>>32);_dag .Data [_bbcg +4]=byte ((_gacc &0xff000000)>>24);
_dag .Data [_bbcg +5]=byte ((_gacc &0xff0000)>>16);_dag .Data [_bbcg +6]=byte ((_gacc &0xff00)>>8);_dag .Data [_bbcg +7]=byte (_gacc &0xff);return nil ;};func (_afba *Selection )setOrigin (_feag ,_accf int ){_afba .Cy ,_afba .Cx =_feag ,_accf };func (_fcgb *ClassedPoints )Len ()int {return _fcgb .IntSlice .Size ()};
func (_ecf *Bitmap )ConnComponents (bms *Bitmaps ,connectivity int )(_faae *Boxes ,_efdc error ){const _geeca ="B\u0069\u0074\u006d\u0061p.\u0043o\u006e\u006e\u0043\u006f\u006dp\u006f\u006e\u0065\u006e\u0074\u0073";if _ecf ==nil {return nil ,_ab .Error (_geeca ,"\u0070r\u006f\u0076\u0069\u0064e\u0064\u0020\u0065\u006d\u0070t\u0079 \u0027b\u0027\u0020\u0062\u0069\u0074\u006d\u0061p");
};if connectivity !=4&&connectivity !=8{return nil ,_ab .Error (_geeca ,"\u0063\u006f\u006ene\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u006e\u006f\u0074\u0020\u0034\u0020\u006f\u0072\u0020\u0038");};if bms ==nil {if _faae ,_efdc =_ecf .connComponentsBB (connectivity );
_efdc !=nil {return nil ,_ab .Wrap (_efdc ,_geeca ,"");};}else {if _faae ,_efdc =_ecf .connComponentsBitmapsBB (bms ,connectivity );_efdc !=nil {return nil ,_ab .Wrap (_efdc ,_geeca ,"");};};return _faae ,nil ;};const (_ SizeComparison =iota ;SizeSelectIfLT ;
SizeSelectIfGT ;SizeSelectIfLTE ;SizeSelectIfGTE ;SizeSelectIfEQ ;);func (_ffa *Bitmap )And (s *Bitmap )(_fae *Bitmap ,_fcda error ){const _cecf ="\u0042\u0069\u0074\u006d\u0061\u0070\u002e\u0041\u006e\u0064";if _ffa ==nil {return nil ,_ab .Error (_cecf ,"\u0027b\u0069t\u006d\u0061\u0070\u0020\u0027b\u0027\u0020i\u0073\u0020\u006e\u0069\u006c");
};if s ==nil {return nil ,_ab .Error (_cecf ,"\u0062\u0069\u0074\u006d\u0061\u0070\u0020\u0027\u0073\u0027\u0020\u0069s\u0020\u006e\u0069\u006c");};if !_ffa .SizesEqual (s ){_g .Log .Debug ("\u0025\u0073\u0020-\u0020\u0042\u0069\u0074\u006d\u0061\u0070\u0020\u0027\u0073\u0027\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0073\u0069\u007a\u0065 \u0077\u0069\u0074\u0068\u0020\u0027\u0062\u0027",_cecf );
};if _fae ,_fcda =_egec (_fae ,_ffa );_fcda !=nil {return nil ,_ab .Wrap (_fcda ,_cecf ,"\u0063\u0061\u006e't\u0020\u0063\u0072\u0065\u0061\u0074\u0065\u0020\u0027\u0064\u0027\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _fcda =_fae .RasterOperation (0,0,_fae .Width ,_fae .Height ,PixSrcAndDst ,s ,0,0);
_fcda !=nil {return nil ,_ab .Wrap (_fcda ,_cecf ,"");};return _fae ,nil ;};func New (width ,height int )*Bitmap {_cgbb :=_acc (width ,height );_cgbb .Data =make ([]byte ,height *_cgbb .RowStride );return _cgbb ;};const (MopDilation MorphOperation =iota ;
MopErosion ;MopOpening ;MopClosing ;MopRankBinaryReduction ;MopReplicativeBinaryExpansion ;MopAddBorder ;);type Bitmaps struct{Values []*Bitmap ;Boxes []*_ce .Rectangle ;};func _gaed (_bgcga *Bitmap ,_dbfde ,_baeb int ,_gffd ,_fffe int ,_eeaef RasterOperator ){var (_abbgd int ;
_eeee byte ;_dcbb ,_agf int ;_dbdc int ;);_cgce :=_gffd >>3;_deec :=_gffd &7;if _deec > 0{_eeee =_cgde [_deec ];};_abbgd =_bgcga .RowStride *_baeb +(_dbfde >>3);switch _eeaef {case PixClr :for _dcbb =0;_dcbb < _fffe ;_dcbb ++{_dbdc =_abbgd +_dcbb *_bgcga .RowStride ;
for _agf =0;_agf < _cgce ;_agf ++{_bgcga .Data [_dbdc ]=0x0;_dbdc ++;};if _deec > 0{_bgcga .Data [_dbdc ]=_bbbfe (_bgcga .Data [_dbdc ],0x0,_eeee );};};case PixSet :for _dcbb =0;_dcbb < _fffe ;_dcbb ++{_dbdc =_abbgd +_dcbb *_bgcga .RowStride ;for _agf =0;
_agf < _cgce ;_agf ++{_bgcga .Data [_dbdc ]=0xff;_dbdc ++;};if _deec > 0{_bgcga .Data [_dbdc ]=_bbbfe (_bgcga .Data [_dbdc ],0xff,_eeee );};};case PixNotDst :for _dcbb =0;_dcbb < _fffe ;_dcbb ++{_dbdc =_abbgd +_dcbb *_bgcga .RowStride ;for _agf =0;_agf < _cgce ;
_agf ++{_bgcga .Data [_dbdc ]=^_bgcga .Data [_dbdc ];_dbdc ++;};if _deec > 0{_bgcga .Data [_dbdc ]=_bbbfe (_bgcga .Data [_dbdc ],^_bgcga .Data [_dbdc ],_eeee );};};};};func _edbb (_cbbb ,_bbgc *Bitmap ,_gcae ,_cbba ,_ccfc ,_ffab ,_fcdc int ,_adab CombinationOperator )error {var _adcc int ;
_bfge :=func (){_adcc ++;_ccfc +=_bbgc .RowStride ;_ffab +=_cbbb .RowStride ;_fcdc +=_cbbb .RowStride };for _adcc =_gcae ;_adcc < _cbba ;_bfge (){_fbcf :=_ccfc ;for _gdb :=_ffab ;_gdb <=_fcdc ;_gdb ++{_aegg ,_ccc :=_bbgc .GetByte (_fbcf );if _ccc !=nil {return _ccc ;
};_acgd ,_ccc :=_cbbb .GetByte (_gdb );if _ccc !=nil {return _ccc ;};if _ccc =_bbgc .SetByte (_fbcf ,_becb (_aegg ,_acgd ,_adab ));_ccc !=nil {return _ccc ;};_fbcf ++;};};return nil ;};func _aeee (_adcb ,_eabe *Bitmap ,_cgdff *Selection )(*Bitmap ,error ){const _efca ="\u0065\u0072\u006fd\u0065";
var (_dbdeb error ;_fcaf *Bitmap ;);_adcb ,_dbdeb =_cged (_adcb ,_eabe ,_cgdff ,&_fcaf );if _dbdeb !=nil {return nil ,_ab .Wrap (_dbdeb ,_efca ,"");};if _dbdeb =_adcb .setAll ();_dbdeb !=nil {return nil ,_ab .Wrap (_dbdeb ,_efca ,"");};var _fcgg SelectionValue ;
for _bgdb :=0;_bgdb < _cgdff .Height ;_bgdb ++{for _bcgg :=0;_bcgg < _cgdff .Width ;_bcgg ++{_fcgg =_cgdff .Data [_bgdb ][_bcgg ];if _fcgg ==SelHit {_dbdeb =_debgc (_adcb ,_cgdff .Cx -_bcgg ,_cgdff .Cy -_bgdb ,_eabe .Width ,_eabe .Height ,PixSrcAndDst ,_fcaf ,0,0);
if _dbdeb !=nil {return nil ,_ab .Wrap (_dbdeb ,_efca ,"");};};};};if MorphBC ==SymmetricMorphBC {return _adcb ,nil ;};_fdcde ,_ebcdb ,_caea ,_bgccd :=_cgdff .findMaxTranslations ();if _fdcde > 0{if _dbdeb =_adcb .RasterOperation (0,0,_fdcde ,_eabe .Height ,PixClr ,nil ,0,0);
_dbdeb !=nil {return nil ,_ab .Wrap (_dbdeb ,_efca ,"\u0078\u0070\u0020\u003e\u0020\u0030");};};if _caea > 0{if _dbdeb =_adcb .RasterOperation (_eabe .Width -_caea ,0,_caea ,_eabe .Height ,PixClr ,nil ,0,0);_dbdeb !=nil {return nil ,_ab .Wrap (_dbdeb ,_efca ,"\u0078\u006e\u0020\u003e\u0020\u0030");
};};if _ebcdb > 0{if _dbdeb =_adcb .RasterOperation (0,0,_eabe .Width ,_ebcdb ,PixClr ,nil ,0,0);_dbdeb !=nil {return nil ,_ab .Wrap (_dbdeb ,_efca ,"\u0079\u0070\u0020\u003e\u0020\u0030");};};if _bgccd > 0{if _dbdeb =_adcb .RasterOperation (0,_eabe .Height -_bgccd ,_eabe .Width ,_bgccd ,PixClr ,nil ,0,0);
_dbdeb !=nil {return nil ,_ab .Wrap (_dbdeb ,_efca ,"\u0079\u006e\u0020\u003e\u0020\u0030");};};return _adcb ,nil ;};func (_gbfa *Bitmap )GetComponents (components Component ,maxWidth ,maxHeight int )(_cagb *Bitmaps ,_gdebb *Boxes ,_def error ){const _bgbf ="B\u0069t\u006d\u0061\u0070\u002e\u0047\u0065\u0074\u0043o\u006d\u0070\u006f\u006een\u0074\u0073";
if _gbfa ==nil {return nil ,nil ,_ab .Error (_bgbf ,"\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0042\u0069\u0074\u006da\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069n\u0065\u0064\u002e");};switch components {case ComponentConn ,ComponentCharacters ,ComponentWords :default:return nil ,nil ,_ab .Error (_bgbf ,"\u0069\u006e\u0076\u0061l\u0069\u0064\u0020\u0063\u006f\u006d\u0070\u006f\u006e\u0065n\u0074s\u0020\u0070\u0061\u0072\u0061\u006d\u0065t\u0065\u0072");
};if _gbfa .Zero (){_gdebb =&Boxes {};_cagb =&Bitmaps {};return _cagb ,_gdebb ,nil ;};switch components {case ComponentConn :_cagb =&Bitmaps {};if _gdebb ,_def =_gbfa .ConnComponents (_cagb ,8);_def !=nil {return nil ,nil ,_ab .Wrap (_def ,_bgbf ,"\u006e\u006f \u0070\u0072\u0065p\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");
};case ComponentCharacters :_fafb ,_egf :=MorphSequence (_gbfa ,MorphProcess {Operation :MopClosing ,Arguments :[]int {1,6}});if _egf !=nil {return nil ,nil ,_ab .Wrap (_egf ,_bgbf ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");
};if _g .Log .IsLogLevel (_g .LogLevelTrace ){_g .Log .Trace ("\u0043o\u006d\u0070o\u006e\u0065\u006e\u0074C\u0068\u0061\u0072a\u0063\u0074\u0065\u0072\u0073\u0020\u0062\u0069\u0074ma\u0070\u0020\u0061f\u0074\u0065r\u0020\u0063\u006c\u006f\u0073\u0069n\u0067\u003a \u0025\u0073",_fafb .String ());
};_gfgdb :=&Bitmaps {};_gdebb ,_egf =_fafb .ConnComponents (_gfgdb ,8);if _egf !=nil {return nil ,nil ,_ab .Wrap (_egf ,_bgbf ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");
};if _g .Log .IsLogLevel (_g .LogLevelTrace ){_g .Log .Trace ("\u0043\u006f\u006d\u0070\u006f\u006ee\u006e\u0074\u0043\u0068\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0062\u0069\u0074\u006d\u0061\u0070\u0020a\u0066\u0074\u0065\u0072\u0020\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076i\u0074y\u003a\u0020\u0025\u0073",_gfgdb .String ());
};if _cagb ,_egf =_gfgdb .ClipToBitmap (_gbfa );_egf !=nil {return nil ,nil ,_ab .Wrap (_egf ,_bgbf ,"\u0063h\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0073\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069\u006e\u0067");};case ComponentWords :_gbfc :=1;
var _gfac *Bitmap ;switch {case _gbfa .XResolution <=200:_gfac =_gbfa ;case _gbfa .XResolution <=400:_gbfc =2;_gfac ,_def =_bbb (_gbfa ,1,0,0,0);if _def !=nil {return nil ,nil ,_ab .Wrap (_def ,_bgbf ,"w\u006f\u0072\u0064\u0020\u0070\u0072e\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0020\u002d \u0078\u0072\u0065s\u003c=\u0034\u0030\u0030");
};default:_gbfc =4;_gfac ,_def =_bbb (_gbfa ,1,1,0,0);if _def !=nil {return nil ,nil ,_ab .Wrap (_def ,_bgbf ,"\u0077\u006f\u0072\u0064 \u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073 \u002d \u0078\u0072\u0065\u0073\u0020\u003e\u00204\u0030\u0030");
};};_daed ,_ ,_ecee :=_gfdc (_gfac );if _ecee !=nil {return nil ,nil ,_ab .Wrap (_ecee ,_bgbf ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");};_egg ,_ecee :=_fcfg (_daed ,_gbfc );if _ecee !=nil {return nil ,nil ,_ab .Wrap (_ecee ,_bgbf ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");
};_bage :=&Bitmaps {};if _gdebb ,_ecee =_egg .ConnComponents (_bage ,4);_ecee !=nil {return nil ,nil ,_ab .Wrap (_ecee ,_bgbf ,"\u0077\u006f\u0072\u0064\u0020\u0070r\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u002c\u0020\u0063\u006f\u006en\u0065\u0063\u0074\u0020\u0065\u0078\u0070a\u006e\u0064\u0065\u0064");
};if _cagb ,_ecee =_bage .ClipToBitmap (_gbfa );_ecee !=nil {return nil ,nil ,_ab .Wrap (_ecee ,_bgbf ,"\u0077o\u0072d\u0020\u0070\u0072\u0065\u0070\u0072\u006f\u0063\u0065\u0073\u0073");};};_cagb ,_def =_cagb .SelectBySize (maxWidth ,maxHeight ,LocSelectIfBoth ,SizeSelectIfLTE );
if _def !=nil {return nil ,nil ,_ab .Wrap (_def ,_bgbf ,"");};_gdebb ,_def =_gdebb .SelectBySize (maxWidth ,maxHeight ,LocSelectIfBoth ,SizeSelectIfLTE );if _def !=nil {return nil ,nil ,_ab .Wrap (_def ,_bgbf ,"");};return _cagb ,_gdebb ,nil ;};func _aafde (_afafe *Bitmap ,_efag ,_eaf int ,_aegf ,_cgbe int ,_fcfce RasterOperator ){var (_fffb bool ;
_fagd bool ;_egaag int ;_ebbfa int ;_eeef int ;_gadcg int ;_fbfb bool ;_eggb byte ;);_ddbe :=8-(_efag &7);_bcabd :=_aaecc [_ddbe ];_fgef :=_afafe .RowStride *_eaf +(_efag >>3);if _aegf < _ddbe {_fffb =true ;_bcabd &=_cgde [8-_ddbe +_aegf ];};if !_fffb {_egaag =(_aegf -_ddbe )>>3;
if _egaag !=0{_fagd =true ;_ebbfa =_fgef +1;};};_eeef =(_efag +_aegf )&7;if !(_fffb ||_eeef ==0){_fbfb =true ;_eggb =_cgde [_eeef ];_gadcg =_fgef +1+_egaag ;};var _gefe ,_cgea int ;switch _fcfce {case PixClr :for _gefe =0;_gefe < _cgbe ;_gefe ++{_afafe .Data [_fgef ]=_bbbfe (_afafe .Data [_fgef ],0x0,_bcabd );
_fgef +=_afafe .RowStride ;};if _fagd {for _gefe =0;_gefe < _cgbe ;_gefe ++{for _cgea =0;_cgea < _egaag ;_cgea ++{_afafe .Data [_ebbfa +_cgea ]=0x0;};_ebbfa +=_afafe .RowStride ;};};if _fbfb {for _gefe =0;_gefe < _cgbe ;_gefe ++{_afafe .Data [_gadcg ]=_bbbfe (_afafe .Data [_gadcg ],0x0,_eggb );
_gadcg +=_afafe .RowStride ;};};case PixSet :for _gefe =0;_gefe < _cgbe ;_gefe ++{_afafe .Data [_fgef ]=_bbbfe (_afafe .Data [_fgef ],0xff,_bcabd );_fgef +=_afafe .RowStride ;};if _fagd {for _gefe =0;_gefe < _cgbe ;_gefe ++{for _cgea =0;_cgea < _egaag ;
_cgea ++{_afafe .Data [_ebbfa +_cgea ]=0xff;};_ebbfa +=_afafe .RowStride ;};};if _fbfb {for _gefe =0;_gefe < _cgbe ;_gefe ++{_afafe .Data [_gadcg ]=_bbbfe (_afafe .Data [_gadcg ],0xff,_eggb );_gadcg +=_afafe .RowStride ;};};case PixNotDst :for _gefe =0;
_gefe < _cgbe ;_gefe ++{_afafe .Data [_fgef ]=_bbbfe (_afafe .Data [_fgef ],^_afafe .Data [_fgef ],_bcabd );_fgef +=_afafe .RowStride ;};if _fagd {for _gefe =0;_gefe < _cgbe ;_gefe ++{for _cgea =0;_cgea < _egaag ;_cgea ++{_afafe .Data [_ebbfa +_cgea ]=^(_afafe .Data [_ebbfa +_cgea ]);
};_ebbfa +=_afafe .RowStride ;};};if _fbfb {for _gefe =0;_gefe < _cgbe ;_gefe ++{_afafe .Data [_gadcg ]=_bbbfe (_afafe .Data [_gadcg ],^_afafe .Data [_gadcg ],_eggb );_gadcg +=_afafe .RowStride ;};};};};const (SelDontCare SelectionValue =iota ;SelHit ;
SelMiss ;);func (_dgae *Bitmaps )AddBitmap (bm *Bitmap ){_dgae .Values =append (_dgae .Values ,bm )};func (_gded *Bitmap )createTemplate ()*Bitmap {return &Bitmap {Width :_gded .Width ,Height :_gded .Height ,RowStride :_gded .RowStride ,Color :_gded .Color ,Text :_gded .Text ,BitmapNumber :_gded .BitmapNumber ,Special :_gded .Special ,Data :make ([]byte ,len (_gded .Data ))};
};type Point struct{X ,Y float32 ;};func (_feaa *Bitmap )RemoveBorderGeneral (left ,right ,top ,bot int )(*Bitmap ,error ){return _feaa .removeBorderGeneral (left ,right ,top ,bot );};func (_bdgg *ClassedPoints )Less (i ,j int )bool {return _bdgg ._dcfd (i ,j )};
func (_ddag *byHeight )Len ()int {return len (_ddag .Values )};var (_cgde =[]byte {0x00,0x80,0xC0,0xE0,0xF0,0xF8,0xFC,0xFE,0xFF};_aaecc =[]byte {0x00,0x01,0x03,0x07,0x0F,0x1F,0x3F,0x7F,0xFF};);func (_fdcdec *ClassedPoints )GetIntYByClass (i int )(int ,error ){const _eebc ="\u0043\u006c\u0061\u0073s\u0065\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047e\u0074I\u006e\u0074\u0059\u0042\u0079\u0043\u006ca\u0073\u0073";
if i >=_fdcdec .IntSlice .Size (){return 0,_ab .Errorf (_eebc ,"\u0069\u003a\u0020\u0027\u0025\u0064\u0027 \u0069\u0073\u0020o\u0075\u0074\u0020\u006ff\u0020\u0074\u0068\u0065\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0049\u006e\u0074\u0053\u006c\u0069\u0063\u0065",i );
};return int (_fdcdec .YAtIndex (i )),nil ;};func (_dced Points )GetIntY (i int )(int ,error ){if i >=len (_dced ){return 0,_ab .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065t\u0049\u006e\u0074\u0059","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return int (_dced [i ].Y ),nil ;};var _fbda =[]byte {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3E,0x78,0x27,0xC2,0x27,0x91,0x00,0x22,0x48,0x21,0x03,0x24,0x91,0x00,0x22,0x48,0x21,0x02,0xA4,0x95,0x00,0x22,0x48,0x21,0x02,0x64,0x9B,0x00,0x3C,0x78,0x21,0x02,0x27,0x91,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x63,0x18,0x00,0x00,0x00,0x00,0x00,0x7F,0xF8,0x00,0x00,0x00,0x00,0x00,0x15,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
func (_fgff *Bitmap )clearAll ()error {return _fgff .RasterOperation (0,0,_fgff .Width ,_fgff .Height ,PixClr ,nil ,0,0);};func (_abgg *ClassedPoints )ySortFunction ()func (_gbab int ,_fcdac int )bool {return func (_eccg ,_feda int )bool {return _abgg .YAtIndex (_eccg )< _abgg .YAtIndex (_feda )};
};func RankHausTest (p1 ,p2 ,p3 ,p4 *Bitmap ,delX ,delY float32 ,maxDiffW ,maxDiffH ,area1 ,area3 int ,rank float32 ,tab8 []int )(_adg bool ,_ebcc error ){const _cbfc ="\u0052\u0061\u006ek\u0048\u0061\u0075\u0073\u0054\u0065\u0073\u0074";_dcaf ,_aedc :=p1 .Width ,p1 .Height ;
_fgcf ,_cgdb :=p3 .Width ,p3 .Height ;if _d .Abs (_dcaf -_fgcf )> maxDiffW {return false ,nil ;};if _d .Abs (_aedc -_cgdb )> maxDiffH {return false ,nil ;};_fbec :=int (float32 (area1 )*(1.0-rank )+0.5);_cegc :=int (float32 (area3 )*(1.0-rank )+0.5);var _bbeee ,_bfea int ;
if delX >=0{_bbeee =int (delX +0.5);}else {_bbeee =int (delX -0.5);};if delY >=0{_bfea =int (delY +0.5);}else {_bfea =int (delY -0.5);};_efgg :=p1 .CreateTemplate ();if _ebcc =_efgg .RasterOperation (0,0,_dcaf ,_aedc ,PixSrc ,p1 ,0,0);_ebcc !=nil {return false ,_ab .Wrap (_ebcc ,_cbfc ,"p\u0031\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");
};if _ebcc =_efgg .RasterOperation (_bbeee ,_bfea ,_dcaf ,_aedc ,PixNotSrcAndDst ,p4 ,0,0);_ebcc !=nil {return false ,_ab .Wrap (_ebcc ,_cbfc ,"\u0074 \u0026\u0020\u0021\u0070\u0034");};_adg ,_ebcc =_efgg .ThresholdPixelSum (_fbec ,tab8 );if _ebcc !=nil {return false ,_ab .Wrap (_ebcc ,_cbfc ,"\u0074\u002d\u003e\u0074\u0068\u0072\u0065\u0073\u0068\u0031");
};if _adg {return false ,nil ;};if _ebcc =_efgg .RasterOperation (_bbeee ,_bfea ,_fgcf ,_cgdb ,PixSrc ,p3 ,0,0);_ebcc !=nil {return false ,_ab .Wrap (_ebcc ,_cbfc ,"p\u0033\u0020\u002d\u0053\u0052\u0043\u002d\u003e\u0020\u0074");};if _ebcc =_efgg .RasterOperation (0,0,_fgcf ,_cgdb ,PixNotSrcAndDst ,p2 ,0,0);
_ebcc !=nil {return false ,_ab .Wrap (_ebcc ,_cbfc ,"\u0074 \u0026\u0020\u0021\u0070\u0032");};_adg ,_ebcc =_efgg .ThresholdPixelSum (_cegc ,tab8 );if _ebcc !=nil {return false ,_ab .Wrap (_ebcc ,_cbfc ,"\u0074\u002d\u003e\u0074\u0068\u0072\u0065\u0073\u0068\u0033");
};return !_adg ,nil ;};func _debgc (_babe *Bitmap ,_eadf ,_afbfg ,_aagba ,_fdbbb int ,_gaegc RasterOperator ,_ggaa *Bitmap ,_ebff ,_aaea int )error {const _gbbff ="\u0072a\u0073t\u0065\u0072\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e";if _babe ==nil {return _ab .Error (_gbbff ,"\u006e\u0069\u006c\u0020\u0027\u0064\u0065\u0073\u0074\u0027\u0020\u0042i\u0074\u006d\u0061\u0070");
};if _gaegc ==PixDst {return nil ;};switch _gaegc {case PixClr ,PixSet ,PixNotDst :_aabc (_babe ,_eadf ,_afbfg ,_aagba ,_fdbbb ,_gaegc );return nil ;};if _ggaa ==nil {_g .Log .Debug ("\u0052a\u0073\u0074e\u0072\u004f\u0070\u0065r\u0061\u0074\u0069o\u006e\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020bi\u0074\u006d\u0061p\u0020\u0069s\u0020\u006e\u006f\u0074\u0020\u0064e\u0066\u0069n\u0065\u0064");
return _ab .Error (_gbbff ,"\u006e\u0069l\u0020\u0027\u0073r\u0063\u0027\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if _ebdg :=_gbaa (_babe ,_eadf ,_afbfg ,_aagba ,_fdbbb ,_gaegc ,_ggaa ,_ebff ,_aaea );_ebdg !=nil {return _ab .Wrap (_ebdg ,_gbbff ,"");
};return nil ;};type MorphProcess struct{Operation MorphOperation ;Arguments []int ;};func SelCreateBrick (h ,w int ,cy ,cx int ,tp SelectionValue )*Selection {_fbbd :=_cdff (h ,w ,"");_fbbd .setOrigin (cy ,cx );var _aagd ,_bffe int ;for _aagd =0;_aagd < h ;
_aagd ++{for _bffe =0;_bffe < w ;_bffe ++{_fbbd .Data [_aagd ][_bffe ]=tp ;};};return _fbbd ;};func (_gdfff *Selection )findMaxTranslations ()(_fccb ,_faeb ,_ebgc ,_beff int ){for _ffdf :=0;_ffdf < _gdfff .Height ;_ffdf ++{for _cgac :=0;_cgac < _gdfff .Width ;
_cgac ++{if _gdfff .Data [_ffdf ][_cgac ]==SelHit {_fccb =_bccd (_fccb ,_gdfff .Cx -_cgac );_faeb =_bccd (_faeb ,_gdfff .Cy -_ffdf );_ebgc =_bccd (_ebgc ,_cgac -_gdfff .Cx );_beff =_bccd (_beff ,_ffdf -_gdfff .Cy );};};};return _fccb ,_faeb ,_ebgc ,_beff ;
};func (_bdbd *byHeight )Swap (i ,j int ){_bdbd .Values [i ],_bdbd .Values [j ]=_bdbd .Values [j ],_bdbd .Values [i ];if _bdbd .Boxes !=nil {_bdbd .Boxes [i ],_bdbd .Boxes [j ]=_bdbd .Boxes [j ],_bdbd .Boxes [i ];};};func (_adged *Bitmaps )String ()string {_egggf :=_c .Builder {};
for _ ,_bdeed :=range _adged .Values {_egggf .WriteString (_bdeed .String ());_egggf .WriteRune ('\n');};return _egggf .String ();};func (_abbdf *BitmapsArray )GetBitmaps (i int )(*Bitmaps ,error ){const _gadf ="\u0042\u0069\u0074ma\u0070\u0073\u0041\u0072\u0072\u0061\u0079\u002e\u0047\u0065\u0074\u0042\u0069\u0074\u006d\u0061\u0070\u0073";
if _abbdf ==nil {return nil ,_ab .Error (_gadf ,"p\u0072\u006f\u0076\u0069\u0064\u0065d\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074m\u0061\u0070\u0073A\u0072r\u0061\u0079\u0027");};if i > len (_abbdf .Values )-1{return nil ,_ab .Errorf (_gadf ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _abbdf .Values [i ],nil ;};func (_aaf *Bitmap )SetDefaultPixel (){for _daf :=range _aaf .Data {_aaf .Data [_daf ]=byte (0xff);};};func CorrelationScore (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab []int )(_ffg float64 ,_defc error ){const _gdbf ="\u0063\u006fr\u0072\u0065\u006ca\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065";
if bm1 ==nil ||bm2 ==nil {return 0,_ab .Error (_gdbf ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0062\u0069\u0074ma\u0070\u0073");};if tab ==nil {return 0,_ab .Error (_gdbf ,"\u0027\u0074\u0061\u0062\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");
};if area1 <=0||area2 <=0{return 0,_ab .Error (_gdbf ,"\u0061\u0072\u0065\u0061s\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0067r\u0065a\u0074\u0065\u0072\u0020\u0074\u0068\u0061n\u0020\u0030");};_bbcff ,_abbe :=bm1 .Width ,bm1 .Height ;_ceff ,_bbgf :=bm2 .Width ,bm2 .Height ;
_cacb :=_aefg (_bbcff -_ceff );if _cacb > maxDiffW {return 0,nil ;};_gbdd :=_aefg (_abbe -_bbgf );if _gbdd > maxDiffH {return 0,nil ;};var _dfd ,_daea int ;if delX >=0{_dfd =int (delX +0.5);}else {_dfd =int (delX -0.5);};if delY >=0{_daea =int (delY +0.5);
}else {_daea =int (delY -0.5);};_eeaa :=_bccd (_daea ,0);_bbeg :=_bbee (_bbgf +_daea ,_abbe );_cedcf :=bm1 .RowStride *_eeaa ;_bgad :=bm2 .RowStride *(_eeaa -_daea );_gfde :=_bccd (_dfd ,0);_fgc :=_bbee (_ceff +_dfd ,_bbcff );_ebdcf :=bm2 .RowStride ;var _ebed ,_addd int ;
if _dfd >=8{_ebed =_dfd >>3;_cedcf +=_ebed ;_gfde -=_ebed <<3;_fgc -=_ebed <<3;_dfd &=7;}else if _dfd <=-8{_addd =-((_dfd +7)>>3);_bgad +=_addd ;_ebdcf -=_addd ;_dfd +=_addd <<3;};if _gfde >=_fgc ||_eeaa >=_bbeg {return 0,nil ;};_fcbe :=(_fgc +7)>>3;var (_afd ,_bgeb ,_fedg byte ;
_adbg ,_gegf ,_ebab int ;);switch {case _dfd ==0:for _ebab =_eeaa ;_ebab < _bbeg ;_ebab ,_cedcf ,_bgad =_ebab +1,_cedcf +bm1 .RowStride ,_bgad +bm2 .RowStride {for _gegf =0;_gegf < _fcbe ;_gegf ++{_fedg =bm1 .Data [_cedcf +_gegf ]&bm2 .Data [_bgad +_gegf ];
_adbg +=tab [_fedg ];};};case _dfd > 0:if _ebdcf < _fcbe {for _ebab =_eeaa ;_ebab < _bbeg ;_ebab ,_cedcf ,_bgad =_ebab +1,_cedcf +bm1 .RowStride ,_bgad +bm2 .RowStride {_afd ,_bgeb =bm1 .Data [_cedcf ],bm2 .Data [_bgad ]>>uint (_dfd );_fedg =_afd &_bgeb ;
_adbg +=tab [_fedg ];for _gegf =1;_gegf < _ebdcf ;_gegf ++{_afd ,_bgeb =bm1 .Data [_cedcf +_gegf ],(bm2 .Data [_bgad +_gegf ]>>uint (_dfd ))|(bm2 .Data [_bgad +_gegf -1]<<uint (8-_dfd ));_fedg =_afd &_bgeb ;_adbg +=tab [_fedg ];};_afd =bm1 .Data [_cedcf +_gegf ];
_bgeb =bm2 .Data [_bgad +_gegf -1]<<uint (8-_dfd );_fedg =_afd &_bgeb ;_adbg +=tab [_fedg ];};}else {for _ebab =_eeaa ;_ebab < _bbeg ;_ebab ,_cedcf ,_bgad =_ebab +1,_cedcf +bm1 .RowStride ,_bgad +bm2 .RowStride {_afd ,_bgeb =bm1 .Data [_cedcf ],bm2 .Data [_bgad ]>>uint (_dfd );
_fedg =_afd &_bgeb ;_adbg +=tab [_fedg ];for _gegf =1;_gegf < _fcbe ;_gegf ++{_afd =bm1 .Data [_cedcf +_gegf ];_bgeb =(bm2 .Data [_bgad +_gegf ]>>uint (_dfd ))|(bm2 .Data [_bgad +_gegf -1]<<uint (8-_dfd ));_fedg =_afd &_bgeb ;_adbg +=tab [_fedg ];};};};
default:if _fcbe < _ebdcf {for _ebab =_eeaa ;_ebab < _bbeg ;_ebab ,_cedcf ,_bgad =_ebab +1,_cedcf +bm1 .RowStride ,_bgad +bm2 .RowStride {for _gegf =0;_gegf < _fcbe ;_gegf ++{_afd =bm1 .Data [_cedcf +_gegf ];_bgeb =bm2 .Data [_bgad +_gegf ]<<uint (-_dfd );
_bgeb |=bm2 .Data [_bgad +_gegf +1]>>uint (8+_dfd );_fedg =_afd &_bgeb ;_adbg +=tab [_fedg ];};};}else {for _ebab =_eeaa ;_ebab < _bbeg ;_ebab ,_cedcf ,_bgad =_ebab +1,_cedcf +bm1 .RowStride ,_bgad +bm2 .RowStride {for _gegf =0;_gegf < _fcbe -1;_gegf ++{_afd =bm1 .Data [_cedcf +_gegf ];
_bgeb =bm2 .Data [_bgad +_gegf ]<<uint (-_dfd );_bgeb |=bm2 .Data [_bgad +_gegf +1]>>uint (8+_dfd );_fedg =_afd &_bgeb ;_adbg +=tab [_fedg ];};_afd =bm1 .Data [_cedcf +_gegf ];_bgeb =bm2 .Data [_bgad +_gegf ]<<uint (-_dfd );_fedg =_afd &_bgeb ;_adbg +=tab [_fedg ];
};};};_ffg =float64 (_adbg )*float64 (_adbg )/(float64 (area1 )*float64 (area2 ));return _ffg ,nil ;};func TstTSymbol (t *_f .T ,scale ...int )*Bitmap {_feaac ,_aabf :=NewWithData (5,5,[]byte {0xF8,0x20,0x20,0x20,0x20});_e .NoError (t ,_aabf );return TstGetScaledSymbol (t ,_feaac ,scale ...);
};type Bitmap struct{Width ,Height int ;BitmapNumber int ;RowStride int ;Data []byte ;Color Color ;Special int ;Text string ;XResolution ,YResolution int ;};func (_cbce *ClassedPoints )SortByX (){_cbce ._dcfd =_cbce .xSortFunction ();_cd .Sort (_cbce )};
func _gaagg (_ffef *Bitmap ,_ebfc *Bitmap ,_bfcfg int )(_deee error ){const _ccee ="\u0073\u0065\u0065\u0064\u0066\u0069\u006c\u006c\u0042\u0069\u006e\u0061r\u0079\u004c\u006f\u0077";_aedg :=_bbee (_ffef .Height ,_ebfc .Height );_gbaf :=_bbee (_ffef .RowStride ,_ebfc .RowStride );
switch _bfcfg {case 4:_deee =_gcce (_ffef ,_ebfc ,_aedg ,_gbaf );case 8:_deee =_deda (_ffef ,_ebfc ,_aedg ,_gbaf );default:return _ab .Errorf (_ccee ,"\u0063\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0034\u0020\u006fr\u0020\u0038\u0020\u002d\u0020i\u0073\u003a \u0027\u0025\u0064\u0027",_bfcfg );
};if _deee !=nil {return _ab .Wrap (_deee ,_ccee ,"");};return nil ;};func (_cgaf MorphProcess )verify (_cgfd int ,_ceeg ,_dgaf *int )error {const _dggb ="\u004d\u006f\u0072\u0070hP\u0072\u006f\u0063\u0065\u0073\u0073\u002e\u0076\u0065\u0072\u0069\u0066\u0079";
switch _cgaf .Operation {case MopDilation ,MopErosion ,MopOpening ,MopClosing :if len (_cgaf .Arguments )!=2{return _ab .Error (_dggb ,"\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0064\u0027\u002c\u0020\u0027\u0065\u0027\u002c \u0027\u006f\u0027\u002c\u0020\u0027\u0063\u0027\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0032\u0020\u0061r\u0067\u0075\u006d\u0065\u006et\u0073");
};_aagfg ,_acaed :=_cgaf .getWidthHeight ();if _aagfg <=0||_acaed <=0{return _ab .Error (_dggb ,"O\u0070er\u0061t\u0069o\u006e\u003a\u0020\u0027\u0064'\u002c\u0020\u0027e\u0027\u002c\u0020\u0027\u006f'\u002c\u0020\u0027c\u0027\u0020\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0062\u006f\u0074h w\u0069\u0064\u0074\u0068\u0020\u0061n\u0064\u0020\u0068\u0065\u0069\u0067\u0068\u0074\u0020\u0074\u006f\u0020b\u0065 \u003e\u003d\u0020\u0030");
};case MopRankBinaryReduction :_fdcc :=len (_cgaf .Arguments );*_ceeg +=_fdcc ;if _fdcc < 1||_fdcc > 4{return _ab .Error (_dggb ,"\u004f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0072\u0027\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u0031\u0020\u0061\u006e\u0064\u0020\u0061\u0074\u0020\u006d\u006fs\u0074\u0020\u0034\u0020\u0061\u0072g\u0075\u006d\u0065n\u0074\u0073");
};for _fegg :=0;_fegg < _fdcc ;_fegg ++{if _cgaf .Arguments [_fegg ]< 1||_cgaf .Arguments [_fegg ]> 4{return _ab .Error (_dggb ,"\u0052\u0061\u006e\u006b\u0042\u0069n\u0061\u0072\u0079\u0052\u0065\u0064\u0075\u0063\u0074\u0069\u006f\u006e\u0020\u006c\u0065\u0076\u0065\u006c\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065 \u00280\u002c\u0020\u0034\u003e");
};};case MopReplicativeBinaryExpansion :if len (_cgaf .Arguments )==0{return _ab .Error (_dggb ,"\u0052\u0065\u0070\u006c\u0069\u0063\u0061\u0074i\u0076\u0065\u0042in\u0061\u0072\u0079\u0045\u0078\u0070a\u006e\u0073\u0069\u006f\u006e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020o\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_efae :=_cgaf .Arguments [0];if _efae !=2&&_efae !=4&&_efae !=8{return _ab .Error (_dggb ,"R\u0065\u0070\u006c\u0069\u0063\u0061\u0074\u0069\u0076\u0065\u0042\u0069\u006e\u0061\u0072\u0079\u0045\u0078\u0070\u0061\u006e\u0073\u0069\u006f\u006e\u0020m\u0075s\u0074\u0020\u0062\u0065 \u006f\u0066 \u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u007b\u0032\u002c\u0034\u002c\u0038\u007d");
};*_ceeg -=_ddae [_efae /4];case MopAddBorder :if len (_cgaf .Arguments )==0{return _ab .Error (_dggb ,"\u0041\u0064\u0064B\u006f\u0072\u0064\u0065r\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_ebgb :=_cgaf .Arguments [0];if _cgfd > 0{return _ab .Error (_dggb ,"\u0041\u0064\u0064\u0042\u006f\u0072\u0064\u0065\u0072\u0020\u006d\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020f\u0069\u0072\u0073\u0074\u0020\u006d\u006f\u0072\u0070\u0068\u0020\u0070\u0072o\u0063\u0065\u0073\u0073");
};if _ebgb < 1{return _ab .Error (_dggb ,"\u0041\u0064\u0064\u0042o\u0072\u0064\u0065\u0072\u0020\u0076\u0061\u006c\u0075\u0065 \u006co\u0077\u0065\u0072\u0020\u0074\u0068\u0061n\u0020\u0030");};*_dgaf =_ebgb ;};return nil ;};func CorrelationScoreSimple (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab []int )(_bdb float64 ,_acae error ){const _gbda ="\u0043\u006f\u0072\u0072el\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0053\u0069\u006d\u0070l\u0065";
if bm1 ==nil ||bm2 ==nil {return _bdb ,_ab .Error (_gbda ,"n\u0069l\u0020\u0062\u0069\u0074\u006d\u0061\u0070\u0073 \u0070\u0072\u006f\u0076id\u0065\u0064");};if tab ==nil {return _bdb ,_ab .Error (_gbda ,"\u0074\u0061\u0062\u0020\u0075\u006e\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};if area1 ==0||area2 ==0{return _bdb ,_ab .Error (_gbda ,"\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0061\u0072e\u0061\u0073\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u003e\u0020\u0030");};_cgf ,_cbbf :=bm1 .Width ,bm1 .Height ;_fcg ,_bffb :=bm2 .Width ,bm2 .Height ;
if _aefg (_cgf -_fcg )> maxDiffW {return 0,nil ;};if _aefg (_cbbf -_bffb )> maxDiffH {return 0,nil ;};var _daedf ,_bfe int ;if delX >=0{_daedf =int (delX +0.5);}else {_daedf =int (delX -0.5);};if delY >=0{_bfe =int (delY +0.5);}else {_bfe =int (delY -0.5);
};_agbe :=bm1 .createTemplate ();if _acae =_agbe .RasterOperation (_daedf ,_bfe ,_fcg ,_bffb ,PixSrc ,bm2 ,0,0);_acae !=nil {return _bdb ,_ab .Wrap (_acae ,_gbda ,"\u0062m\u0032 \u0074\u006f\u0020\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065");};if _acae =_agbe .RasterOperation (0,0,_cgf ,_cbbf ,PixSrcAndDst ,bm1 ,0,0);
_acae !=nil {return _bdb ,_ab .Wrap (_acae ,_gbda ,"b\u006d\u0031\u0020\u0061\u006e\u0064\u0020\u0062\u006d\u0054");};_faec :=_agbe .countPixels ();_bdb =float64 (_faec )*float64 (_faec )/(float64 (area1 )*float64 (area2 ));return _bdb ,nil ;};func (_eeff *BitmapsArray )AddBox (box *_ce .Rectangle ){_eeff .Boxes =append (_eeff .Boxes ,box )};
func _deda (_gdcge ,_eeeae *Bitmap ,_bbgd ,_bdff int )(_gbbbe error ){const _gfcc ="\u0073e\u0065d\u0066\u0069\u006c\u006c\u0042i\u006e\u0061r\u0079\u004c\u006f\u0077\u0038";var (_fdadb ,_fgbf ,_dfccd ,_acgc int ;_ggebf ,_dcbg ,_bfee ,_agcd ,_ceegf ,_bdgd ,_cbfbc ,_daad byte ;
);for _fdadb =0;_fdadb < _bbgd ;_fdadb ++{_dfccd =_fdadb *_gdcge .RowStride ;_acgc =_fdadb *_eeeae .RowStride ;for _fgbf =0;_fgbf < _bdff ;_fgbf ++{if _ggebf ,_gbbbe =_gdcge .GetByte (_dfccd +_fgbf );_gbbbe !=nil {return _ab .Wrap (_gbbbe ,_gfcc ,"\u0067e\u0074 \u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");
};if _dcbg ,_gbbbe =_eeeae .GetByte (_acgc +_fgbf );_gbbbe !=nil {return _ab .Wrap (_gbbbe ,_gfcc ,"\u0067\u0065\u0074\u0020\u006d\u0061\u0073\u006b\u0020\u0062\u0079\u0074\u0065");};if _fdadb > 0{if _bfee ,_gbbbe =_gdcge .GetByte (_dfccd -_gdcge .RowStride +_fgbf );
_gbbbe !=nil {return _ab .Wrap (_gbbbe ,_gfcc ,"\u0069\u0020\u003e\u0020\u0030\u0020\u0062\u0079\u0074\u0065");};_ggebf |=_bfee |(_bfee <<1)|(_bfee >>1);if _fgbf > 0{if _daad ,_gbbbe =_gdcge .GetByte (_dfccd -_gdcge .RowStride +_fgbf -1);_gbbbe !=nil {return _ab .Wrap (_gbbbe ,_gfcc ,"\u0069\u0020\u003e\u00200 \u0026\u0026\u0020\u006a\u0020\u003e\u0020\u0030\u0020\u0062\u0079\u0074\u0065");
};_ggebf |=_daad <<7;};if _fgbf < _bdff -1{if _daad ,_gbbbe =_gdcge .GetByte (_dfccd -_gdcge .RowStride +_fgbf +1);_gbbbe !=nil {return _ab .Wrap (_gbbbe ,_gfcc ,"\u006a\u0020<\u0020\u0077\u0070l\u0020\u002d\u0020\u0031\u0020\u0062\u0079\u0074\u0065");
};_ggebf |=_daad >>7;};};if _fgbf > 0{if _agcd ,_gbbbe =_gdcge .GetByte (_dfccd +_fgbf -1);_gbbbe !=nil {return _ab .Wrap (_gbbbe ,_gfcc ,"\u006a\u0020\u003e \u0030");};_ggebf |=_agcd <<7;};_ggebf &=_dcbg ;if _ggebf ==0||^_ggebf ==0{if _gbbbe =_gdcge .SetByte (_dfccd +_fgbf ,_ggebf );
_gbbbe !=nil {return _ab .Wrap (_gbbbe ,_gfcc ,"\u0073e\u0074t\u0069\u006e\u0067\u0020\u0065m\u0070\u0074y\u0020\u0062\u0079\u0074\u0065");};};for {_cbfbc =_ggebf ;_ggebf =(_ggebf |(_ggebf >>1)|(_ggebf <<1))&_dcbg ;if (_ggebf ^_cbfbc )==0{if _gbbbe =_gdcge .SetByte (_dfccd +_fgbf ,_ggebf );
_gbbbe !=nil {return _ab .Wrap (_gbbbe ,_gfcc ,"\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0020\u0070\u0072\u0065\u0076 \u0062\u0079\u0074\u0065");};break ;};};};};for _fdadb =_bbgd -1;_fdadb >=0;_fdadb --{_dfccd =_fdadb *_gdcge .RowStride ;_acgc =_fdadb *_eeeae .RowStride ;
for _fgbf =_bdff -1;_fgbf >=0;_fgbf --{if _ggebf ,_gbbbe =_gdcge .GetByte (_dfccd +_fgbf );_gbbbe !=nil {return _ab .Wrap (_gbbbe ,_gfcc ,"\u0072\u0065\u0076er\u0073\u0065\u0020\u0067\u0065\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");
};if _dcbg ,_gbbbe =_eeeae .GetByte (_acgc +_fgbf );_gbbbe !=nil {return _ab .Wrap (_gbbbe ,_gfcc ,"r\u0065\u0076\u0065\u0072se\u0020g\u0065\u0074\u0020\u006d\u0061s\u006b\u0020\u0062\u0079\u0074\u0065");};if _fdadb < _bbgd -1{if _ceegf ,_gbbbe =_gdcge .GetByte (_dfccd +_gdcge .RowStride +_fgbf );
_gbbbe !=nil {return _ab .Wrap (_gbbbe ,_gfcc ,"\u0069\u0020\u003c\u0020h\u0020\u002d\u0020\u0031\u0020\u002d\u003e\u0020\u0067\u0065t\u0020s\u006f\u0075\u0072\u0063\u0065\u0020\u0062y\u0074\u0065");};_ggebf |=_ceegf |(_ceegf <<1)|_ceegf >>1;if _fgbf > 0{if _daad ,_gbbbe =_gdcge .GetByte (_dfccd +_gdcge .RowStride +_fgbf -1);
_gbbbe !=nil {return _ab .Wrap (_gbbbe ,_gfcc ,"\u0069\u0020\u003c h\u002d\u0031\u0020\u0026\u0020\u006a\u0020\u003e\u00200\u0020-\u003e \u0067e\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0062\u0079\u0074\u0065");};_ggebf |=_daad <<7;};if _fgbf < _bdff -1{if _daad ,_gbbbe =_gdcge .GetByte (_dfccd +_gdcge .RowStride +_fgbf +1);
_gbbbe !=nil {return _ab .Wrap (_gbbbe ,_gfcc ,"\u0069\u0020\u003c\u0020\u0068\u002d\u0031\u0020\u0026\u0026\u0020\u006a\u0020\u003c\u0077\u0070\u006c\u002d\u0031\u0020\u002d\u003e\u0020\u0067e\u0074\u0020\u0073\u006f\u0075r\u0063\u0065 \u0062\u0079\u0074\u0065");
};_ggebf |=_daad >>7;};};if _fgbf < _bdff -1{if _bdgd ,_gbbbe =_gdcge .GetByte (_dfccd +_fgbf +1);_gbbbe !=nil {return _ab .Wrap (_gbbbe ,_gfcc ,"\u006a\u0020<\u0020\u0077\u0070\u006c\u0020\u002d\u0031\u0020\u002d\u003e\u0020\u0067\u0065\u0074\u0020\u0073\u006f\u0075\u0072\u0063\u0065\u0020by\u0074\u0065");
};_ggebf |=_bdgd >>7;};_ggebf &=_dcbg ;if _ggebf ==0||(^_ggebf )==0{if _gbbbe =_gdcge .SetByte (_dfccd +_fgbf ,_ggebf );_gbbbe !=nil {return _ab .Wrap (_gbbbe ,_gfcc ,"\u0073e\u0074 \u006d\u0061\u0073\u006b\u0065\u0064\u0020\u0062\u0079\u0074\u0065");};
};for {_cbfbc =_ggebf ;_ggebf =(_ggebf |(_ggebf >>1)|(_ggebf <<1))&_dcbg ;if (_ggebf ^_cbfbc )==0{if _gbbbe =_gdcge .SetByte (_dfccd +_fgbf ,_ggebf );_gbbbe !=nil {return _ab .Wrap (_gbbbe ,_gfcc ,"r\u0065\u0076\u0065\u0072se\u0020s\u0065\u0074\u0020\u0070\u0072e\u0076\u0020\u0062\u0079\u0074\u0065");
};break ;};};};};return nil ;};func _ffgg ()[]int {_cdb :=make ([]int ,256);for _edfg :=0;_edfg <=0xff;_edfg ++{_bef :=byte (_edfg );_cdb [_bef ]=int (_bef &0x1)+(int (_bef >>1)&0x1)+(int (_bef >>2)&0x1)+(int (_bef >>3)&0x1)+(int (_bef >>4)&0x1)+(int (_bef >>5)&0x1)+(int (_bef >>6)&0x1)+(int (_bef >>7)&0x1);
};return _cdb ;};func _cdff (_dfbe ,_fgddg int ,_dffd string )*Selection {_bcgdf :=&Selection {Height :_dfbe ,Width :_fgddg ,Name :_dffd };_bcgdf .Data =make ([][]SelectionValue ,_dfbe );for _eeaee :=0;_eeaee < _dfbe ;_eeaee ++{_bcgdf .Data [_eeaee ]=make ([]SelectionValue ,_fgddg );
};return _bcgdf ;};func (_fbfcb *Bitmap )connComponentsBB (_gdffd int )(_efba *Boxes ,_geef error ){const _agcea ="\u0042\u0069\u0074ma\u0070\u002e\u0063\u006f\u006e\u006e\u0043\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u0042\u0042";if _gdffd !=4&&_gdffd !=8{return nil ,_ab .Error (_agcea ,"\u0063\u006f\u006e\u006e\u0065\u0063t\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u0027\u0034\u0027\u0020\u006fr\u0020\u0027\u0038\u0027");
};if _fbfcb .Zero (){return &Boxes {},nil ;};_fbfcb .setPadBits (0);_ecadb ,_geef :=_egec (nil ,_fbfcb );if _geef !=nil {return nil ,_ab .Wrap (_geef ,_agcea ,"\u0062\u006d\u0031");};_bdg :=&_d .Stack {};_bdg .Aux =&_d .Stack {};_efba =&Boxes {};var (_dbcd ,_eda int ;
_ecgb _ce .Point ;_dgbeb bool ;_abfb *_ce .Rectangle ;);for {if _ecgb ,_dgbeb ,_geef =_ecadb .nextOnPixel (_eda ,_dbcd );_geef !=nil {return nil ,_ab .Wrap (_geef ,_agcea ,"");};if !_dgbeb {break ;};if _abfb ,_geef =_abfe (_ecadb ,_bdg ,_ecgb .X ,_ecgb .Y ,_gdffd );
_geef !=nil {return nil ,_ab .Wrap (_geef ,_agcea ,"");};if _geef =_efba .Add (_abfb );_geef !=nil {return nil ,_ab .Wrap (_geef ,_agcea ,"");};_eda =_ecgb .X ;_dbcd =_ecgb .Y ;};return _efba ,nil ;};func (_ddbg *Bitmaps )SelectBySize (width ,height int ,tp LocationFilter ,relation SizeComparison )(_gbgd *Bitmaps ,_gdce error ){const _dfa ="B\u0069t\u006d\u0061\u0070\u0073\u002e\u0053\u0065\u006ce\u0063\u0074\u0042\u0079Si\u007a\u0065";
if _ddbg ==nil {return nil ,_ab .Error (_dfa ,"\u0027\u0062\u0027 B\u0069\u0074\u006d\u0061\u0070\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};switch tp {case LocSelectWidth ,LocSelectHeight ,LocSelectIfEither ,LocSelectIfBoth :default:return nil ,_ab .Errorf (_dfa ,"\u0070\u0072\u006f\u0076\u0069d\u0065\u0064\u0020\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006c\u006fc\u0061\u0074\u0069\u006f\u006e\u0020\u0066\u0069\u006c\u0074\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0064",tp );
};switch relation {case SizeSelectIfLT ,SizeSelectIfGT ,SizeSelectIfLTE ,SizeSelectIfGTE ,SizeSelectIfEQ :default:return nil ,_ab .Errorf (_dfa ,"\u0069\u006e\u0076\u0061li\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0027\u0025d\u0027",relation );
};_aafc ,_gdce :=_ddbg .makeSizeIndicator (width ,height ,tp ,relation );if _gdce !=nil {return nil ,_ab .Wrap (_gdce ,_dfa ,"");};_gbgd ,_gdce =_ddbg .selectByIndicator (_aafc );if _gdce !=nil {return nil ,_ab .Wrap (_gdce ,_dfa ,"");};return _gbgd ,nil ;
};func (_bfc *Bitmap )addBorderGeneral (_cfdd ,_bcba ,_gbf ,_acdd int ,_ebebc int )(*Bitmap ,error ){const _bdfc ="\u0061\u0064d\u0042\u006f\u0072d\u0065\u0072\u0047\u0065\u006e\u0065\u0072\u0061\u006c";if _cfdd < 0||_bcba < 0||_gbf < 0||_acdd < 0{return nil ,_ab .Error (_bdfc ,"n\u0065\u0067\u0061\u0074iv\u0065 \u0062\u006f\u0072\u0064\u0065r\u0020\u0061\u0064\u0064\u0065\u0064");
};_bgde ,_ded :=_bfc .Width ,_bfc .Height ;_cdag :=_bgde +_cfdd +_bcba ;_dbe :=_ded +_gbf +_acdd ;_ddc :=New (_cdag ,_dbe );_ddc .Color =_bfc .Color ;_ceee :=PixClr ;if _ebebc > 0{_ceee =PixSet ;};_cdcd :=_ddc .RasterOperation (0,0,_cfdd ,_dbe ,_ceee ,nil ,0,0);
if _cdcd !=nil {return nil ,_ab .Wrap (_cdcd ,_bdfc ,"\u006c\u0065\u0066\u0074");};_cdcd =_ddc .RasterOperation (_cdag -_bcba ,0,_bcba ,_dbe ,_ceee ,nil ,0,0);if _cdcd !=nil {return nil ,_ab .Wrap (_cdcd ,_bdfc ,"\u0072\u0069\u0067h\u0074");};_cdcd =_ddc .RasterOperation (0,0,_cdag ,_gbf ,_ceee ,nil ,0,0);
if _cdcd !=nil {return nil ,_ab .Wrap (_cdcd ,_bdfc ,"\u0074\u006f\u0070");};_cdcd =_ddc .RasterOperation (0,_dbe -_acdd ,_cdag ,_acdd ,_ceee ,nil ,0,0);if _cdcd !=nil {return nil ,_ab .Wrap (_cdcd ,_bdfc ,"\u0062\u006f\u0074\u0074\u006f\u006d");};_cdcd =_ddc .RasterOperation (_cfdd ,_gbf ,_bgde ,_ded ,PixSrc ,_bfc ,0,0);
if _cdcd !=nil {return nil ,_ab .Wrap (_cdcd ,_bdfc ,"\u0063\u006f\u0070\u0079");};return _ddc ,nil ;};func (_acde *byWidth )Less (i ,j int )bool {return _acde .Values [i ].Width < _acde .Values [j ].Width };func (_edea *Bitmap )inverseData (){if _ccbe :=_edea .RasterOperation (0,0,_edea .Width ,_edea .Height ,PixNotDst ,nil ,0,0);
_ccbe !=nil {_g .Log .Debug ("\u0049n\u0076\u0065\u0072\u0073e\u0020\u0064\u0061\u0074\u0061 \u0066a\u0069l\u0065\u0064\u003a\u0020\u0027\u0025\u0076'",_ccbe );};if _edea .Color ==Chocolate {_edea .Color =Vanilla ;}else {_edea .Color =Chocolate ;};};func _ddbd (_fcbc ,_dcbd ,_fcff *Bitmap )(*Bitmap ,error ){const _dbaf ="\u0073\u0075\u0062\u0074\u0072\u0061\u0063\u0074";
if _dcbd ==nil {return nil ,_ab .Error (_dbaf ,"'\u0073\u0031\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};if _fcff ==nil {return nil ,_ab .Error (_dbaf ,"'\u0073\u0032\u0027\u0020\u0069\u0073\u0020\u006e\u0069\u006c");};var _bceg error ;switch {case _fcbc ==_dcbd :if _bceg =_fcbc .RasterOperation (0,0,_dcbd .Width ,_dcbd .Height ,PixNotSrcAndDst ,_fcff ,0,0);
_bceg !=nil {return nil ,_ab .Wrap (_bceg ,_dbaf ,"\u0064 \u003d\u003d\u0020\u0073\u0031");};case _fcbc ==_fcff :if _bceg =_fcbc .RasterOperation (0,0,_dcbd .Width ,_dcbd .Height ,PixNotSrcAndDst ,_dcbd ,0,0);_bceg !=nil {return nil ,_ab .Wrap (_bceg ,_dbaf ,"\u0064 \u003d\u003d\u0020\u0073\u0032");
};default:_fcbc ,_bceg =_egec (_fcbc ,_dcbd );if _bceg !=nil {return nil ,_ab .Wrap (_bceg ,_dbaf ,"");};if _bceg =_fcbc .RasterOperation (0,0,_dcbd .Width ,_dcbd .Height ,PixNotSrcAndDst ,_fcff ,0,0);_bceg !=nil {return nil ,_ab .Wrap (_bceg ,_dbaf ,"\u0064e\u0066\u0061\u0075\u006c\u0074");
};};return _fcbc ,nil ;};func (_dadf *Bitmaps )selectByIndicator (_ggbe *_d .NumSlice )(_dfaf *Bitmaps ,_fccaf error ){const _eefb ="\u0042i\u0074\u006d\u0061\u0070s\u002e\u0073\u0065\u006c\u0065c\u0074B\u0079I\u006e\u0064\u0069\u0063\u0061\u0074\u006fr";
if _dadf ==nil {return nil ,_ab .Error (_eefb ,"\u0027\u0062\u0027 b\u0069\u0074\u006d\u0061\u0070\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if _ggbe ==nil {return nil ,_ab .Error (_eefb ,"'\u006e\u0061\u0027\u0020\u0069\u006ed\u0069\u0063\u0061\u0074\u006f\u0072\u0073\u0020\u006eo\u0074\u0020\u0064e\u0066i\u006e\u0065\u0064");
};if len (_dadf .Values )==0{return _dadf ,nil ;};if len (*_ggbe )!=len (_dadf .Values ){return nil ,_ab .Errorf (_eefb ,"\u006ea\u0020\u006ce\u006e\u0067\u0074\u0068:\u0020\u0025\u0064,\u0020\u0069\u0073\u0020\u0064\u0069\u0066\u0066\u0065re\u006e\u0074\u0020t\u0068\u0061n\u0020\u0062\u0069\u0074\u006d\u0061p\u0073\u003a \u0025\u0064",len (*_ggbe ),len (_dadf .Values ));
};var _aadda ,_ggcd ,_gdec int ;for _ggcd =0;_ggcd < len (*_ggbe );_ggcd ++{if _aadda ,_fccaf =_ggbe .GetInt (_ggcd );_fccaf !=nil {return nil ,_ab .Wrap (_fccaf ,_eefb ,"f\u0069\u0072\u0073\u0074\u0020\u0063\u0068\u0065\u0063\u006b");};if _aadda ==1{_gdec ++;
};};if _gdec ==len (_dadf .Values ){return _dadf ,nil ;};_dfaf =&Bitmaps {};_fdgfd :=len (_dadf .Values )==len (_dadf .Boxes );for _ggcd =0;_ggcd < len (*_ggbe );_ggcd ++{if _aadda =int ((*_ggbe )[_ggcd ]);_aadda ==0{continue ;};_dfaf .Values =append (_dfaf .Values ,_dadf .Values [_ggcd ]);
if _fdgfd {_dfaf .Boxes =append (_dfaf .Boxes ,_dadf .Boxes [_ggcd ]);};};return _dfaf ,nil ;};func TstESymbol (t *_f .T ,scale ...int )*Bitmap {_eeafg ,_baega :=NewWithData (4,5,[]byte {0xF0,0x80,0xE0,0x80,0xF0});_e .NoError (t ,_baega );return TstGetScaledSymbol (t ,_eeafg ,scale ...);
};func MakePixelSumTab8 ()[]int {return _ffgg ()};func Rect (x ,y ,w ,h int )(*_ce .Rectangle ,error ){const _gaaf ="b\u0069\u0074\u006d\u0061\u0070\u002e\u0052\u0065\u0063\u0074";if x < 0{w +=x ;x =0;if w <=0{return nil ,_ab .Errorf (_gaaf ,"x\u003a\u0027\u0025\u0064\u0027\u0020<\u0020\u0030\u0020\u0061\u006e\u0064\u0020\u0077\u003a \u0027\u0025\u0064'\u0020<\u003d\u0020\u0030",x ,w );
};};if y < 0{h +=y ;y =0;if h <=0{return nil ,_ab .Error (_gaaf ,"\u0079\u0020\u003c 0\u0020\u0061\u006e\u0064\u0020\u0062\u006f\u0078\u0020\u006f\u0066\u0066\u0020\u002b\u0071\u0075\u0061\u0064");};};_aebg :=_ce .Rect (x ,y ,x +w ,y +h );return &_aebg ,nil ;
};func Centroid (bm *Bitmap ,centTab ,sumTab []int )(Point ,error ){return bm .centroid (centTab ,sumTab )};func CorrelationScoreThresholded (bm1 ,bm2 *Bitmap ,area1 ,area2 int ,delX ,delY float32 ,maxDiffW ,maxDiffH int ,tab ,downcount []int ,scoreThreshold float32 )(bool ,error ){const _cbfg ="C\u006f\u0072\u0072\u0065\u006c\u0061t\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054h\u0072\u0065\u0073h\u006fl\u0064\u0065\u0064";
if bm1 ==nil {return false ,_ab .Error (_cbfg ,"\u0063\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u0062\u006d1\u0020\u0069s\u0020\u006e\u0069\u006c");
};if bm2 ==nil {return false ,_ab .Error (_cbfg ,"\u0063\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0053\u0063\u006f\u0072\u0065\u0054\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u0062\u006d2\u0020\u0069s\u0020\u006e\u0069\u006c");
};if area1 <=0||area2 <=0{return false ,_ab .Error (_cbfg ,"c\u006f\u0072\u0072\u0065\u006c\u0061\u0074\u0069\u006fn\u0053\u0063\u006f\u0072\u0065\u0054\u0068re\u0073\u0068\u006f\u006cd\u0065\u0064\u0020\u002d\u0020\u0061\u0072\u0065\u0061s \u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u003e\u0020\u0030");
};if downcount ==nil {return false ,_ab .Error (_cbfg ,"\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u006e\u006f\u0020\u0027\u0064\u006f\u0077\u006e\u0063\u006f\u0075\u006e\u0074\u0027");};if tab ==nil {return false ,_ab .Error (_cbfg ,"p\u0072\u006f\u0076\u0069de\u0064 \u006e\u0069\u006c\u0020\u0027s\u0075\u006d\u0074\u0061\u0062\u0027");
};_dfbgd ,_ffcc :=bm1 .Width ,bm1 .Height ;_agceac ,_dbag :=bm2 .Width ,bm2 .Height ;if _d .Abs (_dfbgd -_agceac )> maxDiffW {return false ,nil ;};if _d .Abs (_ffcc -_dbag )> maxDiffH {return false ,nil ;};_affca :=int (delX +_d .Sign (delX )*0.5);_cbfb :=int (delY +_d .Sign (delY )*0.5);
_bgfb :=int (_cdd .Ceil (_cdd .Sqrt (float64 (scoreThreshold )*float64 (area1 )*float64 (area2 ))));_faeae :=bm2 .RowStride ;_ecfg :=_bccd (_cbfb ,0);_fgad :=_bbee (_dbag +_cbfb ,_ffcc );_adcg :=bm1 .RowStride *_ecfg ;_gdbg :=bm2 .RowStride *(_ecfg -_cbfb );
var _dfca int ;if _fgad <=_ffcc {_dfca =downcount [_fgad -1];};_dfdb :=_bccd (_affca ,0);_ffcde :=_bbee (_agceac +_affca ,_dfbgd );var _ccbd ,_geda int ;if _affca >=8{_ccbd =_affca >>3;_adcg +=_ccbd ;_dfdb -=_ccbd <<3;_ffcde -=_ccbd <<3;_affca &=7;}else if _affca <=-8{_geda =-((_affca +7)>>3);
_gdbg +=_geda ;_faeae -=_geda ;_affca +=_geda <<3;};var (_fadc ,_dggd ,_ccfcd int ;_caab ,_cebg ,_dfcd byte ;);if _dfdb >=_ffcde ||_ecfg >=_fgad {return false ,nil ;};_aaaf :=(_ffcde +7)>>3;switch {case _affca ==0:for _dggd =_ecfg ;_dggd < _fgad ;_dggd ,_adcg ,_gdbg =_dggd +1,_adcg +bm1 .RowStride ,_gdbg +bm2 .RowStride {for _ccfcd =0;
_ccfcd < _aaaf ;_ccfcd ++{_caab =bm1 .Data [_adcg +_ccfcd ]&bm2 .Data [_gdbg +_ccfcd ];_fadc +=tab [_caab ];};if _fadc >=_bgfb {return true ,nil ;};if _faac :=_fadc +downcount [_dggd ]-_dfca ;_faac < _bgfb {return false ,nil ;};};case _affca > 0&&_faeae < _aaaf :for _dggd =_ecfg ;
_dggd < _fgad ;_dggd ,_adcg ,_gdbg =_dggd +1,_adcg +bm1 .RowStride ,_gdbg +bm2 .RowStride {_cebg =bm1 .Data [_adcg ];_dfcd =bm2 .Data [_gdbg ]>>uint (_affca );_caab =_cebg &_dfcd ;_fadc +=tab [_caab ];for _ccfcd =1;_ccfcd < _faeae ;_ccfcd ++{_cebg =bm1 .Data [_adcg +_ccfcd ];
_dfcd =bm2 .Data [_gdbg +_ccfcd ]>>uint (_affca )|bm2 .Data [_gdbg +_ccfcd -1]<<uint (8-_affca );_caab =_cebg &_dfcd ;_fadc +=tab [_caab ];};_cebg =bm1 .Data [_adcg +_ccfcd ];_dfcd =bm2 .Data [_gdbg +_ccfcd -1]<<uint (8-_affca );_caab =_cebg &_dfcd ;_fadc +=tab [_caab ];
if _fadc >=_bgfb {return true ,nil ;}else if _fadc +downcount [_dggd ]-_dfca < _bgfb {return false ,nil ;};};case _affca > 0&&_faeae >=_aaaf :for _dggd =_ecfg ;_dggd < _fgad ;_dggd ,_adcg ,_gdbg =_dggd +1,_adcg +bm1 .RowStride ,_gdbg +bm2 .RowStride {_cebg =bm1 .Data [_adcg ];
_dfcd =bm2 .Data [_gdbg ]>>uint (_affca );_caab =_cebg &_dfcd ;_fadc +=tab [_caab ];for _ccfcd =1;_ccfcd < _aaaf ;_ccfcd ++{_cebg =bm1 .Data [_adcg +_ccfcd ];_dfcd =bm2 .Data [_gdbg +_ccfcd ]>>uint (_affca );_dfcd |=bm2 .Data [_gdbg +_ccfcd -1]<<uint (8-_affca );
_caab =_cebg &_dfcd ;_fadc +=tab [_caab ];};if _fadc >=_bgfb {return true ,nil ;}else if _fadc +downcount [_dggd ]-_dfca < _bgfb {return false ,nil ;};};case _aaaf < _faeae :for _dggd =_ecfg ;_dggd < _fgad ;_dggd ,_adcg ,_gdbg =_dggd +1,_adcg +bm1 .RowStride ,_gdbg +bm2 .RowStride {for _ccfcd =0;
_ccfcd < _aaaf ;_ccfcd ++{_cebg =bm1 .Data [_adcg +_ccfcd ];_dfcd =bm2 .Data [_gdbg +_ccfcd ]<<uint (-_affca );_dfcd |=bm2 .Data [_gdbg +_ccfcd +1]>>uint (8+_affca );_caab =_cebg &_dfcd ;_fadc +=tab [_caab ];};if _fadc >=_bgfb {return true ,nil ;}else if _adbd :=_fadc +downcount [_dggd ]-_dfca ;
_adbd < _bgfb {return false ,nil ;};};case _faeae >=_aaaf :for _dggd =_ecfg ;_dggd < _fgad ;_dggd ,_adcg ,_gdbg =_dggd +1,_adcg +bm1 .RowStride ,_gdbg +bm2 .RowStride {for _ccfcd =0;_ccfcd < _aaaf ;_ccfcd ++{_cebg =bm1 .Data [_adcg +_ccfcd ];_dfcd =bm2 .Data [_gdbg +_ccfcd ]<<uint (-_affca );
_dfcd |=bm2 .Data [_gdbg +_ccfcd +1]>>uint (8+_affca );_caab =_cebg &_dfcd ;_fadc +=tab [_caab ];};_cebg =bm1 .Data [_adcg +_ccfcd ];_dfcd =bm2 .Data [_gdbg +_ccfcd ]<<uint (-_affca );_caab =_cebg &_dfcd ;_fadc +=tab [_caab ];if _fadc >=_bgfb {return true ,nil ;
}else if _fadc +downcount [_dggd ]-_dfca < _bgfb {return false ,nil ;};};};_gaca :=float32 (_fadc )*float32 (_fadc )/(float32 (area1 )*float32 (area2 ));if _gaca >=scoreThreshold {_g .Log .Trace ("\u0063\u006f\u0075\u006e\u0074\u003a\u0020\u0025\u0064\u0020\u003c\u0020\u0074\u0068\u0072\u0065\u0073\u0068\u006f\u006cd\u0020\u0025\u0064\u0020\u0062\u0075\u0074\u0020\u0073c\u006f\u0072\u0065\u0020\u0025\u0066\u0020\u003e\u003d\u0020\u0073\u0063\u006fr\u0065\u0054\u0068\u0072\u0065\u0073h\u006f\u006c\u0064 \u0025\u0066",_fadc ,_bgfb ,_gaca ,scoreThreshold );
};return false ,nil ;};func _dadb (_dga ,_cac *Bitmap ,_dgb int ,_aagg []byte ,_fec int )(_aaad error ){const _aage ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0032\u004c\u0065\u0076\u0065\u006c\u0032";var (_gdc ,_bbd ,_fgee ,_gge ,_gbe ,_acd ,_ace ,_dbf int ;
_fc ,_fee ,_gcc ,_gee uint32 ;_dae ,_fab byte ;_bgd uint16 ;);_cda :=make ([]byte ,4);_bcf :=make ([]byte ,4);for _fgee =0;_fgee < _dga .Height -1;_fgee ,_gge =_fgee +2,_gge +1{_gdc =_fgee *_dga .RowStride ;_bbd =_gge *_cac .RowStride ;for _gbe ,_acd =0,0;
_gbe < _fec ;_gbe ,_acd =_gbe +4,_acd +1{for _ace =0;_ace < 4;_ace ++{_dbf =_gdc +_gbe +_ace ;if _dbf <=len (_dga .Data )-1&&_dbf < _gdc +_dga .RowStride {_cda [_ace ]=_dga .Data [_dbf ];}else {_cda [_ace ]=0x00;};_dbf =_gdc +_dga .RowStride +_gbe +_ace ;
if _dbf <=len (_dga .Data )-1&&_dbf < _gdc +(2*_dga .RowStride ){_bcf [_ace ]=_dga .Data [_dbf ];}else {_bcf [_ace ]=0x00;};};_fc =_eb .BigEndian .Uint32 (_cda );_fee =_eb .BigEndian .Uint32 (_bcf );_gcc =_fc &_fee ;_gcc |=_gcc <<1;_gee =_fc |_fee ;_gee &=_gee <<1;
_fee =_gcc |_gee ;_fee &=0xaaaaaaaa;_fc =_fee |(_fee <<7);_dae =byte (_fc >>24);_fab =byte ((_fc >>8)&0xff);_dbf =_bbd +_acd ;if _dbf +1==len (_cac .Data )-1||_dbf +1>=_bbd +_cac .RowStride {if _aaad =_cac .SetByte (_dbf ,_aagg [_dae ]);_aaad !=nil {return _ab .Wrapf (_aaad ,_aage ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0025d",_dbf );
};}else {_bgd =(uint16 (_aagg [_dae ])<<8)|uint16 (_aagg [_fab ]);if _aaad =_cac .setTwoBytes (_dbf ,_bgd );_aaad !=nil {return _ab .Wrapf (_aaad ,_aage ,"s\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0077\u006f\u0020\u0062\u0079t\u0065\u0073\u0020\u0066\u0061\u0069\u006ce\u0064\u002c\u0020\u0069\u006e\u0064\u0065\u0078\u003a\u0020%\u0064",_dbf );
};_acd ++;};};};return nil ;};func (_egeg *Bitmap )setAll ()error {_dgga :=_debgc (_egeg ,0,0,_egeg .Width ,_egeg .Height ,PixSet ,nil ,0,0);if _dgga !=nil {return _ab .Wrap (_dgga ,"\u0073\u0065\u0074\u0041\u006c\u006c","");};return nil ;};func _fcfg (_cgbf *Bitmap ,_cfgd int )(*Bitmap ,error ){const _ecgbe ="\u0065x\u0070a\u006e\u0064\u0052\u0065\u0070\u006c\u0069\u0063\u0061\u0074\u0065";
if _cgbf ==nil {return nil ,_ab .Error (_ecgbe ,"\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");};if _cfgd <=0{return nil ,_ab .Error (_ecgbe ,"i\u006e\u0076\u0061\u006cid\u0020f\u0061\u0063\u0074\u006f\u0072 \u002d\u0020\u003c\u003d\u0020\u0030");
};if _cfgd ==1{_adfcb ,_edac :=_egec (nil ,_cgbf );if _edac !=nil {return nil ,_ab .Wrap (_edac ,_ecgbe ,"\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u003d\u0020\u0031");};return _adfcb ,nil ;};_ggff ,_gece :=_bce (_cgbf ,_cfgd ,_cfgd );if _gece !=nil {return nil ,_ab .Wrap (_gece ,_ecgbe ,"");
};return _ggff ,nil ;};type MorphOperation int ;func (_dgdc MorphProcess )getWidthHeight ()(_fbbg ,_cbgfb int ){return _dgdc .Arguments [0],_dgdc .Arguments [1];};func (_bdee *Boxes )Add (box *_ce .Rectangle )error {if _bdee ==nil {return _ab .Error ("\u0042o\u0078\u0065\u0073\u002e\u0041\u0064d","\u0027\u0042\u006f\u0078es\u0027\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
};*_bdee =append (*_bdee ,box );return nil ;};func (_cbfd *BitmapsArray )AddBitmaps (bm *Bitmaps ){_cbfd .Values =append (_cbfd .Values ,bm )};func TstRSymbol (t *_f .T ,scale ...int )*Bitmap {_acaec ,_bdafe :=NewWithData (4,5,[]byte {0xF0,0x90,0xF0,0xA0,0x90});
_e .NoError (t ,_bdafe );return TstGetScaledSymbol (t ,_acaec ,scale ...);};func _ffcg (_bcbd *Bitmap ,_gaeb ,_eagaf ,_afcd ,_dac int ,_dbfb RasterOperator ,_dggg *Bitmap ,_bbged ,_ggb int )error {var (_fbd bool ;_gebd bool ;_dddae int ;_eggg int ;_abbee int ;
_dfbb bool ;_ffbd byte ;_cefd int ;_ffga int ;_efeb int ;_dacg ,_abef int ;);_eddf :=8-(_gaeb &7);_gbged :=_aaecc [_eddf ];_dbegc :=_bcbd .RowStride *_eagaf +(_gaeb >>3);_gffc :=_dggg .RowStride *_ggb +(_bbged >>3);if _afcd < _eddf {_fbd =true ;_gbged &=_cgde [8-_eddf +_afcd ];
};if !_fbd {_dddae =(_afcd -_eddf )>>3;if _dddae > 0{_gebd =true ;_eggg =_dbegc +1;_abbee =_gffc +1;};};_cefd =(_gaeb +_afcd )&7;if !(_fbd ||_cefd ==0){_dfbb =true ;_ffbd =_cgde [_cefd ];_ffga =_dbegc +1+_dddae ;_efeb =_gffc +1+_dddae ;};switch _dbfb {case PixSrc :for _dacg =0;
_dacg < _dac ;_dacg ++{_bcbd .Data [_dbegc ]=_bbbfe (_bcbd .Data [_dbegc ],_dggg .Data [_gffc ],_gbged );_dbegc +=_bcbd .RowStride ;_gffc +=_dggg .RowStride ;};if _gebd {for _dacg =0;_dacg < _dac ;_dacg ++{for _abef =0;_abef < _dddae ;_abef ++{_bcbd .Data [_eggg +_abef ]=_dggg .Data [_abbee +_abef ];
};_eggg +=_bcbd .RowStride ;_abbee +=_dggg .RowStride ;};};if _dfbb {for _dacg =0;_dacg < _dac ;_dacg ++{_bcbd .Data [_ffga ]=_bbbfe (_bcbd .Data [_ffga ],_dggg .Data [_efeb ],_ffbd );_ffga +=_bcbd .RowStride ;_efeb +=_dggg .RowStride ;};};case PixNotSrc :for _dacg =0;
_dacg < _dac ;_dacg ++{_bcbd .Data [_dbegc ]=_bbbfe (_bcbd .Data [_dbegc ],^_dggg .Data [_gffc ],_gbged );_dbegc +=_bcbd .RowStride ;_gffc +=_dggg .RowStride ;};if _gebd {for _dacg =0;_dacg < _dac ;_dacg ++{for _abef =0;_abef < _dddae ;_abef ++{_bcbd .Data [_eggg +_abef ]=^_dggg .Data [_abbee +_abef ];
};_eggg +=_bcbd .RowStride ;_abbee +=_dggg .RowStride ;};};if _dfbb {for _dacg =0;_dacg < _dac ;_dacg ++{_bcbd .Data [_ffga ]=_bbbfe (_bcbd .Data [_ffga ],^_dggg .Data [_efeb ],_ffbd );_ffga +=_bcbd .RowStride ;_efeb +=_dggg .RowStride ;};};case PixSrcOrDst :for _dacg =0;
_dacg < _dac ;_dacg ++{_bcbd .Data [_dbegc ]=_bbbfe (_bcbd .Data [_dbegc ],_dggg .Data [_gffc ]|_bcbd .Data [_dbegc ],_gbged );_dbegc +=_bcbd .RowStride ;_gffc +=_dggg .RowStride ;};if _gebd {for _dacg =0;_dacg < _dac ;_dacg ++{for _abef =0;_abef < _dddae ;
_abef ++{_bcbd .Data [_eggg +_abef ]|=_dggg .Data [_abbee +_abef ];};_eggg +=_bcbd .RowStride ;_abbee +=_dggg .RowStride ;};};if _dfbb {for _dacg =0;_dacg < _dac ;_dacg ++{_bcbd .Data [_ffga ]=_bbbfe (_bcbd .Data [_ffga ],_dggg .Data [_efeb ]|_bcbd .Data [_ffga ],_ffbd );
_ffga +=_bcbd .RowStride ;_efeb +=_dggg .RowStride ;};};case PixSrcAndDst :for _dacg =0;_dacg < _dac ;_dacg ++{_bcbd .Data [_dbegc ]=_bbbfe (_bcbd .Data [_dbegc ],_dggg .Data [_gffc ]&_bcbd .Data [_dbegc ],_gbged );_dbegc +=_bcbd .RowStride ;_gffc +=_dggg .RowStride ;
};if _gebd {for _dacg =0;_dacg < _dac ;_dacg ++{for _abef =0;_abef < _dddae ;_abef ++{_bcbd .Data [_eggg +_abef ]&=_dggg .Data [_abbee +_abef ];};_eggg +=_bcbd .RowStride ;_abbee +=_dggg .RowStride ;};};if _dfbb {for _dacg =0;_dacg < _dac ;_dacg ++{_bcbd .Data [_ffga ]=_bbbfe (_bcbd .Data [_ffga ],_dggg .Data [_efeb ]&_bcbd .Data [_ffga ],_ffbd );
_ffga +=_bcbd .RowStride ;_efeb +=_dggg .RowStride ;};};case PixSrcXorDst :for _dacg =0;_dacg < _dac ;_dacg ++{_bcbd .Data [_dbegc ]=_bbbfe (_bcbd .Data [_dbegc ],_dggg .Data [_gffc ]^_bcbd .Data [_dbegc ],_gbged );_dbegc +=_bcbd .RowStride ;_gffc +=_dggg .RowStride ;
};if _gebd {for _dacg =0;_dacg < _dac ;_dacg ++{for _abef =0;_abef < _dddae ;_abef ++{_bcbd .Data [_eggg +_abef ]^=_dggg .Data [_abbee +_abef ];};_eggg +=_bcbd .RowStride ;_abbee +=_dggg .RowStride ;};};if _dfbb {for _dacg =0;_dacg < _dac ;_dacg ++{_bcbd .Data [_ffga ]=_bbbfe (_bcbd .Data [_ffga ],_dggg .Data [_efeb ]^_bcbd .Data [_ffga ],_ffbd );
_ffga +=_bcbd .RowStride ;_efeb +=_dggg .RowStride ;};};case PixNotSrcOrDst :for _dacg =0;_dacg < _dac ;_dacg ++{_bcbd .Data [_dbegc ]=_bbbfe (_bcbd .Data [_dbegc ],^(_dggg .Data [_gffc ])|_bcbd .Data [_dbegc ],_gbged );_dbegc +=_bcbd .RowStride ;_gffc +=_dggg .RowStride ;
};if _gebd {for _dacg =0;_dacg < _dac ;_dacg ++{for _abef =0;_abef < _dddae ;_abef ++{_bcbd .Data [_eggg +_abef ]|=^(_dggg .Data [_abbee +_abef ]);};_eggg +=_bcbd .RowStride ;_abbee +=_dggg .RowStride ;};};if _dfbb {for _dacg =0;_dacg < _dac ;_dacg ++{_bcbd .Data [_ffga ]=_bbbfe (_bcbd .Data [_ffga ],^(_dggg .Data [_efeb ])|_bcbd .Data [_ffga ],_ffbd );
_ffga +=_bcbd .RowStride ;_efeb +=_dggg .RowStride ;};};case PixNotSrcAndDst :for _dacg =0;_dacg < _dac ;_dacg ++{_bcbd .Data [_dbegc ]=_bbbfe (_bcbd .Data [_dbegc ],^(_dggg .Data [_gffc ])&_bcbd .Data [_dbegc ],_gbged );_dbegc +=_bcbd .RowStride ;_gffc +=_dggg .RowStride ;
};if _gebd {for _dacg =0;_dacg < _dac ;_dacg ++{for _abef =0;_abef < _dddae ;_abef ++{_bcbd .Data [_eggg +_abef ]&=^_dggg .Data [_abbee +_abef ];};_eggg +=_bcbd .RowStride ;_abbee +=_dggg .RowStride ;};};if _dfbb {for _dacg =0;_dacg < _dac ;_dacg ++{_bcbd .Data [_ffga ]=_bbbfe (_bcbd .Data [_ffga ],^(_dggg .Data [_efeb ])&_bcbd .Data [_ffga ],_ffbd );
_ffga +=_bcbd .RowStride ;_efeb +=_dggg .RowStride ;};};case PixSrcOrNotDst :for _dacg =0;_dacg < _dac ;_dacg ++{_bcbd .Data [_dbegc ]=_bbbfe (_bcbd .Data [_dbegc ],_dggg .Data [_gffc ]|^(_bcbd .Data [_dbegc ]),_gbged );_dbegc +=_bcbd .RowStride ;_gffc +=_dggg .RowStride ;
};if _gebd {for _dacg =0;_dacg < _dac ;_dacg ++{for _abef =0;_abef < _dddae ;_abef ++{_bcbd .Data [_eggg +_abef ]=_dggg .Data [_abbee +_abef ]|^(_bcbd .Data [_eggg +_abef ]);};_eggg +=_bcbd .RowStride ;_abbee +=_dggg .RowStride ;};};if _dfbb {for _dacg =0;
_dacg < _dac ;_dacg ++{_bcbd .Data [_ffga ]=_bbbfe (_bcbd .Data [_ffga ],_dggg .Data [_efeb ]|^(_bcbd .Data [_ffga ]),_ffbd );_ffga +=_bcbd .RowStride ;_efeb +=_dggg .RowStride ;};};case PixSrcAndNotDst :for _dacg =0;_dacg < _dac ;_dacg ++{_bcbd .Data [_dbegc ]=_bbbfe (_bcbd .Data [_dbegc ],_dggg .Data [_gffc ]&^(_bcbd .Data [_dbegc ]),_gbged );
_dbegc +=_bcbd .RowStride ;_gffc +=_dggg .RowStride ;};if _gebd {for _dacg =0;_dacg < _dac ;_dacg ++{for _abef =0;_abef < _dddae ;_abef ++{_bcbd .Data [_eggg +_abef ]=_dggg .Data [_abbee +_abef ]&^(_bcbd .Data [_eggg +_abef ]);};_eggg +=_bcbd .RowStride ;
_abbee +=_dggg .RowStride ;};};if _dfbb {for _dacg =0;_dacg < _dac ;_dacg ++{_bcbd .Data [_ffga ]=_bbbfe (_bcbd .Data [_ffga ],_dggg .Data [_efeb ]&^(_bcbd .Data [_ffga ]),_ffbd );_ffga +=_bcbd .RowStride ;_efeb +=_dggg .RowStride ;};};case PixNotPixSrcOrDst :for _dacg =0;
_dacg < _dac ;_dacg ++{_bcbd .Data [_dbegc ]=_bbbfe (_bcbd .Data [_dbegc ],^(_dggg .Data [_gffc ]|_bcbd .Data [_dbegc ]),_gbged );_dbegc +=_bcbd .RowStride ;_gffc +=_dggg .RowStride ;};if _gebd {for _dacg =0;_dacg < _dac ;_dacg ++{for _abef =0;_abef < _dddae ;
_abef ++{_bcbd .Data [_eggg +_abef ]=^(_dggg .Data [_abbee +_abef ]|_bcbd .Data [_eggg +_abef ]);};_eggg +=_bcbd .RowStride ;_abbee +=_dggg .RowStride ;};};if _dfbb {for _dacg =0;_dacg < _dac ;_dacg ++{_bcbd .Data [_ffga ]=_bbbfe (_bcbd .Data [_ffga ],^(_dggg .Data [_efeb ]|_bcbd .Data [_ffga ]),_ffbd );
_ffga +=_bcbd .RowStride ;_efeb +=_dggg .RowStride ;};};case PixNotPixSrcAndDst :for _dacg =0;_dacg < _dac ;_dacg ++{_bcbd .Data [_dbegc ]=_bbbfe (_bcbd .Data [_dbegc ],^(_dggg .Data [_gffc ]&_bcbd .Data [_dbegc ]),_gbged );_dbegc +=_bcbd .RowStride ;_gffc +=_dggg .RowStride ;
};if _gebd {for _dacg =0;_dacg < _dac ;_dacg ++{for _abef =0;_abef < _dddae ;_abef ++{_bcbd .Data [_eggg +_abef ]=^(_dggg .Data [_abbee +_abef ]&_bcbd .Data [_eggg +_abef ]);};_eggg +=_bcbd .RowStride ;_abbee +=_dggg .RowStride ;};};if _dfbb {for _dacg =0;
_dacg < _dac ;_dacg ++{_bcbd .Data [_ffga ]=_bbbfe (_bcbd .Data [_ffga ],^(_dggg .Data [_efeb ]&_bcbd .Data [_ffga ]),_ffbd );_ffga +=_bcbd .RowStride ;_efeb +=_dggg .RowStride ;};};case PixNotPixSrcXorDst :for _dacg =0;_dacg < _dac ;_dacg ++{_bcbd .Data [_dbegc ]=_bbbfe (_bcbd .Data [_dbegc ],^(_dggg .Data [_gffc ]^_bcbd .Data [_dbegc ]),_gbged );
_dbegc +=_bcbd .RowStride ;_gffc +=_dggg .RowStride ;};if _gebd {for _dacg =0;_dacg < _dac ;_dacg ++{for _abef =0;_abef < _dddae ;_abef ++{_bcbd .Data [_eggg +_abef ]=^(_dggg .Data [_abbee +_abef ]^_bcbd .Data [_eggg +_abef ]);};_eggg +=_bcbd .RowStride ;
_abbee +=_dggg .RowStride ;};};if _dfbb {for _dacg =0;_dacg < _dac ;_dacg ++{_bcbd .Data [_ffga ]=_bbbfe (_bcbd .Data [_ffga ],^(_dggg .Data [_efeb ]^_bcbd .Data [_ffga ]),_ffbd );_ffga +=_bcbd .RowStride ;_efeb +=_dggg .RowStride ;};};default:_g .Log .Debug ("I\u006e\u0076\u0061\u006c\u0069\u0064 \u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070e\u0072\u0061\u0074o\u0072:\u0020\u0025\u0064",_dbfb );
return _ab .Error ("\u0072\u0061\u0073\u0074er\u004f\u0070\u0056\u0041\u006c\u0069\u0067\u006e\u0065\u0064\u004c\u006f\u0077","\u0069\u006e\u0076al\u0069\u0064\u0020\u0072\u0061\u0073\u0074\u0065\u0072\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");
};return nil ;};func (_edc Points )GetGeometry (i int )(_acebg ,_agdag float32 ,_addda error ){if i > len (_edc )-1{return 0,0,_ab .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};_debg :=_edc [i ];return _debg .X ,_debg .Y ,nil ;};func (_gggb *Bitmaps )GroupByHeight ()(*BitmapsArray ,error ){const _ceed ="\u0047\u0072\u006f\u0075\u0070\u0042\u0079\u0048\u0065\u0069\u0067\u0068\u0074";if len (_gggb .Values )==0{return nil ,_ab .Error (_ceed ,"\u006eo\u0020v\u0061\u006c\u0075\u0065\u0073 \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");
};_ggga :=&BitmapsArray {};_gggb .SortByHeight ();_faadg :=-1;_afdae :=-1;for _abgaa :=0;_abgaa < len (_gggb .Values );_abgaa ++{_fbcg :=_gggb .Values [_abgaa ].Height ;if _fbcg > _faadg {_faadg =_fbcg ;_afdae ++;_ggga .Values =append (_ggga .Values ,&Bitmaps {});
};_ggga .Values [_afdae ].AddBitmap (_gggb .Values [_abgaa ]);};return _ggga ,nil ;};type ClassedPoints struct{*Points ;_d .IntSlice ;_dcfd func (_dadce ,_edaa int )bool ;};func _egec (_gecf ,_agcb *Bitmap )(*Bitmap ,error ){if _agcb ==nil {return nil ,_ab .Error ("\u0063\u006f\u0070\u0079\u0042\u0069\u0074\u006d\u0061\u0070","\u0073o\u0075r\u0063\u0065\u0020\u006e\u006ft\u0020\u0064e\u0066\u0069\u006e\u0065\u0064");
};if _agcb ==_gecf {return _gecf ,nil ;};if _gecf ==nil {_gecf =_agcb .createTemplate ();copy (_gecf .Data ,_agcb .Data );return _gecf ,nil ;};_dffb :=_gecf .resizeImageData (_agcb );if _dffb !=nil {return nil ,_ab .Wrap (_dffb ,"\u0063\u006f\u0070\u0079\u0042\u0069\u0074\u006d\u0061\u0070","");
};_gecf .Text =_agcb .Text ;copy (_gecf .Data ,_agcb .Data );return _gecf ,nil ;};func _gdff (_ddf ,_gda *Bitmap ,_ccdf CombinationOperator )*Bitmap {_dgfa :=New (_ddf .Width ,_ddf .Height );for _gdeda :=0;_gdeda < len (_dgfa .Data );_gdeda ++{_dgfa .Data [_gdeda ]=_becb (_ddf .Data [_gdeda ],_gda .Data [_gdeda ],_ccdf );
};return _dgfa ;};func _cgga (_gaeg uint ,_bcdb byte )byte {return _bcdb >>_gaeg <<_gaeg };func _bbdb (_fbgfc ,_bfba *Bitmap ,_bgfbc ,_fcbg int )(*Bitmap ,error ){const _dagb ="d\u0069\u006c\u0061\u0074\u0065\u0042\u0072\u0069\u0063\u006b";if _bfba ==nil {_g .Log .Debug ("\u0064\u0069\u006c\u0061\u0074\u0065\u0042\u0072\u0069\u0063k\u0020\u0073\u006f\u0075\u0072\u0063\u0065 \u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");
return nil ,_ab .Error (_dagb ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if _bgfbc < 1||_fcbg < 1{return nil ,_ab .Error (_dagb ,"\u0068\u0053\u007a\u0069\u0065 \u0061\u006e\u0064\u0020\u0076\u0053\u0069\u007a\u0065\u0020\u0061\u0072\u0065 \u006e\u006f\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0031");
};if _bgfbc ==1&&_fcbg ==1{_fdfa ,_gbcc :=_egec (_fbgfc ,_bfba );if _gbcc !=nil {return nil ,_ab .Wrap (_gbcc ,_dagb ,"\u0068S\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u0026\u0026 \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _fdfa ,nil ;};if _bgfbc ==1||_fcbg ==1{_cddf :=SelCreateBrick (_fcbg ,_bgfbc ,_fcbg /2,_bgfbc /2,SelHit );_ebdb ,_gaafg :=_bdefe (_fbgfc ,_bfba ,_cddf );if _gaafg !=nil {return nil ,_ab .Wrap (_gaafg ,_dagb ,"\u0068s\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031\u0020\u007c\u007c \u0076\u0053\u0069\u007a\u0065\u0020\u003d\u003d\u0020\u0031");
};return _ebdb ,nil ;};_gbed :=SelCreateBrick (1,_bgfbc ,0,_bgfbc /2,SelHit );_cdef :=SelCreateBrick (_fcbg ,1,_fcbg /2,0,SelHit );_eecb ,_bgbd :=_bdefe (nil ,_bfba ,_gbed );if _bgbd !=nil {return nil ,_ab .Wrap (_bgbd ,_dagb ,"\u0031\u0073\u0074\u0020\u0064\u0069\u006c\u0061\u0074\u0065");
};_fbgfc ,_bgbd =_bdefe (_fbgfc ,_eecb ,_cdef );if _bgbd !=nil {return nil ,_ab .Wrap (_bgbd ,_dagb ,"\u0032\u006e\u0064\u0020\u0064\u0069\u006c\u0061\u0074\u0065");};return _fbgfc ,nil ;};func _eccd (_dfdg *Bitmap ,_gbbba ...MorphProcess )(_afda *Bitmap ,_ggcf error ){const _ffd ="\u006d\u006f\u0072\u0070\u0068\u0053\u0065\u0071\u0075\u0065\u006e\u0063\u0065";
if _dfdg ==nil {return nil ,_ab .Error (_ffd ,"\u006d\u006f\u0072\u0070\u0068\u0053\u0065\u0071\u0075\u0065\u006e\u0063\u0065 \u0073\u006f\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061\u0070\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");
};if len (_gbbba )==0{return nil ,_ab .Error (_ffd ,"m\u006f\u0072\u0070\u0068\u0053\u0065q\u0075\u0065\u006e\u0063\u0065\u002c \u0073\u0065\u0071\u0075\u0065\u006e\u0063e\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006ee\u0064");};if _ggcf =_aadc (_gbbba ...);
_ggcf !=nil {return nil ,_ab .Wrap (_ggcf ,_ffd ,"");};var _eega ,_dfed ,_edab int ;_afda =_dfdg .Copy ();for _ ,_daee :=range _gbbba {switch _daee .Operation {case MopDilation :_eega ,_dfed =_daee .getWidthHeight ();_afda ,_ggcf =DilateBrick (nil ,_afda ,_eega ,_dfed );
if _ggcf !=nil {return nil ,_ab .Wrap (_ggcf ,_ffd ,"");};case MopErosion :_eega ,_dfed =_daee .getWidthHeight ();_afda ,_ggcf =_dcacg (nil ,_afda ,_eega ,_dfed );if _ggcf !=nil {return nil ,_ab .Wrap (_ggcf ,_ffd ,"");};case MopOpening :_eega ,_dfed =_daee .getWidthHeight ();
_afda ,_ggcf =_cfab (nil ,_afda ,_eega ,_dfed );if _ggcf !=nil {return nil ,_ab .Wrap (_ggcf ,_ffd ,"");};case MopClosing :_eega ,_dfed =_daee .getWidthHeight ();_afda ,_ggcf =_cgc (nil ,_afda ,_eega ,_dfed );if _ggcf !=nil {return nil ,_ab .Wrap (_ggcf ,_ffd ,"");
};case MopRankBinaryReduction :_afda ,_ggcf =_bbb (_afda ,_daee .Arguments ...);if _ggcf !=nil {return nil ,_ab .Wrap (_ggcf ,_ffd ,"");};case MopReplicativeBinaryExpansion :_afda ,_ggcf =_fcfg (_afda ,_daee .Arguments [0]);if _ggcf !=nil {return nil ,_ab .Wrap (_ggcf ,_ffd ,"");
};case MopAddBorder :_edab =_daee .Arguments [0];_afda ,_ggcf =_afda .AddBorder (_edab ,0);if _ggcf !=nil {return nil ,_ab .Wrap (_ggcf ,_ffd ,"");};default:return nil ,_ab .Error (_ffd ,"i\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006d\u006fr\u0070\u0068\u004f\u0070\u0065\u0072\u0061ti\u006f\u006e\u0020\u0070r\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0074\u006f t\u0068\u0065 \u0073\u0065\u0071\u0075\u0065\u006e\u0063\u0065");
};};if _edab > 0{_afda ,_ggcf =_afda .RemoveBorder (_edab );if _ggcf !=nil {return nil ,_ab .Wrap (_ggcf ,_ffd ,"\u0062\u006f\u0072\u0064\u0065\u0072\u0020\u003e\u0020\u0030");};};return _afda ,nil ;};func TstFrameBitmapData ()[]byte {return _cbd .Data };
func (_adge *Bitmaps )WidthSorter ()func (_adade ,_gagg int )bool {return func (_babc ,_dedb int )bool {return _adge .Values [_babc ].Width < _adge .Values [_dedb ].Width };};var _ _cd .Interface =&ClassedPoints {};func (_aab *Bitmap )AddBorderGeneral (left ,right ,top ,bot int ,val int )(*Bitmap ,error ){return _aab .addBorderGeneral (left ,right ,top ,bot ,val );
};func (_gcag *Bitmaps )selectByIndexes (_caeff []int )(*Bitmaps ,error ){_cbbe :=&Bitmaps {};for _ ,_fgbd :=range _caeff {_gbedg ,_dceg :=_gcag .GetBitmap (_fgbd );if _dceg !=nil {return nil ,_ab .Wrap (_dceg ,"\u0073e\u006ce\u0063\u0074\u0042\u0079\u0049\u006e\u0064\u0065\u0078\u0065\u0073","");
};_cbbe .AddBitmap (_gbedg );};return _cbbe ,nil ;};var _fbgc [256]uint8 ;const (_bdaba shift =iota ;_ffeg ;);func (_faeac *Bitmaps )Size ()int {return len (_faeac .Values )};func _cbfe (_gga ,_gcdc *Bitmap ,_gbdf ,_eba ,_faea uint ,_egbg ,_bcea int ,_gbad bool ,_gadc ,_febg int )error {for _fecb :=_egbg ;
_fecb < _bcea ;_fecb ++{if _gadc +1< len (_gga .Data ){_ecad :=_fecb +1==_bcea ;_gfff ,_fded :=_gga .GetByte (_gadc );if _fded !=nil {return _fded ;};_gadc ++;_gfff <<=_gbdf ;_cbgg ,_fded :=_gga .GetByte (_gadc );if _fded !=nil {return _fded ;};_cbgg >>=_eba ;
_cgadf :=_gfff |_cbgg ;if _ecad &&!_gbad {_cgadf =_cgga (_faea ,_cgadf );};_fded =_gcdc .SetByte (_febg ,_cgadf );if _fded !=nil {return _fded ;};_febg ++;if _ecad &&_gbad {_aca ,_dbfg :=_gga .GetByte (_gadc );if _dbfg !=nil {return _dbfg ;};_aca <<=_gbdf ;
_cgadf =_cgga (_faea ,_aca );if _dbfg =_gcdc .SetByte (_febg ,_cgadf );_dbfg !=nil {return _dbfg ;};};continue ;};_fabcb ,_gcb :=_gga .GetByte (_gadc );if _gcb !=nil {_g .Log .Debug ("G\u0065\u0074\u0074\u0069\u006e\u0067 \u0074\u0068\u0065\u0020\u0076\u0061l\u0075\u0065\u0020\u0061\u0074\u003a\u0020%\u0064\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020%\u0073",_gadc ,_gcb );
return _gcb ;};_fabcb <<=_gbdf ;_gadc ++;_gcb =_gcdc .SetByte (_febg ,_fabcb );if _gcb !=nil {return _gcb ;};_febg ++;};return nil ;};func (_gcga *Bitmap )thresholdPixelSum (_bbbf int )bool {var (_fca int ;_ffca uint8 ;_dgd byte ;_adac int ;);_bcab :=_gcga .RowStride ;
_gefg :=uint (_gcga .Width &0x07);if _gefg !=0{_ffca =uint8 ((0xff<<(8-_gefg ))&0xff);_bcab --;};for _fad :=0;_fad < _gcga .Height ;_fad ++{for _adac =0;_adac < _bcab ;_adac ++{_dgd =_gcga .Data [_fad *_gcga .RowStride +_adac ];_fca +=int (_fbgc [_dgd ]);
};if _gefg !=0{_dgd =_gcga .Data [_fad *_gcga .RowStride +_adac ]&_ffca ;_fca +=int (_fbgc [_dgd ]);};if _fca > _bbbf {return true ;};};return false ;};func (_egbff *Bitmap )connComponentsBitmapsBB (_eab *Bitmaps ,_cede int )(_beeb *Boxes ,_cbab error ){const _dcec ="\u0063\u006f\u006enC\u006f\u006d\u0070\u006f\u006e\u0065\u006e\u0074\u0073\u0042\u0069\u0074\u006d\u0061\u0070\u0073\u0042\u0042";
if _cede !=4&&_cede !=8{return nil ,_ab .Error (_dcec ,"\u0063\u006f\u006e\u006e\u0065\u0063t\u0069\u0076\u0069\u0074\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u0027\u0034\u0027\u0020\u006fr\u0020\u0027\u0038\u0027");};if _eab ==nil {return nil ,_ab .Error (_dcec ,"p\u0072o\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u0069l\u0020\u0042\u0069\u0074ma\u0070\u0073");
};if len (_eab .Values )> 0{return nil ,_ab .Error (_dcec ,"\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u006e\u006fn\u002d\u0065\u006d\u0070\u0074\u0079\u0020\u0042\u0069\u0074m\u0061\u0070\u0073");};if _egbff .Zero (){return &Boxes {},nil ;
};var (_ebaa ,_fcc ,_efc ,_ccfe *Bitmap ;);_egbff .setPadBits (0);if _ebaa ,_cbab =_egec (nil ,_egbff );_cbab !=nil {return nil ,_ab .Wrap (_cbab ,_dcec ,"\u0062\u006d\u0031");};if _fcc ,_cbab =_egec (nil ,_egbff );_cbab !=nil {return nil ,_ab .Wrap (_cbab ,_dcec ,"\u0062\u006d\u0032");
};_febf :=&_d .Stack {};_febf .Aux =&_d .Stack {};_beeb =&Boxes {};var (_gfbf ,_fdbe int ;_begg _ce .Point ;_aea bool ;_fgdd *_ce .Rectangle ;);for {if _begg ,_aea ,_cbab =_ebaa .nextOnPixel (_gfbf ,_fdbe );_cbab !=nil {return nil ,_ab .Wrap (_cbab ,_dcec ,"");
};if !_aea {break ;};if _fgdd ,_cbab =_abfe (_ebaa ,_febf ,_begg .X ,_begg .Y ,_cede );_cbab !=nil {return nil ,_ab .Wrap (_cbab ,_dcec ,"");};if _cbab =_beeb .Add (_fgdd );_cbab !=nil {return nil ,_ab .Wrap (_cbab ,_dcec ,"");};if _efc ,_cbab =_ebaa .clipRectangle (_fgdd ,nil );
_cbab !=nil {return nil ,_ab .Wrap (_cbab ,_dcec ,"\u0062\u006d\u0033");};if _ccfe ,_cbab =_fcc .clipRectangle (_fgdd ,nil );_cbab !=nil {return nil ,_ab .Wrap (_cbab ,_dcec ,"\u0062\u006d\u0034");};if _ ,_cbab =_dbda (_efc ,_efc ,_ccfe );_cbab !=nil {return nil ,_ab .Wrap (_cbab ,_dcec ,"\u0062m\u0033\u0020\u005e\u0020\u0062\u006d4");
};if _cbab =_fcc .RasterOperation (_fgdd .Min .X ,_fgdd .Min .Y ,_fgdd .Dx (),_fgdd .Dy (),PixSrcXorDst ,_efc ,0,0);_cbab !=nil {return nil ,_ab .Wrap (_cbab ,_dcec ,"\u0062\u006d\u0032\u0020\u002d\u0058\u004f\u0052\u002d>\u0020\u0062\u006d\u0033");};_eab .AddBitmap (_efc );
_gfbf =_begg .X ;_fdbe =_begg .Y ;};_eab .Boxes =*_beeb ;return _beeb ,nil ;};func _bbb (_cec *Bitmap ,_ebea ...int )(_ebfd *Bitmap ,_cb error ){const _adaf ="\u0072\u0065\u0064uc\u0065\u0052\u0061\u006e\u006b\u0042\u0069\u006e\u0061\u0072\u0079\u0043\u0061\u0073\u0063\u0061\u0064\u0065";
if _cec ==nil {return nil ,_ab .Error (_adaf ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");};if len (_ebea )==0||len (_ebea )> 4{return nil ,_ab .Error (_adaf ,"t\u0068\u0065\u0072\u0065\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0074\u0020\u006cea\u0073\u0074\u0020\u006fn\u0065\u0020\u0061\u006e\u0064\u0020\u0061\u0074\u0020mo\u0073\u0074 \u0034\u0020\u006c\u0065\u0076\u0065\u006c\u0073");
};if _ebea [0]<=0{_g .Log .Debug ("\u006c\u0065\u0076\u0065\u006c\u0031\u0020\u003c\u003d\u0020\u0030 \u002d\u0020\u006e\u006f\u0020\u0072\u0065\u0064\u0075\u0063t\u0069\u006f\u006e");_ebfd ,_cb =_egec (nil ,_cec );if _cb !=nil {return nil ,_ab .Wrap (_cb ,_adaf ,"l\u0065\u0076\u0065\u006c\u0031\u0020\u003c\u003d\u0020\u0030");
};return _ebfd ,nil ;};_fa :=_abdf ();_ebfd =_cec ;for _caa ,_bg :=range _ebea {if _bg <=0{break ;};_ebfd ,_cb =_aef (_ebfd ,_bg ,_fa );if _cb !=nil {return nil ,_ab .Wrapf (_cb ,_adaf ,"\u006c\u0065\u0076\u0065\u006c\u0025\u0064\u0020\u0072\u0065\u0064\u0075c\u0074\u0069\u006f\u006e",_caa );
};};return _ebfd ,nil ;};func (_dbb *Bitmap )String ()string {var _adb ="\u000a";for _gbb :=0;_gbb < _dbb .Height ;_gbb ++{var _eaga string ;for _dcgca :=0;_dcgca < _dbb .Width ;_dcgca ++{_cacd :=_dbb .GetPixel (_dcgca ,_gbb );if _cacd {_eaga +="\u0031";
}else {_eaga +="\u0030";};};_adb +=_eaga +"\u000a";};return _adb ;};func DilateBrick (d ,s *Bitmap ,hSize ,vSize int )(*Bitmap ,error ){return _bbdb (d ,s ,hSize ,vSize )};func (_cfeg *Bitmap )ToImage ()_ce .Image {_fbgg ,_abg :=_fd .NewImage (_cfeg .Width ,_cfeg .Height ,1,1,_cfeg .Data ,nil ,nil );
if _abg !=nil {_g .Log .Error ("\u0043\u006f\u006e\u0076\u0065\u0072\u0074\u0069\u006e\u0067\u0020j\u0062\u0069\u0067\u0032\u002e\u0042\u0069\u0074m\u0061p\u0020\u0074\u006f\u0020\u0069\u006d\u0061\u0067\u0065\u0075\u0074\u0069\u006c\u002e\u0049\u006d\u0061\u0067e\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_abg );
};return _fbgg ;};func (_eafd *Bitmaps )HeightSorter ()func (_egacd ,_adcf int )bool {return func (_eefag ,_gced int )bool {_dgbg :=_eafd .Values [_eefag ].Height < _eafd .Values [_gced ].Height ;_g .Log .Debug ("H\u0065i\u0067\u0068\u0074\u003a\u0020\u0025\u0076\u0020<\u0020\u0025\u0076\u0020= \u0025\u0076",_eafd .Values [_eefag ].Height ,_eafd .Values [_gced ].Height ,_dgbg );
return _dgbg ;};};func TstVSymbol (t *_f .T ,scale ...int )*Bitmap {_afff ,_bgda :=NewWithData (5,5,[]byte {0x88,0x88,0x88,0x50,0x20});_e .NoError (t ,_bgda );return TstGetScaledSymbol (t ,_afff ,scale ...);};var MorphBC BoundaryCondition ;func TstFrameBitmap ()*Bitmap {return _cbd .Copy ()};
func (_dccc *BitmapsArray )GetBox (i int )(*_ce .Rectangle ,error ){const _eebg ="\u0042\u0069\u0074\u006dap\u0073\u0041\u0072\u0072\u0061\u0079\u002e\u0047\u0065\u0074\u0042\u006f\u0078";if _dccc ==nil {return nil ,_ab .Error (_eebg ,"p\u0072\u006f\u0076\u0069\u0064\u0065d\u0020\u006e\u0069\u006c\u0020\u0027\u0042\u0069\u0074m\u0061\u0070\u0073A\u0072r\u0061\u0079\u0027");
};if i > len (_dccc .Boxes )-1{return nil ,_ab .Errorf (_eebg ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );};return _dccc .Boxes [i ],nil ;};type Color int ;
type BitmapsArray struct{Values []*Bitmaps ;Boxes []*_ce .Rectangle ;};func _defg (_bffa *_d .Stack ,_addf ,_caaa ,_cgdg ,_aaab ,_bdffd int ,_cbbbe *_ce .Rectangle )(_eaeb error ){const _dab ="\u0070\u0075\u0073\u0068\u0046\u0069\u006c\u006c\u0053\u0065\u0067m\u0065\u006e\u0074\u0042\u006f\u0075\u006e\u0064\u0069\u006eg\u0042\u006f\u0078";
if _bffa ==nil {return _ab .Error (_dab ,"\u006ei\u006c \u0073\u0074\u0061\u0063\u006b \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};if _cbbbe ==nil {return _ab .Error (_dab ,"\u0070\u0072\u006f\u0076i\u0064\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0069\u006da\u0067e\u002e\u0052\u0065\u0063\u0074\u0061\u006eg\u006c\u0065");
};_cbbbe .Min .X =_d .Min (_cbbbe .Min .X ,_addf );_cbbbe .Max .X =_d .Max (_cbbbe .Max .X ,_caaa );_cbbbe .Min .Y =_d .Min (_cbbbe .Min .Y ,_cgdg );_cbbbe .Max .Y =_d .Max (_cbbbe .Max .Y ,_cgdg );if !(_cgdg +_aaab >=0&&_cgdg +_aaab <=_bdffd ){return nil ;
};if _bffa .Aux ==nil {return _ab .Error (_dab ,"a\u0075x\u0053\u0074\u0061\u0063\u006b\u0020\u006e\u006ft\u0020\u0064\u0065\u0066in\u0065\u0064");};var _cbfa *fillSegment ;_ccbed ,_aegde :=_bffa .Aux .Pop ();if _aegde {if _cbfa ,_aegde =_ccbed .(*fillSegment );
!_aegde {return _ab .Error (_dab ,"a\u0075\u0078\u0053\u0074\u0061\u0063k\u0020\u0064\u0061\u0074\u0061\u0020i\u0073\u0020\u006e\u006f\u0074\u0020\u0061 \u002a\u0066\u0069\u006c\u006c\u0053\u0065\u0067\u006d\u0065n\u0074");};}else {_cbfa =&fillSegment {};
};_cbfa ._dgeaf =_addf ;_cbfa ._fccd =_caaa ;_cbfa ._adad =_cgdg ;_cbfa ._egcgb =_aaab ;_bffa .Push (_cbfa );return nil ;};func Centroids (bms []*Bitmap )(*Points ,error ){_ebag :=make ([]Point ,len (bms ));_fgbe :=_bgefg ();_fdgc :=_ffgg ();var _cfa error ;
for _egdba ,_dade :=range bms {_ebag [_egdba ],_cfa =_dade .centroid (_fgbe ,_fdgc );if _cfa !=nil {return nil ,_cfa ;};};_dgc :=Points (_ebag );return &_dgc ,nil ;};func _bbbfe (_acff ,_egacf ,_bcbf byte )byte {return (_acff &^(_bcbf ))|(_egacf &_bcbf )};
const (PixSrc RasterOperator =0xc;PixDst RasterOperator =0xa;PixNotSrc RasterOperator =0x3;PixNotDst RasterOperator =0x5;PixClr RasterOperator =0x0;PixSet RasterOperator =0xf;PixSrcOrDst RasterOperator =0xe;PixSrcAndDst RasterOperator =0x8;PixSrcXorDst RasterOperator =0x6;
PixNotSrcOrDst RasterOperator =0xb;PixNotSrcAndDst RasterOperator =0x2;PixSrcOrNotDst RasterOperator =0xd;PixSrcAndNotDst RasterOperator =0x4;PixNotPixSrcOrDst RasterOperator =0x1;PixNotPixSrcAndDst RasterOperator =0x7;PixNotPixSrcXorDst RasterOperator =0x9;
PixPaint =PixSrcOrDst ;PixSubtract =PixNotSrcAndDst ;PixMask =PixSrcAndDst ;);func (_faaf *Bitmap )GetChocolateData ()[]byte {if _faaf .Color ==Vanilla {_faaf .inverseData ();};return _faaf .Data ;};func (_fgfd Points )GetIntX (i int )(int ,error ){if i >=len (_fgfd ){return 0,_ab .Errorf ("\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0065t\u0049\u006e\u0074\u0058","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return int (_fgfd [i ].X ),nil ;};type Selection struct{Height ,Width int ;Cx ,Cy int ;Name string ;Data [][]SelectionValue ;};func init (){const _abae ="\u0062\u0069\u0074\u006dap\u0073\u002e\u0069\u006e\u0069\u0074\u0069\u0061\u006c\u0069\u007a\u0061\u0074\u0069o\u006e";
_cbd =New (50,40);var _gddf error ;_cbd ,_gddf =_cbd .AddBorder (2,1);if _gddf !=nil {panic (_ab .Wrap (_gddf ,_abae ,"f\u0072\u0061\u006d\u0065\u0042\u0069\u0074\u006d\u0061\u0070"));};_cbda ,_gddf =NewWithData (50,22,_fbda );if _gddf !=nil {panic (_ab .Wrap (_gddf ,_abae ,"i\u006d\u0061\u0067\u0065\u0042\u0069\u0074\u006d\u0061\u0070"));
};};func _gfg ()(_cgb [256]uint16 ){for _dcgc :=0;_dcgc < 256;_dcgc ++{if _dcgc &0x01!=0{_cgb [_dcgc ]|=0x3;};if _dcgc &0x02!=0{_cgb [_dcgc ]|=0xc;};if _dcgc &0x04!=0{_cgb [_dcgc ]|=0x30;};if _dcgc &0x08!=0{_cgb [_dcgc ]|=0xc0;};if _dcgc &0x10!=0{_cgb [_dcgc ]|=0x300;
};if _dcgc &0x20!=0{_cgb [_dcgc ]|=0xc00;};if _dcgc &0x40!=0{_cgb [_dcgc ]|=0x3000;};if _dcgc &0x80!=0{_cgb [_dcgc ]|=0xc000;};};return _cgb ;};type byWidth Bitmaps ;func (_geed *Bitmap )setFourBytes (_ffbe int ,_aabb uint32 )error {if _ffbe +3> len (_geed .Data )-1{return _ab .Errorf ("\u0073\u0065\u0074F\u006f\u0075\u0072\u0042\u0079\u0074\u0065\u0073","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",_ffbe );
};_geed .Data [_ffbe ]=byte ((_aabb &0xff000000)>>24);_geed .Data [_ffbe +1]=byte ((_aabb &0xff0000)>>16);_geed .Data [_ffbe +2]=byte ((_aabb &0xff00)>>8);_geed .Data [_ffbe +3]=byte (_aabb &0xff);return nil ;};func (_dcba *Bitmap )clipRectangle (_acf ,_gcgg *_ce .Rectangle )(_fbgf *Bitmap ,_baag error ){const _caef ="\u0063\u006c\u0069\u0070\u0052\u0065\u0063\u0074\u0061\u006e\u0067\u006c\u0065";
if _acf ==nil {return nil ,_ab .Error (_caef ,"\u0070r\u006fv\u0069\u0064\u0065\u0064\u0020n\u0069\u006c \u0027\u0062\u006f\u0078\u0027");};_egeb ,_ebbg :=_dcba .Width ,_dcba .Height ;_dbbc ,_baag :=ClipBoxToRectangle (_acf ,_egeb ,_ebbg );if _baag !=nil {_g .Log .Warning ("\u0027\u0062ox\u0027\u0020\u0064o\u0065\u0073\u006e\u0027t o\u0076er\u006c\u0061\u0070\u0020\u0062\u0069\u0074ma\u0070\u0020\u0027\u0062\u0027\u003a\u0020%\u0076",_baag );
return nil ,nil ;};_bgf ,_dcac :=_dbbc .Min .X ,_dbbc .Min .Y ;_ede ,_gfbag :=_dbbc .Max .X -_dbbc .Min .X ,_dbbc .Max .Y -_dbbc .Min .Y ;_fbgf =New (_ede ,_gfbag );_fbgf .Text =_dcba .Text ;if _baag =_fbgf .RasterOperation (0,0,_ede ,_gfbag ,PixSrc ,_dcba ,_bgf ,_dcac );
_baag !=nil {return nil ,_ab .Wrap (_baag ,_caef ,"");};if _gcgg !=nil {*_gcgg =*_dbbc ;};return _fbgf ,nil ;};func (_cag *Bitmap )Copy ()*Bitmap {_ead :=make ([]byte ,len (_cag .Data ));copy (_ead ,_cag .Data );return &Bitmap {Width :_cag .Width ,Height :_cag .Height ,RowStride :_cag .RowStride ,Data :_ead ,Color :_cag .Color ,Text :_cag .Text ,BitmapNumber :_cag .BitmapNumber ,Special :_cag .Special };
};func _gfga (_ccbea ,_aaac ,_bffdd *Bitmap ,_cfcb int )(*Bitmap ,error ){const _gcff ="\u0073\u0065\u0065\u0064\u0046\u0069\u006c\u006c\u0042i\u006e\u0061\u0072\u0079";if _aaac ==nil {return nil ,_ab .Error (_gcff ,"s\u006fu\u0072\u0063\u0065\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");
};if _bffdd ==nil {return nil ,_ab .Error (_gcff ,"'\u006da\u0073\u006b\u0027\u0020\u0062\u0069\u0074\u006da\u0070\u0020\u0069\u0073 n\u0069\u006c");};if _cfcb !=4&&_cfcb !=8{return nil ,_ab .Error (_gcff ,"\u0063\u006f\u006en\u0065\u0063\u0074\u0069v\u0069\u0074\u0079\u0020\u006e\u006f\u0074 \u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u007b\u0034\u002c\u0038\u007d");
};var _gafc error ;_ccbea ,_gafc =_egec (_ccbea ,_aaac );if _gafc !=nil {return nil ,_ab .Wrap (_gafc ,_gcff ,"\u0063o\u0070y\u0020\u0073\u006f\u0075\u0072c\u0065\u0020t\u006f\u0020\u0027\u0064\u0027");};_acddb :=_aaac .createTemplate ();_bffdd .setPadBits (0);
for _eddabd :=0;_eddabd < _fcbcf ;_eddabd ++{_acddb ,_gafc =_egec (_acddb ,_ccbea );if _gafc !=nil {return nil ,_ab .Wrapf (_gafc ,_gcff ,"\u0069\u0074\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0064",_eddabd );};if _gafc =_gaagg (_ccbea ,_bffdd ,_cfcb );
_gafc !=nil {return nil ,_ab .Wrapf (_gafc ,_gcff ,"\u0069\u0074\u0065\u0072\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0064",_eddabd );};if _acddb .Equals (_ccbea ){break ;};};return _ccbea ,nil ;};func (_fgf *Bitmap )ThresholdPixelSum (thresh int ,tab8 []int )(_dbff bool ,_dbde error ){const _dbfd ="\u0042i\u0074\u006d\u0061\u0070\u002e\u0054\u0068\u0072\u0065\u0073\u0068o\u006c\u0064\u0050\u0069\u0078\u0065\u006c\u0053\u0075\u006d";
if tab8 ==nil {tab8 =_ffgg ();};_bbe :=_fgf .Width >>3;_fgfa :=_fgf .Width &7;_aaec :=byte (0xff<<uint (8-_fgfa ));var (_gec ,_ffac ,_dec ,_daa int ;_dafg byte ;);for _gec =0;_gec < _fgf .Height ;_gec ++{_dec =_fgf .RowStride *_gec ;for _ffac =0;_ffac < _bbe ;
_ffac ++{_dafg ,_dbde =_fgf .GetByte (_dec +_ffac );if _dbde !=nil {return false ,_ab .Wrap (_dbde ,_dbfd ,"\u0066\u0075\u006c\u006c\u0042\u0079\u0074\u0065");};_daa +=tab8 [_dafg ];};if _fgfa !=0{_dafg ,_dbde =_fgf .GetByte (_dec +_ffac );if _dbde !=nil {return false ,_ab .Wrap (_dbde ,_dbfd ,"p\u0061\u0072\u0074\u0069\u0061\u006c\u0042\u0079\u0074\u0065");
};_dafg &=_aaec ;_daa +=tab8 [_dafg ];};if _daa > thresh {return true ,nil ;};};return _dbff ,nil ;};func Extract (roi _ce .Rectangle ,src *Bitmap )(*Bitmap ,error ){_ecgf :=New (roi .Dx (),roi .Dy ());_bbdf :=roi .Min .X &0x07;_bgcc :=8-_bbdf ;_ecb :=uint (8-_ecgf .Width &0x07);
_deab :=src .GetByteIndex (roi .Min .X ,roi .Min .Y );_effe :=src .GetByteIndex (roi .Max .X -1,roi .Min .Y );_dddad :=_ecgf .RowStride ==_effe +1-_deab ;var _gdede int ;for _bcda :=roi .Min .Y ;_bcda < roi .Max .Y ;_bcda ++{_ccdd :=_deab ;_afce :=_gdede ;
switch {case _deab ==_effe :_edgg ,_cfgbf :=src .GetByte (_ccdd );if _cfgbf !=nil {return nil ,_cfgbf ;};_edgg <<=uint (_bbdf );_cfgbf =_ecgf .SetByte (_afce ,_cgga (_ecb ,_edgg ));if _cfgbf !=nil {return nil ,_cfgbf ;};case _bbdf ==0:for _gabf :=_deab ;
_gabf <=_effe ;_gabf ++{_aebc ,_fgge :=src .GetByte (_ccdd );if _fgge !=nil {return nil ,_fgge ;};_ccdd ++;if _gabf ==_effe &&_dddad {_aebc =_cgga (_ecb ,_aebc );};_fgge =_ecgf .SetByte (_afce ,_aebc );if _fgge !=nil {return nil ,_fgge ;};_afce ++;};default:_cbbc :=_cbfe (src ,_ecgf ,uint (_bbdf ),uint (_bgcc ),_ecb ,_deab ,_effe ,_dddad ,_ccdd ,_afce );
if _cbbc !=nil {return nil ,_cbbc ;};};_deab +=src .RowStride ;_effe +=src .RowStride ;_gdede +=_ecgf .RowStride ;};return _ecgf ,nil ;};func (_dbbcb Points )XSorter ()func (_fbea ,_cgdc int )bool {return func (_efdcb ,_dagc int )bool {return _dbbcb [_efdcb ].X < _dbbcb [_dagc ].X };
};func (_fgdf *ClassedPoints )GroupByY ()([]*ClassedPoints ,error ){const _aefb ="\u0043\u006c\u0061\u0073se\u0064\u0050\u006f\u0069\u006e\u0074\u0073\u002e\u0047\u0072\u006f\u0075\u0070\u0042y\u0059";if _efda :=_fgdf .validateIntSlice ();_efda !=nil {return nil ,_ab .Wrap (_efda ,_aefb ,"");
};if _fgdf .IntSlice .Size ()==0{return nil ,_ab .Error (_aefb ,"\u004e\u006f\u0020\u0063la\u0073\u0073\u0065\u0073\u0020\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064");};_fgdf .SortByY ();var (_fcfb []*ClassedPoints ;_bfgb int ;);_aeeb :=-1;var _ggde *ClassedPoints ;
for _ffgd :=0;_ffgd < len (_fgdf .IntSlice );_ffgd ++{_bfgb =int (_fgdf .YAtIndex (_ffgd ));if _bfgb !=_aeeb {_ggde =&ClassedPoints {Points :_fgdf .Points };_aeeb =_bfgb ;_fcfb =append (_fcfb ,_ggde );};_ggde .IntSlice =append (_ggde .IntSlice ,_fgdf .IntSlice [_ffgd ]);
};for _ ,_bbdfg :=range _fcfb {_bbdfg .SortByX ();};return _fcfb ,nil ;};func TstWordBitmapWithSpaces (t *_f .T ,scale ...int )*Bitmap {_beaa :=1;if len (scale )> 0{_beaa =scale [0];};_aaede :=3;_fagg :=9+7+15+2*_aaede +2*_aaede ;_fcgc :=5+_aaede +5+2*_aaede ;
_gaee :=New (_fagg *_beaa ,_fcgc *_beaa );_bgadd :=&Bitmaps {};var _eeeef *int ;_aaede *=_beaa ;_cabf :=_aaede ;_eeeef =&_cabf ;_fbeca :=_aaede ;_aabe :=TstDSymbol (t ,scale ...);TstAddSymbol (t ,_bgadd ,_aabe ,_eeeef ,_fbeca ,1*_beaa );_aabe =TstOSymbol (t ,scale ...);
TstAddSymbol (t ,_bgadd ,_aabe ,_eeeef ,_fbeca ,_aaede );_aabe =TstISymbol (t ,scale ...);TstAddSymbol (t ,_bgadd ,_aabe ,_eeeef ,_fbeca ,1*_beaa );_aabe =TstTSymbol (t ,scale ...);TstAddSymbol (t ,_bgadd ,_aabe ,_eeeef ,_fbeca ,_aaede );_aabe =TstNSymbol (t ,scale ...);
TstAddSymbol (t ,_bgadd ,_aabe ,_eeeef ,_fbeca ,1*_beaa );_aabe =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_bgadd ,_aabe ,_eeeef ,_fbeca ,1*_beaa );_aabe =TstWSymbol (t ,scale ...);TstAddSymbol (t ,_bgadd ,_aabe ,_eeeef ,_fbeca ,0);*_eeeef =_aaede ;_fbeca =5*_beaa +_aaede ;
_aabe =TstOSymbol (t ,scale ...);TstAddSymbol (t ,_bgadd ,_aabe ,_eeeef ,_fbeca ,1*_beaa );_aabe =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_bgadd ,_aabe ,_eeeef ,_fbeca ,_aaede );_aabe =TstNSymbol (t ,scale ...);TstAddSymbol (t ,_bgadd ,_aabe ,_eeeef ,_fbeca ,1*_beaa );
_aabe =TstESymbol (t ,scale ...);TstAddSymbol (t ,_bgadd ,_aabe ,_eeeef ,_fbeca ,1*_beaa );_aabe =TstVSymbol (t ,scale ...);TstAddSymbol (t ,_bgadd ,_aabe ,_eeeef ,_fbeca ,1*_beaa );_aabe =TstESymbol (t ,scale ...);TstAddSymbol (t ,_bgadd ,_aabe ,_eeeef ,_fbeca ,1*_beaa );
_aabe =TstRSymbol (t ,scale ...);TstAddSymbol (t ,_bgadd ,_aabe ,_eeeef ,_fbeca ,0);TstWriteSymbols (t ,_bgadd ,_gaee );return _gaee ;};func (_bea *Bitmap )GetByte (index int )(byte ,error ){if index > len (_bea .Data )-1||index < 0{return 0,_ab .Errorf ("\u0047e\u0074\u0042\u0079\u0074\u0065","\u0069\u006e\u0064\u0065x:\u0020\u0025\u0064\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006eg\u0065",index );
};return _bea .Data [index ],nil ;};func (_gddg *ClassedPoints )Swap (i ,j int ){_gddg .IntSlice [i ],_gddg .IntSlice [j ]=_gddg .IntSlice [j ],_gddg .IntSlice [i ];};func (_ddcd *Boxes )makeSizeIndicator (_agdff ,_afc int ,_eddab LocationFilter ,_egbf SizeComparison )*_d .NumSlice {_bcbeg :=&_d .NumSlice {};
var _cbaa ,_gfdb ,_gbd int ;for _ ,_fdbc :=range *_ddcd {_cbaa =0;_gfdb ,_gbd =_fdbc .Dx (),_fdbc .Dy ();switch _eddab {case LocSelectWidth :if (_egbf ==SizeSelectIfLT &&_gfdb < _agdff )||(_egbf ==SizeSelectIfGT &&_gfdb > _agdff )||(_egbf ==SizeSelectIfLTE &&_gfdb <=_agdff )||(_egbf ==SizeSelectIfGTE &&_gfdb >=_agdff ){_cbaa =1;
};case LocSelectHeight :if (_egbf ==SizeSelectIfLT &&_gbd < _afc )||(_egbf ==SizeSelectIfGT &&_gbd > _afc )||(_egbf ==SizeSelectIfLTE &&_gbd <=_afc )||(_egbf ==SizeSelectIfGTE &&_gbd >=_afc ){_cbaa =1;};case LocSelectIfEither :if (_egbf ==SizeSelectIfLT &&(_gbd < _afc ||_gfdb < _agdff ))||(_egbf ==SizeSelectIfGT &&(_gbd > _afc ||_gfdb > _agdff ))||(_egbf ==SizeSelectIfLTE &&(_gbd <=_afc ||_gfdb <=_agdff ))||(_egbf ==SizeSelectIfGTE &&(_gbd >=_afc ||_gfdb >=_agdff )){_cbaa =1;
};case LocSelectIfBoth :if (_egbf ==SizeSelectIfLT &&(_gbd < _afc &&_gfdb < _agdff ))||(_egbf ==SizeSelectIfGT &&(_gbd > _afc &&_gfdb > _agdff ))||(_egbf ==SizeSelectIfLTE &&(_gbd <=_afc &&_gfdb <=_agdff ))||(_egbf ==SizeSelectIfGTE &&(_gbd >=_afc &&_gfdb >=_agdff )){_cbaa =1;
};};_bcbeg .AddInt (_cbaa );};return _bcbeg ;};func (_bbge *ClassedPoints )XAtIndex (i int )float32 {return (*_bbge .Points )[_bbge .IntSlice [i ]].X };func _ggba (_cgceg *_d .Stack )(_cfcba *fillSegment ,_gcba error ){const _dgcfc ="\u0070\u006f\u0070\u0046\u0069\u006c\u006c\u0053\u0065g\u006d\u0065\u006e\u0074";
if _cgceg ==nil {return nil ,_ab .Error (_dgcfc ,"\u006ei\u006c \u0073\u0074\u0061\u0063\u006b \u0070\u0072o\u0076\u0069\u0064\u0065\u0064");};if _cgceg .Aux ==nil {return nil ,_ab .Error (_dgcfc ,"a\u0075x\u0053\u0074\u0061\u0063\u006b\u0020\u006e\u006ft\u0020\u0064\u0065\u0066in\u0065\u0064");
};_eabc ,_cdce :=_cgceg .Pop ();if !_cdce {return nil ,nil ;};_fdcaa ,_cdce :=_eabc .(*fillSegment );if !_cdce {return nil ,_ab .Error (_dgcfc ,"\u0073\u0074\u0061ck\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020c\u006fn\u0074a\u0069n\u0020\u002a\u0066\u0069\u006c\u006c\u0053\u0065\u0067\u006d\u0065\u006e\u0074");
};_cfcba =&fillSegment {_fdcaa ._dgeaf ,_fdcaa ._fccd ,_fdcaa ._adad +_fdcaa ._egcgb ,_fdcaa ._egcgb };_cgceg .Aux .Push (_fdcaa );return _cfcba ,nil ;};func (_fdgf *Bitmaps )ClipToBitmap (s *Bitmap )(*Bitmaps ,error ){const _aedcg ="B\u0069t\u006d\u0061\u0070\u0073\u002e\u0043\u006c\u0069p\u0054\u006f\u0042\u0069tm\u0061\u0070";
if _fdgf ==nil {return nil ,_ab .Error (_aedcg ,"\u0042\u0069\u0074\u006dap\u0073\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066\u0069\u006e\u0065\u0064");};if s ==nil {return nil ,_ab .Error (_aedcg ,"\u0073o\u0075\u0072\u0063\u0065 \u0062\u0069\u0074\u006d\u0061p\u0020n\u006ft\u0020\u0064\u0065\u0066\u0069\u006e\u0065d");
};_deaf :=len (_fdgf .Values );_dged :=&Bitmaps {Values :make ([]*Bitmap ,_deaf ),Boxes :make ([]*_ce .Rectangle ,_deaf )};var (_bafe ,_fbcff *Bitmap ;_bbff *_ce .Rectangle ;_ffde error ;);for _bgec :=0;_bgec < _deaf ;_bgec ++{if _bafe ,_ffde =_fdgf .GetBitmap (_bgec );
_ffde !=nil {return nil ,_ab .Wrap (_ffde ,_aedcg ,"");};if _bbff ,_ffde =_fdgf .GetBox (_bgec );_ffde !=nil {return nil ,_ab .Wrap (_ffde ,_aedcg ,"");};if _fbcff ,_ffde =s .clipRectangle (_bbff ,nil );_ffde !=nil {return nil ,_ab .Wrap (_ffde ,_aedcg ,"");
};if _fbcff ,_ffde =_fbcff .And (_bafe );_ffde !=nil {return nil ,_ab .Wrap (_ffde ,_aedcg ,"");};_dged .Values [_bgec ]=_fbcff ;_dged .Boxes [_bgec ]=_bbff ;};return _dged ,nil ;};const _fcbcf =5000;const (AsymmetricMorphBC BoundaryCondition =iota ;SymmetricMorphBC ;
);func _bdefe (_cbeg *Bitmap ,_egcb *Bitmap ,_ebad *Selection )(*Bitmap ,error ){var (_bfff *Bitmap ;_dgeb error ;);_cbeg ,_dgeb =_cged (_cbeg ,_egcb ,_ebad ,&_bfff );if _dgeb !=nil {return nil ,_dgeb ;};if _dgeb =_cbeg .clearAll ();_dgeb !=nil {return nil ,_dgeb ;
};var _bacb SelectionValue ;for _fbegg :=0;_fbegg < _ebad .Height ;_fbegg ++{for _ecbc :=0;_ecbc < _ebad .Width ;_ecbc ++{_bacb =_ebad .Data [_fbegg ][_ecbc ];if _bacb ==SelHit {if _dgeb =_cbeg .RasterOperation (_ecbc -_ebad .Cx ,_fbegg -_ebad .Cy ,_egcb .Width ,_egcb .Height ,PixSrcOrDst ,_bfff ,0,0);
_dgeb !=nil {return nil ,_dgeb ;};};};};return _cbeg ,nil ;};func MakePixelCentroidTab8 ()[]int {return _bgefg ()};func (_ega *Bitmap )GetPixel (x ,y int )bool {_agd :=_ega .GetByteIndex (x ,y );_bdf :=_ega .GetBitOffset (x );_fcf :=uint (7-_bdf );if _agd > len (_ega .Data )-1{_g .Log .Debug ("\u0054\u0072\u0079\u0069\u006e\u0067\u0020\u0074\u006f\u0020\u0067\u0065\u0074\u0020\u0070\u0069\u0078\u0065\u006c\u0020o\u0075\u0074\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0064\u0061\u0074\u0061\u0020\u0072\u0061\u006e\u0067\u0065\u002e \u0078\u003a\u0020\u0027\u0025\u0064\u0027\u002c\u0020\u0079\u003a\u0027\u0025\u0064'\u002c\u0020\u0062m\u003a\u0020\u0027\u0025\u0073\u0027",x ,y ,_ega );
return false ;};if (_ega .Data [_agd ]>>_fcf )&0x01>=1{return true ;};return false ;};