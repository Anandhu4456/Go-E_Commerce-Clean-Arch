//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package segments ;import (_b "encoding/binary";_cf "errors";_c "fmt";_ecc "github.com/unidoc/unipdf/v3/common";_be "github.com/unidoc/unipdf/v3/internal/bitwise";_ec "github.com/unidoc/unipdf/v3/internal/jbig2/basic";_eag "github.com/unidoc/unipdf/v3/internal/jbig2/bitmap";
_g "github.com/unidoc/unipdf/v3/internal/jbig2/decoder/arithmetic";_bb "github.com/unidoc/unipdf/v3/internal/jbig2/decoder/huffman";_cc "github.com/unidoc/unipdf/v3/internal/jbig2/decoder/mmr";_bd "github.com/unidoc/unipdf/v3/internal/jbig2/encoder/arithmetic";
_bg "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_cfb "github.com/unidoc/unipdf/v3/internal/jbig2/internal";_cd "golang.org/x/xerrors";_ee "image";_a "io";_d "math";_db "strings";_ea "time";);type GenericRefinementRegion struct{_ecb templater ;_cff templater ;
_bba *_be .Reader ;_ag *Header ;RegionInfo *RegionSegment ;IsTPGROn bool ;TemplateID int8 ;Template templater ;GrAtX []int8 ;GrAtY []int8 ;RegionBitmap *_eag .Bitmap ;ReferenceBitmap *_eag .Bitmap ;ReferenceDX int32 ;ReferenceDY int32 ;_bda *_g .Decoder ;
_eeb *_g .DecoderStats ;_fd bool ;_ge []bool ;};func (_gdg *PageInformationSegment )readContainsRefinement ()error {_ggaa ,_deec :=_gdg ._cbcb .ReadBit ();if _deec !=nil {return _deec ;};if _ggaa ==1{_gdg ._ceaca =true ;};return nil ;};func (_dadd *TextRegion )Init (header *Header ,r *_be .Reader )error {_dadd .Header =header ;
_dadd ._ecga =r ;_dadd .RegionInfo =NewRegionSegment (_dadd ._ecga );return _dadd .parseHeader ();};type templater interface{form (_ded ,_bege ,_edg ,_cbcd ,_dgb int16 )int16 ;setIndex (_dbc *_g .DecoderStats );};func (_cef *GenericRegion )setParameters (_fgca bool ,_ebaf ,_gfba int64 ,_cead ,_ggab uint32 ){_cef .IsMMREncoded =_fgca ;
_cef .DataOffset =_ebaf ;_cef .DataLength =_gfba ;_cef .RegionSegment .BitmapHeight =_cead ;_cef .RegionSegment .BitmapWidth =_ggab ;_cef ._gdd =nil ;_cef .Bitmap =nil ;};func (_cbd *SymbolDictionary )decodeHeightClassBitmap (_gaeac *_eag .Bitmap ,_gaed int64 ,_eccdg int ,_cada []int )error {for _egbd :=_gaed ;
_egbd < int64 (_cbd ._abde );_egbd ++{var _aeeff int ;for _ccgd :=_gaed ;_ccgd <=_egbd -1;_ccgd ++{_aeeff +=_cada [_ccgd ];};_eebb :=_ee .Rect (_aeeff ,0,_aeeff +_cada [_egbd ],_eccdg );_facd ,_cbbe :=_eag .Extract (_eebb ,_gaeac );if _cbbe !=nil {return _cbbe ;
};_cbd ._fagf [_egbd ]=_facd ;_cbd ._gfea =append (_cbd ._gfea ,_facd );};return nil ;};func (_ecgd *TextRegion )decodeSymbolInstances ()error {_fggc ,_bbbadc :=_ecgd .decodeStripT ();if _bbbadc !=nil {return _bbbadc ;};var (_acee int64 ;_bac uint32 ;);
for _bac < _ecgd .NumberOfSymbolInstances {_gdfg ,_cddd :=_ecgd .decodeDT ();if _cddd !=nil {return _cddd ;};_fggc +=_gdfg ;var _eggge int64 ;_efg :=true ;_ecgd ._abdc =0;for {if _efg {_eggge ,_cddd =_ecgd .decodeDfs ();if _cddd !=nil {return _cddd ;};
_acee +=_eggge ;_ecgd ._abdc =_acee ;_efg =false ;}else {_eaea ,_dgbd :=_ecgd .decodeIds ();if _cd .Is (_dgbd ,_cfb .ErrOOB ){break ;};if _dgbd !=nil {return _dgbd ;};if _bac >=_ecgd .NumberOfSymbolInstances {break ;};_ecgd ._abdc +=_eaea +int64 (_ecgd .SbDsOffset );
};_bcbeg ,_aabf :=_ecgd .decodeCurrentT ();if _aabf !=nil {return _aabf ;};_dccc :=_fggc +_bcbeg ;_gede ,_aabf :=_ecgd .decodeID ();if _aabf !=nil {return _aabf ;};_ffgc ,_aabf :=_ecgd .decodeRI ();if _aabf !=nil {return _aabf ;};_acbga ,_aabf :=_ecgd .decodeIb (_ffgc ,_gede );
if _aabf !=nil {return _aabf ;};if _aabf =_ecgd .blit (_acbga ,_dccc );_aabf !=nil {return _aabf ;};_bac ++;};};return nil ;};func (_bbfd *SymbolDictionary )encodeNumSyms (_bfdc _be .BinaryWriter )(_dccg int ,_eaf error ){const _abea ="\u0065\u006e\u0063\u006f\u0064\u0065\u004e\u0075\u006d\u0053\u0079\u006d\u0073";
_bbed :=make ([]byte ,4);_b .BigEndian .PutUint32 (_bbed ,_bbfd .NumberOfExportedSymbols );if _dccg ,_eaf =_bfdc .Write (_bbed );_eaf !=nil {return _dccg ,_bg .Wrap (_eaf ,_abea ,"\u0065\u0078p\u006f\u0072\u0074e\u0064\u0020\u0073\u0079\u006d\u0062\u006f\u006c\u0073");
};_b .BigEndian .PutUint32 (_bbed ,_bbfd .NumberOfNewSymbols );_efdd ,_eaf :=_bfdc .Write (_bbed );if _eaf !=nil {return _dccg ,_bg .Wrap (_eaf ,_abea ,"n\u0065\u0077\u0020\u0073\u0079\u006d\u0062\u006f\u006c\u0073");};return _dccg +_efdd ,nil ;};func (_adf *GenericRegion )Size ()int {return _adf .RegionSegment .Size ()+1+2*len (_adf .GBAtX )};
func (_ffcdg *PatternDictionary )parseHeader ()error {_ecc .Log .Trace ("\u005b\u0050\u0041\u0054\u0054\u0045\u0052\u004e\u002d\u0044\u0049\u0043\u0054I\u004f\u004e\u0041\u0052\u0059\u005d[\u0070\u0061\u0072\u0073\u0065\u0048\u0065\u0061\u0064\u0065\u0072\u005d\u0020b\u0065\u0067\u0069\u006e");
defer func (){_ecc .Log .Trace ("\u005b\u0050\u0041T\u0054\u0045\u0052\u004e\u002d\u0044\u0049\u0043\u0054\u0049\u004f\u004e\u0041\u0052\u0059\u005d\u005b\u0070\u0061\u0072\u0073\u0065\u0048\u0065\u0061\u0064\u0065\u0072\u005d \u0066\u0069\u006e\u0069\u0073\u0068\u0065\u0064");
}();_ ,_dea :=_ffcdg ._agcg .ReadBits (5);if _dea !=nil {return _dea ;};if _dea =_ffcdg .readTemplate ();_dea !=nil {return _dea ;};if _dea =_ffcdg .readIsMMREncoded ();_dea !=nil {return _dea ;};if _dea =_ffcdg .readPatternWidthAndHeight ();_dea !=nil {return _dea ;
};if _dea =_ffcdg .readGrayMax ();_dea !=nil {return _dea ;};if _dea =_ffcdg .computeSegmentDataStructure ();_dea !=nil {return _dea ;};return _ffcdg .checkInput ();};type Segmenter interface{Init (_efca *Header ,_afde *_be .Reader )error ;};func (_efed *SymbolDictionary )encodeSymbols (_eebe _be .BinaryWriter )(_degfb int ,_beag error ){const _edda ="\u0065\u006e\u0063o\u0064\u0065\u0053\u0079\u006d\u0062\u006f\u006c";
_aaea :=_bd .New ();_aaea .Init ();_eaaf ,_beag :=_efed ._dbgf .SelectByIndexes (_efed ._ffef );if _beag !=nil {return 0,_bg .Wrap (_beag ,_edda ,"\u0069n\u0069\u0074\u0069\u0061\u006c");};_egbe :=map[*_eag .Bitmap ]int {};for _abaca ,_adcd :=range _eaaf .Values {_egbe [_adcd ]=_abaca ;
};_eaaf .SortByHeight ();var _ece ,_egbg int ;_bbegb ,_beag :=_eaaf .GroupByHeight ();if _beag !=nil {return 0,_bg .Wrap (_beag ,_edda ,"");};for _ ,_gdfa :=range _bbegb .Values {_ddad :=_gdfa .Values [0].Height ;_gaea :=_ddad -_ece ;if _beag =_aaea .EncodeInteger (_bd .IADH ,_gaea );
_beag !=nil {return 0,_bg .Wrapf (_beag ,_edda ,"\u0049\u0041\u0044\u0048\u0020\u0066\u006f\u0072\u0020\u0064\u0068\u003a \u0027\u0025\u0064\u0027",_gaea );};_ece =_ddad ;_afga ,_ecdd :=_gdfa .GroupByWidth ();if _ecdd !=nil {return 0,_bg .Wrapf (_ecdd ,_edda ,"\u0068\u0065\u0069g\u0068\u0074\u003a\u0020\u0027\u0025\u0064\u0027",_ddad );
};var _aebe int ;for _ ,_dgbf :=range _afga .Values {for _ ,_edff :=range _dgbf .Values {_bcg :=_edff .Width ;_agaf :=_bcg -_aebe ;if _ecdd =_aaea .EncodeInteger (_bd .IADW ,_agaf );_ecdd !=nil {return 0,_bg .Wrapf (_ecdd ,_edda ,"\u0049\u0041\u0044\u0057\u0020\u0066\u006f\u0072\u0020\u0064\u0077\u003a \u0027\u0025\u0064\u0027",_agaf );
};_aebe +=_agaf ;if _ecdd =_aaea .EncodeBitmap (_edff ,false );_ecdd !=nil {return 0,_bg .Wrapf (_ecdd ,_edda ,"H\u0065i\u0067\u0068\u0074\u003a\u0020\u0025\u0064\u0020W\u0069\u0064\u0074\u0068: \u0025\u0064",_ddad ,_bcg );};_gebc :=_egbe [_edff ];_efed ._ffa [_gebc ]=_egbg ;
_egbg ++;};};if _ecdd =_aaea .EncodeOOB (_bd .IADW );_ecdd !=nil {return 0,_bg .Wrap (_ecdd ,_edda ,"\u0049\u0041\u0044\u0057");};};if _beag =_aaea .EncodeInteger (_bd .IAEX ,0);_beag !=nil {return 0,_bg .Wrap (_beag ,_edda ,"\u0065\u0078p\u006f\u0072\u0074e\u0064\u0020\u0073\u0079\u006d\u0062\u006f\u006c\u0073");
};if _beag =_aaea .EncodeInteger (_bd .IAEX ,len (_efed ._ffef ));_beag !=nil {return 0,_bg .Wrap (_beag ,_edda ,"\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0073\u0079m\u0062\u006f\u006c\u0073");};_aaea .Final ();_dcgc ,_beag :=_aaea .WriteTo (_eebe );
if _beag !=nil {return 0,_bg .Wrap (_beag ,_edda ,"\u0077\u0072i\u0074\u0069\u006e\u0067 \u0065\u006ec\u006f\u0064\u0065\u0072\u0020\u0063\u006f\u006et\u0065\u0078\u0074\u0020\u0074\u006f\u0020\u0027\u0077\u0027\u0020\u0077r\u0069\u0074\u0065\u0072");};
return int (_dcgc ),nil ;};func (_gaaa *Header )readHeaderFlags ()error {const _fcdg ="\u0072e\u0061d\u0048\u0065\u0061\u0064\u0065\u0072\u0046\u006c\u0061\u0067\u0073";_feea ,_fge :=_gaaa .Reader .ReadBit ();if _fge !=nil {return _bg .Wrap (_fge ,_fcdg ,"r\u0065\u0074\u0061\u0069\u006e\u0020\u0066\u006c\u0061\u0067");
};if _feea !=0{_gaaa .RetainFlag =true ;};_feea ,_fge =_gaaa .Reader .ReadBit ();if _fge !=nil {return _bg .Wrap (_fge ,_fcdg ,"\u0070\u0061g\u0065\u0020\u0061s\u0073\u006f\u0063\u0069\u0061\u0074\u0069\u006f\u006e");};if _feea !=0{_gaaa .PageAssociationFieldSize =true ;
};_daff ,_fge :=_gaaa .Reader .ReadBits (6);if _fge !=nil {return _bg .Wrap (_fge ,_fcdg ,"\u0073\u0065\u0067m\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065");};_gaaa .Type =Type (int (_daff ));return nil ;};func (_baa *GenericRefinementRegion )decodeTypicalPredictedLineTemplate0 (_aed ,_bddf ,_eae ,_ffe ,_bgd ,_df ,_eef ,_fgg ,_acd int )error {var (_gfg ,_eff ,_eb ,_gac ,_feg ,_eac int ;
_gag byte ;_aaf error ;);if _aed > 0{_gag ,_aaf =_baa .RegionBitmap .GetByte (_eef -_eae );if _aaf !=nil {return _aaf ;};_eb =int (_gag );};if _fgg > 0&&_fgg <=_baa .ReferenceBitmap .Height {_gag ,_aaf =_baa .ReferenceBitmap .GetByte (_acd -_ffe +_df );
if _aaf !=nil {return _aaf ;};_gac =int (_gag )<<4;};if _fgg >=0&&_fgg < _baa .ReferenceBitmap .Height {_gag ,_aaf =_baa .ReferenceBitmap .GetByte (_acd +_df );if _aaf !=nil {return _aaf ;};_feg =int (_gag )<<1;};if _fgg > -2&&_fgg < _baa .ReferenceBitmap .Height -1{_gag ,_aaf =_baa .ReferenceBitmap .GetByte (_acd +_ffe +_df );
if _aaf !=nil {return _aaf ;};_eac =int (_gag );};_gfg =((_eb >>5)&0x6)|((_eac >>2)&0x30)|(_feg &0x180)|(_gac &0xc00);var _cbc int ;for _gcg :=0;_gcg < _bgd ;_gcg =_cbc {var _abba int ;_cbc =_gcg +8;var _ggee int ;if _ggee =_bddf -_gcg ;_ggee > 8{_ggee =8;
};_ddg :=_cbc < _bddf ;_dfe :=_cbc < _baa .ReferenceBitmap .Width ;_ggg :=_df +1;if _aed > 0{_gag =0;if _ddg {_gag ,_aaf =_baa .RegionBitmap .GetByte (_eef -_eae +1);if _aaf !=nil {return _aaf ;};};_eb =(_eb <<8)|int (_gag );};if _fgg > 0&&_fgg <=_baa .ReferenceBitmap .Height {var _fga int ;
if _dfe {_gag ,_aaf =_baa .ReferenceBitmap .GetByte (_acd -_ffe +_ggg );if _aaf !=nil {return _aaf ;};_fga =int (_gag )<<4;};_gac =(_gac <<8)|_fga ;};if _fgg >=0&&_fgg < _baa .ReferenceBitmap .Height {var _bab int ;if _dfe {_gag ,_aaf =_baa .ReferenceBitmap .GetByte (_acd +_ggg );
if _aaf !=nil {return _aaf ;};_bab =int (_gag )<<1;};_feg =(_feg <<8)|_bab ;};if _fgg > -2&&_fgg < (_baa .ReferenceBitmap .Height -1){_gag =0;if _dfe {_gag ,_aaf =_baa .ReferenceBitmap .GetByte (_acd +_ffe +_ggg );if _aaf !=nil {return _aaf ;};};_eac =(_eac <<8)|int (_gag );
};for _abe :=0;_abe < _ggee ;_abe ++{var _aga int ;_fee :=false ;_fef :=(_gfg >>4)&0x1ff;if _fef ==0x1ff{_fee =true ;_aga =1;}else if _fef ==0x00{_fee =true ;};if !_fee {if _baa ._fd {_eff =_baa .overrideAtTemplate0 (_gfg ,_gcg +_abe ,_aed ,_abba ,_abe );
_baa ._eeb .SetIndex (int32 (_eff ));}else {_baa ._eeb .SetIndex (int32 (_gfg ));};_aga ,_aaf =_baa ._bda .DecodeBit (_baa ._eeb );if _aaf !=nil {return _aaf ;};};_bbg :=uint (7-_abe );_abba |=_aga <<_bbg ;_gfg =((_gfg &0xdb6)<<1)|_aga |(_eb >>_bbg +5)&0x002|((_eac >>_bbg +2)&0x010)|((_feg >>_bbg )&0x080)|((_gac >>_bbg )&0x400);
};_aaf =_baa .RegionBitmap .SetByte (_eef ,byte (_abba ));if _aaf !=nil {return _aaf ;};_eef ++;_acd ++;};return nil ;};func (_ef *GenericRefinementRegion )decodeSLTP ()(int ,error ){_ef .Template .setIndex (_ef ._eeb );return _ef ._bda .DecodeBit (_ef ._eeb );
};func (_efb *GenericRegion )readGBAtPixels (_agd int )error {const _aafc ="\u0072\u0065\u0061\u0064\u0047\u0042\u0041\u0074\u0050i\u0078\u0065\u006c\u0073";_efb .GBAtX =make ([]int8 ,_agd );_efb .GBAtY =make ([]int8 ,_agd );for _bfa :=0;_bfa < _agd ;_bfa ++{_fac ,_fgagf :=_efb ._fb .ReadByte ();
if _fgagf !=nil {return _bg .Wrapf (_fgagf ,_aafc ,"\u0058\u0020\u0061t\u0020\u0069\u003a\u0020\u0027\u0025\u0064\u0027",_bfa );};_efb .GBAtX [_bfa ]=int8 (_fac );_fac ,_fgagf =_efb ._fb .ReadByte ();if _fgagf !=nil {return _bg .Wrapf (_fgagf ,_aafc ,"\u0059\u0020\u0061t\u0020\u0069\u003a\u0020\u0027\u0025\u0064\u0027",_bfa );
};_efb .GBAtY [_bfa ]=int8 (_fac );};return nil ;};func (_abcc *GenericRegion )copyLineAbove (_bdac int )error {_abbc :=_bdac *_abcc .Bitmap .RowStride ;_aeg :=_abbc -_abcc .Bitmap .RowStride ;for _ggca :=0;_ggca < _abcc .Bitmap .RowStride ;_ggca ++{_dbdf ,_dagc :=_abcc .Bitmap .GetByte (_aeg );
if _dagc !=nil {return _dagc ;};_aeg ++;if _dagc =_abcc .Bitmap .SetByte (_abbc ,_dbdf );_dagc !=nil {return _dagc ;};_abbc ++;};return nil ;};func (_gdda *HalftoneRegion )GetRegionBitmap ()(*_eag .Bitmap ,error ){if _gdda .HalftoneRegionBitmap !=nil {return _gdda .HalftoneRegionBitmap ,nil ;
};var _bgfc error ;_gdda .HalftoneRegionBitmap =_eag .New (int (_gdda .RegionSegment .BitmapWidth ),int (_gdda .RegionSegment .BitmapHeight ));if _gdda .Patterns ==nil ||len (_gdda .Patterns )==0{_gdda .Patterns ,_bgfc =_gdda .GetPatterns ();if _bgfc !=nil {return nil ,_bgfc ;
};};if _gdda .HDefaultPixel ==1{_gdda .HalftoneRegionBitmap .SetDefaultPixel ();};_baf :=_d .Ceil (_d .Log (float64 (len (_gdda .Patterns )))/_d .Log (2));_aab :=int (_baf );var _gege [][]int ;_gege ,_bgfc =_gdda .grayScaleDecoding (_aab );if _bgfc !=nil {return nil ,_bgfc ;
};if _bgfc =_gdda .renderPattern (_gege );_bgfc !=nil {return nil ,_bgfc ;};return _gdda .HalftoneRegionBitmap ,nil ;};func (_fgcc *GenericRegion )decodeTemplate3 (_cdfd ,_fag ,_ccfd int ,_ceb ,_gcd int )(_fgbb error ){const _bbc ="\u0064e\u0063o\u0064\u0065\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0033";
var (_cdfe ,_bbbf int ;_gcdf int ;_cee byte ;_ccc ,_dfec int ;);if _cdfd >=1{_cee ,_fgbb =_fgcc .Bitmap .GetByte (_gcd );if _fgbb !=nil {return _bg .Wrap (_fgbb ,_bbc ,"\u006ci\u006e\u0065\u0020\u003e\u003d\u00201");};_gcdf =int (_cee );};_cdfe =(_gcdf >>1)&0x70;
for _dbff :=0;_dbff < _ccfd ;_dbff =_ccc {var (_dcba byte ;_bgdf int ;);_ccc =_dbff +8;if _cccc :=_fag -_dbff ;_cccc > 8{_bgdf =8;}else {_bgdf =_cccc ;};if _cdfd >=1{_gcdf <<=8;if _ccc < _fag {_cee ,_fgbb =_fgcc .Bitmap .GetByte (_gcd +1);if _fgbb !=nil {return _bg .Wrap (_fgbb ,_bbc ,"\u0069\u006e\u006e\u0065\u0072\u0020\u002d\u0020\u006c\u0069\u006e\u0065 \u003e\u003d\u0020\u0031");
};_gcdf |=int (_cee );};};for _effg :=0;_effg < _bgdf ;_effg ++{if _fgcc ._ebfe {_bbbf =_fgcc .overrideAtTemplate3 (_cdfe ,_dbff +_effg ,_cdfd ,int (_dcba ),_effg );_fgcc ._gcgd .SetIndex (int32 (_bbbf ));}else {_fgcc ._gcgd .SetIndex (int32 (_cdfe ));
};_dfec ,_fgbb =_fgcc ._dac .DecodeBit (_fgcc ._gcgd );if _fgbb !=nil {return _bg .Wrap (_fgbb ,_bbc ,"");};_dcba |=byte (_dfec )<<byte (7-_effg );_cdfe =((_cdfe &0x1f7)<<1)|_dfec |((_gcdf >>uint (8-_effg ))&0x010);};if _cbca :=_fgcc .Bitmap .SetByte (_ceb ,_dcba );
_cbca !=nil {return _bg .Wrap (_cbca ,_bbc ,"");};_ceb ++;_gcd ++;};return nil ;};func (_gedf *TableSegment )parseHeader ()error {var (_cacg int ;_fgdf uint64 ;_egdg error ;);_cacg ,_egdg =_gedf ._daggf .ReadBit ();if _egdg !=nil {return _egdg ;};if _cacg ==1{return _c .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0074\u0061\u0062\u006c\u0065 \u0073\u0065\u0067\u006d\u0065\u006e\u0074\u0020\u0064e\u0066\u0069\u006e\u0069\u0074\u0069\u006f\u006e\u002e\u0020\u0042\u002e\u0032\u002e1\u0020\u0043\u006f\u0064\u0065\u0020\u0054\u0061\u0062\u006c\u0065\u0020\u0066\u006c\u0061\u0067\u0073\u003a\u0020\u0042\u0069\u0074\u0020\u0037\u0020\u006d\u0075\u0073\u0074\u0020b\u0065\u0020\u007a\u0065\u0072\u006f\u002e\u0020\u0057a\u0073\u003a \u0025\u0064",_cacg );
};if _fgdf ,_egdg =_gedf ._daggf .ReadBits (3);_egdg !=nil {return _egdg ;};_gedf ._fbef =(int32 (_fgdf )+1)&0xf;if _fgdf ,_egdg =_gedf ._daggf .ReadBits (3);_egdg !=nil {return _egdg ;};_gedf ._bfgb =(int32 (_fgdf )+1)&0xf;if _fgdf ,_egdg =_gedf ._daggf .ReadBits (32);
_egdg !=nil {return _egdg ;};_gedf ._ddcb =int32 (_fgdf &_d .MaxInt32 );if _fgdf ,_egdg =_gedf ._daggf .ReadBits (32);_egdg !=nil {return _egdg ;};_gedf ._egbfb =int32 (_fgdf &_d .MaxInt32 );return nil ;};func (_eaag *template1 )form (_gdc ,_dfg ,_dbd ,_dcf ,_bgg int16 )int16 {return ((_gdc &0x02)<<8)|(_dfg <<6)|((_dbd &0x03)<<4)|(_dcf <<1)|_bgg ;
};var (_fdd Segmenter ;_bga =map[Type ]func ()Segmenter {TSymbolDictionary :func ()Segmenter {return &SymbolDictionary {}},TIntermediateTextRegion :func ()Segmenter {return &TextRegion {}},TImmediateTextRegion :func ()Segmenter {return &TextRegion {}},TImmediateLosslessTextRegion :func ()Segmenter {return &TextRegion {}},TPatternDictionary :func ()Segmenter {return &PatternDictionary {}},TIntermediateHalftoneRegion :func ()Segmenter {return &HalftoneRegion {}},TImmediateHalftoneRegion :func ()Segmenter {return &HalftoneRegion {}},TImmediateLosslessHalftoneRegion :func ()Segmenter {return &HalftoneRegion {}},TIntermediateGenericRegion :func ()Segmenter {return &GenericRegion {}},TImmediateGenericRegion :func ()Segmenter {return &GenericRegion {}},TImmediateLosslessGenericRegion :func ()Segmenter {return &GenericRegion {}},TIntermediateGenericRefinementRegion :func ()Segmenter {return &GenericRefinementRegion {}},TImmediateGenericRefinementRegion :func ()Segmenter {return &GenericRefinementRegion {}},TImmediateLosslessGenericRefinementRegion :func ()Segmenter {return &GenericRefinementRegion {}},TPageInformation :func ()Segmenter {return &PageInformationSegment {}},TEndOfPage :func ()Segmenter {return _fdd },TEndOfStrip :func ()Segmenter {return &EndOfStripe {}},TEndOfFile :func ()Segmenter {return _fdd },TProfiles :func ()Segmenter {return _fdd },TTables :func ()Segmenter {return &TableSegment {}},TExtension :func ()Segmenter {return _fdd },TBitmap :func ()Segmenter {return _fdd }};
);func (_faad *PageInformationSegment )Size ()int {return 19};func (_ega *PageInformationSegment )String ()string {_edea :=&_db .Builder {};_edea .WriteString ("\u000a\u005b\u0050\u0041G\u0045\u002d\u0049\u004e\u0046\u004f\u0052\u004d\u0041\u0054I\u004fN\u002d\u0053\u0045\u0047\u004d\u0045\u004eT\u005d\u000a");
_edea .WriteString (_c .Sprintf ("\u0009\u002d \u0042\u004d\u0048e\u0069\u0067\u0068\u0074\u003a\u0020\u0025\u0064\u000a",_ega .PageBMHeight ));_edea .WriteString (_c .Sprintf ("\u0009-\u0020B\u004d\u0057\u0069\u0064\u0074\u0068\u003a\u0020\u0025\u0064\u000a",_ega .PageBMWidth ));
_edea .WriteString (_c .Sprintf ("\u0009\u002d\u0020\u0052es\u006f\u006c\u0075\u0074\u0069\u006f\u006e\u0058\u003a\u0020\u0025\u0064\u000a",_ega .ResolutionX ));_edea .WriteString (_c .Sprintf ("\u0009\u002d\u0020\u0052es\u006f\u006c\u0075\u0074\u0069\u006f\u006e\u0059\u003a\u0020\u0025\u0064\u000a",_ega .ResolutionY ));
_edea .WriteString (_c .Sprintf ("\t\u002d\u0020\u0043\u006f\u006d\u0062i\u006e\u0061\u0074\u0069\u006f\u006e\u004f\u0070\u0065r\u0061\u0074\u006fr\u003a \u0025\u0073\u000a",_ega ._cbge ));_edea .WriteString (_c .Sprintf ("\t\u002d\u0020\u0043\u006f\u006d\u0062i\u006e\u0061\u0074\u0069\u006f\u006eO\u0070\u0065\u0072\u0061\u0074\u006f\u0072O\u0076\u0065\u0072\u0072\u0069\u0064\u0065\u003a\u0020\u0025v\u000a",_ega ._bad ));
_edea .WriteString (_c .Sprintf ("\u0009-\u0020I\u0073\u004c\u006f\u0073\u0073l\u0065\u0073s\u003a\u0020\u0025\u0076\u000a",_ega .IsLossless ));_edea .WriteString (_c .Sprintf ("\u0009\u002d\u0020R\u0065\u0071\u0075\u0069r\u0065\u0073\u0041\u0075\u0078\u0069\u006ci\u0061\u0072\u0079\u0042\u0075\u0066\u0066\u0065\u0072\u003a\u0020\u0025\u0076\u000a",_ega ._adg ));
_edea .WriteString (_c .Sprintf ("\u0009\u002d\u0020M\u0069\u0067\u0068\u0074C\u006f\u006e\u0074\u0061\u0069\u006e\u0052e\u0066\u0069\u006e\u0065\u006d\u0065\u006e\u0074\u0073\u003a\u0020\u0025\u0076\u000a",_ega ._ceaca ));_edea .WriteString (_c .Sprintf ("\u0009\u002d\u0020\u0049\u0073\u0053\u0074\u0072\u0069\u0070\u0065\u0064:\u0020\u0025\u0076\u000a",_ega .IsStripe ));
_edea .WriteString (_c .Sprintf ("\t\u002d\u0020\u004d\u0061xS\u0074r\u0069\u0070\u0065\u0053\u0069z\u0065\u003a\u0020\u0025\u0076\u000a",_ega .MaxStripeSize ));return _edea .String ();};func (_cdda *PageInformationSegment )readRequiresAuxiliaryBuffer ()error {_fbf ,_agfa :=_cdda ._cbcb .ReadBit ();
if _agfa !=nil {return _agfa ;};if _fbf ==1{_cdda ._adg =true ;};return nil ;};func (_fgbcb *GenericRefinementRegion )setParameters (_fab *_g .DecoderStats ,_aeee *_g .Decoder ,_geb int8 ,_dce ,_bdabf uint32 ,_cea *_eag .Bitmap ,_acg ,_ada int32 ,_cde bool ,_eca []int8 ,_ccf []int8 ){_ecc .Log .Trace ("\u005b\u0047\u0045NE\u0052\u0049\u0043\u002d\u0052\u0045\u0046\u002d\u0052E\u0047I\u004fN\u005d \u0073\u0065\u0074\u0050\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073");
if _fab !=nil {_fgbcb ._eeb =_fab ;};if _aeee !=nil {_fgbcb ._bda =_aeee ;};_fgbcb .TemplateID =_geb ;_fgbcb .RegionInfo .BitmapWidth =_dce ;_fgbcb .RegionInfo .BitmapHeight =_bdabf ;_fgbcb .ReferenceBitmap =_cea ;_fgbcb .ReferenceDX =_acg ;_fgbcb .ReferenceDY =_ada ;
_fgbcb .IsTPGROn =_cde ;_fgbcb .GrAtX =_eca ;_fgbcb .GrAtY =_ccf ;_fgbcb .RegionBitmap =nil ;_ecc .Log .Trace ("[\u0047\u0045\u004e\u0045\u0052\u0049\u0043\u002d\u0052E\u0046\u002d\u0052\u0045\u0047\u0049\u004fN]\u0020\u0073\u0065\u0074P\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073 f\u0069\u006ei\u0073\u0068\u0065\u0064\u002e\u0020\u0025\u0073",_fgbcb );
};var (_ Regioner =&TextRegion {};_ Segmenter =&TextRegion {};);func (_abaf *Header )Encode (w _be .BinaryWriter )(_egdf int ,_dec error ){const _bgfg ="\u0048\u0065\u0061d\u0065\u0072\u002e\u0057\u0072\u0069\u0074\u0065";var _befb _be .BinaryWriter ;_ecc .Log .Trace ("\u005b\u0053\u0045G\u004d\u0045\u004e\u0054-\u0048\u0045\u0041\u0044\u0045\u0052\u005d[\u0045\u004e\u0043\u004f\u0044\u0045\u005d\u0020\u0042\u0065\u0067\u0069\u006e\u0073");
defer func (){if _dec !=nil {_ecc .Log .Trace ("[\u0053\u0045\u0047\u004d\u0045\u004eT\u002d\u0048\u0045\u0041\u0044\u0045R\u005d\u005b\u0045\u004e\u0043\u004f\u0044E\u005d\u0020\u0046\u0061\u0069\u006c\u0065\u0064\u002e\u0020%\u0076",_dec );}else {_ecc .Log .Trace ("\u005b\u0053\u0045\u0047ME\u004e\u0054\u002d\u0048\u0045\u0041\u0044\u0045\u0052\u005d\u0020\u0025\u0076",_abaf );
_ecc .Log .Trace ("\u005b\u0053\u0045\u0047\u004d\u0045N\u0054\u002d\u0048\u0045\u0041\u0044\u0045\u0052\u005d\u005b\u0045\u004e\u0043O\u0044\u0045\u005d\u0020\u0046\u0069\u006ei\u0073\u0068\u0065\u0064");};}();w .FinishByte ();if _abaf .SegmentData !=nil {_bgecff ,_abdd :=_abaf .SegmentData .(SegmentEncoder );
if !_abdd {return 0,_bg .Errorf (_bgfg ,"\u0053\u0065\u0067\u006d\u0065\u006e\u0074\u003a\u0020\u0025\u0054\u0020\u0064\u006f\u0065s\u006e\u0027\u0074\u0020\u0069\u006d\u0070\u006c\u0065\u006d\u0065\u006e\u0074 \u0053\u0065\u0067\u006d\u0065\u006e\u0074\u0045\u006e\u0063\u006f\u0064er\u0020\u0069\u006e\u0074\u0065\u0072\u0066\u0061\u0063\u0065",_abaf .SegmentData );
};_befb =_be .BufferedMSB ();_egdf ,_dec =_bgecff .Encode (_befb );if _dec !=nil {return 0,_bg .Wrap (_dec ,_bgfg ,"");};_abaf .SegmentDataLength =uint64 (_egdf );};if _abaf .pageSize ()==4{_abaf .PageAssociationFieldSize =true ;};var _gfgd int ;_gfgd ,_dec =_abaf .writeSegmentNumber (w );
if _dec !=nil {return 0,_bg .Wrap (_dec ,_bgfg ,"");};_egdf +=_gfgd ;if _dec =_abaf .writeFlags (w );_dec !=nil {return _egdf ,_bg .Wrap (_dec ,_bgfg ,"");};_egdf ++;_gfgd ,_dec =_abaf .writeReferredToCount (w );if _dec !=nil {return 0,_bg .Wrap (_dec ,_bgfg ,"");
};_egdf +=_gfgd ;_gfgd ,_dec =_abaf .writeReferredToSegments (w );if _dec !=nil {return 0,_bg .Wrap (_dec ,_bgfg ,"");};_egdf +=_gfgd ;_gfgd ,_dec =_abaf .writeSegmentPageAssociation (w );if _dec !=nil {return 0,_bg .Wrap (_dec ,_bgfg ,"");};_egdf +=_gfgd ;
_gfgd ,_dec =_abaf .writeSegmentDataLength (w );if _dec !=nil {return 0,_bg .Wrap (_dec ,_bgfg ,"");};_egdf +=_gfgd ;_abaf .HeaderLength =int64 (_egdf )-int64 (_abaf .SegmentDataLength );if _befb !=nil {if _ ,_dec =w .Write (_befb .Data ());_dec !=nil {return _egdf ,_bg .Wrap (_dec ,_bgfg ,"\u0077r\u0069t\u0065\u0020\u0073\u0065\u0067m\u0065\u006et\u0020\u0064\u0061\u0074\u0061");
};};return _egdf ,nil ;};func (_ddbe *TextRegion )parseHeader ()error {var _bgde error ;_ecc .Log .Trace ("\u005b\u0054E\u0058\u0054\u0020\u0052E\u0047\u0049O\u004e\u005d\u005b\u0050\u0041\u0052\u0053\u0045-\u0048\u0045\u0041\u0044\u0045\u0052\u005d\u0020\u0062\u0065\u0067\u0069n\u0073\u002e\u002e\u002e");
defer func (){if _bgde !=nil {_ecc .Log .Trace ("\u005b\u0054\u0045\u0058\u0054\u0020\u0052\u0045\u0047\u0049\u004f\u004e\u005d\u005b\u0050\u0041\u0052\u0053\u0045\u002d\u0048\u0045\u0041\u0044E\u0052\u005d\u0020\u0066\u0061i\u006c\u0065d\u002e\u0020\u0025\u0076",_bgde );
}else {_ecc .Log .Trace ("\u005b\u0054E\u0058\u0054\u0020\u0052E\u0047\u0049O\u004e\u005d\u005b\u0050\u0041\u0052\u0053\u0045-\u0048\u0045\u0041\u0044\u0045\u0052\u005d\u0020\u0066\u0069\u006e\u0069s\u0068\u0065\u0064\u002e");};}();if _bgde =_ddbe .RegionInfo .parseHeader ();
_bgde !=nil {return _bgde ;};if _bgde =_ddbe .readRegionFlags ();_bgde !=nil {return _bgde ;};if _ddbe .IsHuffmanEncoded {if _bgde =_ddbe .readHuffmanFlags ();_bgde !=nil {return _bgde ;};};if _bgde =_ddbe .readUseRefinement ();_bgde !=nil {return _bgde ;
};if _bgde =_ddbe .readAmountOfSymbolInstances ();_bgde !=nil {return _bgde ;};if _bgde =_ddbe .getSymbols ();_bgde !=nil {return _bgde ;};if _bgde =_ddbe .computeSymbolCodeLength ();_bgde !=nil {return _bgde ;};if _bgde =_ddbe .checkInput ();_bgde !=nil {return _bgde ;
};_ecc .Log .Trace ("\u0025\u0073",_ddbe .String ());return nil ;};var _ SegmentEncoder =&RegionSegment {};func (_deb *GenericRegion )GetRegionInfo ()*RegionSegment {return _deb .RegionSegment };func (_bfbg *TableSegment )StreamReader ()*_be .Reader {return _bfbg ._daggf };
func (_feffb *SymbolDictionary )readNumberOfExportedSymbols ()error {_bfgfg ,_bgbg :=_feffb ._cecgc .ReadBits (32);if _bgbg !=nil {return _bgbg ;};_feffb .NumberOfExportedSymbols =uint32 (_bfgfg &_d .MaxUint32 );return nil ;};func (_geg *GenericRefinementRegion )decodeTypicalPredictedLineTemplate1 (_bde ,_fgd ,_ccg ,_gcb ,_bdg ,_ed ,_cdf ,_gd ,_cdfc int )(_agg error ){var (_cgd ,_fae int ;
_gee ,_bef int ;_ffb ,_eccd int ;_bca byte ;);if _bde > 0{_bca ,_agg =_geg .RegionBitmap .GetByte (_cdf -_ccg );if _agg !=nil {return ;};_gee =int (_bca );};if _gd > 0&&_gd <=_geg .ReferenceBitmap .Height {_bca ,_agg =_geg .ReferenceBitmap .GetByte (_cdfc -_gcb +_ed );
if _agg !=nil {return ;};_bef =int (_bca )<<2;};if _gd >=0&&_gd < _geg .ReferenceBitmap .Height {_bca ,_agg =_geg .ReferenceBitmap .GetByte (_cdfc +_ed );if _agg !=nil {return ;};_ffb =int (_bca );};if _gd > -2&&_gd < _geg .ReferenceBitmap .Height -1{_bca ,_agg =_geg .ReferenceBitmap .GetByte (_cdfc +_gcb +_ed );
if _agg !=nil {return ;};_eccd =int (_bca );};_cgd =((_gee >>5)&0x6)|((_eccd >>2)&0x30)|(_ffb &0xc0)|(_bef &0x200);_fae =((_eccd >>2)&0x70)|(_ffb &0xc0)|(_bef &0x700);var _aaa int ;for _faf :=0;_faf < _bdg ;_faf =_aaa {var (_gceg int ;_ggd int ;);_aaa =_faf +8;
if _gceg =_fgd -_faf ;_gceg > 8{_gceg =8;};_fgb :=_aaa < _fgd ;_add :=_aaa < _geg .ReferenceBitmap .Width ;_af :=_ed +1;if _bde > 0{_bca =0;if _fgb {_bca ,_agg =_geg .RegionBitmap .GetByte (_cdf -_ccg +1);if _agg !=nil {return ;};};_gee =(_gee <<8)|int (_bca );
};if _gd > 0&&_gd <=_geg .ReferenceBitmap .Height {var _bdad int ;if _add {_bca ,_agg =_geg .ReferenceBitmap .GetByte (_cdfc -_gcb +_af );if _agg !=nil {return ;};_bdad =int (_bca )<<2;};_bef =(_bef <<8)|_bdad ;};if _gd >=0&&_gd < _geg .ReferenceBitmap .Height {_bca =0;
if _add {_bca ,_agg =_geg .ReferenceBitmap .GetByte (_cdfc +_af );if _agg !=nil {return ;};};_ffb =(_ffb <<8)|int (_bca );};if _gd > -2&&_gd < (_geg .ReferenceBitmap .Height -1){_bca =0;if _add {_bca ,_agg =_geg .ReferenceBitmap .GetByte (_cdfc +_gcb +_af );
if _agg !=nil {return ;};};_eccd =(_eccd <<8)|int (_bca );};for _gga :=0;_gga < _gceg ;_gga ++{var _ffbc int ;_ecf :=(_fae >>4)&0x1ff;switch _ecf {case 0x1ff:_ffbc =1;case 0x00:_ffbc =0;default:_geg ._eeb .SetIndex (int32 (_cgd ));_ffbc ,_agg =_geg ._bda .DecodeBit (_geg ._eeb );
if _agg !=nil {return ;};};_cfc :=uint (7-_gga );_ggd |=_ffbc <<_cfc ;_cgd =((_cgd &0x0d6)<<1)|_ffbc |(_gee >>_cfc +5)&0x002|((_eccd >>_cfc +2)&0x010)|((_ffb >>_cfc )&0x040)|((_bef >>_cfc )&0x200);_fae =((_fae &0xdb)<<1)|((_eccd >>_cfc +2)&0x010)|((_ffb >>_cfc )&0x080)|((_bef >>_cfc )&0x400);
};_agg =_geg .RegionBitmap .SetByte (_cdf ,byte (_ggd ));if _agg !=nil {return ;};_cdf ++;_cdfc ++;};return nil ;};func (_edfde *TextRegion )setParameters (_bfaa *_g .Decoder ,_fagaf ,_fecbe bool ,_dacef ,_aggd uint32 ,_adegg uint32 ,_cbaa int8 ,_daggc uint32 ,_fggca int8 ,_edffg _eag .CombinationOperator ,_acfb int8 ,_agfe int16 ,_bfcg ,_cbeac ,_fggff ,_ecdf ,_cdfab ,_cfee ,_fabc ,_daae ,_eaae ,_face int8 ,_faadf ,_gfge []int8 ,_fcfb []*_eag .Bitmap ,_abbe int8 ){_edfde ._bafa =_bfaa ;
_edfde .IsHuffmanEncoded =_fagaf ;_edfde .UseRefinement =_fecbe ;_edfde .RegionInfo .BitmapWidth =_dacef ;_edfde .RegionInfo .BitmapHeight =_aggd ;_edfde .NumberOfSymbolInstances =_adegg ;_edfde .SbStrips =_cbaa ;_edfde .NumberOfSymbols =_daggc ;_edfde .DefaultPixel =_fggca ;
_edfde .CombinationOperator =_edffg ;_edfde .IsTransposed =_acfb ;_edfde .ReferenceCorner =_agfe ;_edfde .SbDsOffset =_bfcg ;_edfde .SbHuffFS =_cbeac ;_edfde .SbHuffDS =_fggff ;_edfde .SbHuffDT =_ecdf ;_edfde .SbHuffRDWidth =_cdfab ;_edfde .SbHuffRDHeight =_cfee ;
_edfde .SbHuffRSize =_eaae ;_edfde .SbHuffRDX =_fabc ;_edfde .SbHuffRDY =_daae ;_edfde .SbrTemplate =_face ;_edfde .SbrATX =_faadf ;_edfde .SbrATY =_gfge ;_edfde .Symbols =_fcfb ;_edfde ._ebcg =_abbe ;};func (_dbgg *PageInformationSegment )readIsLossless ()error {_ebdg ,_ebbdc :=_dbgg ._cbcb .ReadBit ();
if _ebbdc !=nil {return _ebbdc ;};if _ebdg ==1{_dbgg .IsLossless =true ;};return nil ;};func (_edf *GenericRegion )overrideAtTemplate1 (_afg ,_fdf ,_gaa ,_dagf ,_dfdd int )int {_afg &=0x1FF7;if _edf .GBAtY [0]==0&&_edf .GBAtX [0]>=-int8 (_dfdd ){_afg |=(_dagf >>uint (7-(int8 (_dfdd )+_edf .GBAtX [0]))&0x1)<<3;
}else {_afg |=int (_edf .getPixel (_fdf +int (_edf .GBAtX [0]),_gaa +int (_edf .GBAtY [0])))<<3;};return _afg ;};func (_bgec *GenericRegion )parseHeader ()(_abacg error ){_ecc .Log .Trace ("\u005b\u0047\u0045\u004e\u0045\u0052I\u0043\u002d\u0052\u0045\u0047\u0049\u004f\u004e\u005d\u0020\u0050\u0061\u0072s\u0069\u006e\u0067\u0048\u0065\u0061\u0064e\u0072\u002e\u002e\u002e");
defer func (){if _abacg !=nil {_ecc .Log .Trace ("\u005b\u0047\u0045\u004e\u0045\u0052\u0049\u0043\u002d\u0052\u0045\u0047\u0049\u004f\u004e]\u0020\u0050\u0061\u0072\u0073\u0069\u006e\u0067\u0048\u0065\u0061\u0064\u0065r\u0020\u0046\u0069\u006e\u0069\u0073\u0068\u0065\u0064\u0020\u0077\u0069th\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020\u0025\u0076",_abacg );
}else {_ecc .Log .Trace ("\u005b\u0047\u0045\u004e\u0045\u0052\u0049C\u002d\u0052\u0045G\u0049\u004f\u004e]\u0020\u0050a\u0072\u0073\u0069\u006e\u0067\u0048e\u0061de\u0072\u0020\u0046\u0069\u006e\u0069\u0073\u0068\u0065\u0064\u0020\u0053\u0075\u0063\u0063\u0065\u0073\u0073\u0066\u0075\u006c\u006c\u0079\u002e\u002e\u002e");
};}();var (_befg int ;_ebb uint64 ;);if _abacg =_bgec .RegionSegment .parseHeader ();_abacg !=nil {return _abacg ;};if _ ,_abacg =_bgec ._fb .ReadBits (3);_abacg !=nil {return _abacg ;};_befg ,_abacg =_bgec ._fb .ReadBit ();if _abacg !=nil {return _abacg ;
};if _befg ==1{_bgec .UseExtTemplates =true ;};_befg ,_abacg =_bgec ._fb .ReadBit ();if _abacg !=nil {return _abacg ;};if _befg ==1{_bgec .IsTPGDon =true ;};_ebb ,_abacg =_bgec ._fb .ReadBits (2);if _abacg !=nil {return _abacg ;};_bgec .GBTemplate =byte (_ebb &0xf);
_befg ,_abacg =_bgec ._fb .ReadBit ();if _abacg !=nil {return _abacg ;};if _befg ==1{_bgec .IsMMREncoded =true ;};if !_bgec .IsMMREncoded {_bfgc :=1;if _bgec .GBTemplate ==0{_bfgc =4;if _bgec .UseExtTemplates {_bfgc =12;};};if _abacg =_bgec .readGBAtPixels (_bfgc );
_abacg !=nil {return _abacg ;};};if _abacg =_bgec .computeSegmentDataStructure ();_abacg !=nil {return _abacg ;};_ecc .Log .Trace ("\u0025\u0073",_bgec );return nil ;};func (_bdc *EndOfStripe )LineNumber ()int {return _bdc ._bge };func (_gdea *SymbolDictionary )getUserTable (_badg int )(_bb .Tabler ,error ){var _dgeb int ;
for _ ,_dfcg :=range _gdea .Header .RTSegments {if _dfcg .Type ==53{if _dgeb ==_badg {_fcbd ,_aegfd :=_dfcg .GetSegmentData ();if _aegfd !=nil {return nil ,_aegfd ;};_fce :=_fcbd .(_bb .BasicTabler );return _bb .NewEncodedTable (_fce );};_dgeb ++;};};return nil ,nil ;
};func (_ffgg *GenericRegion )writeGBAtPixels (_feff _be .BinaryWriter )(_gbab int ,_aagc error ){const _fbg ="\u0077r\u0069t\u0065\u0047\u0042\u0041\u0074\u0050\u0069\u0078\u0065\u006c\u0073";if _ffgg .UseMMR {return 0,nil ;};_agc :=1;if _ffgg .GBTemplate ==0{_agc =4;
}else if _ffgg .UseExtTemplates {_agc =12;};if len (_ffgg .GBAtX )!=_agc {return 0,_bg .Errorf (_fbg ,"\u0067\u0062\u0020\u0061\u0074\u0020\u0070\u0061\u0069\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020d\u006f\u0065\u0073\u006e\u0027\u0074\u0020m\u0061\u0074\u0063\u0068\u0020\u0074\u006f\u0020\u0047\u0042\u0041t\u0058\u0020\u0073\u006c\u0069\u0063\u0065\u0020\u006c\u0065\u006e");
};if len (_ffgg .GBAtY )!=_agc {return 0,_bg .Errorf (_fbg ,"\u0067\u0062\u0020\u0061\u0074\u0020\u0070\u0061\u0069\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020d\u006f\u0065\u0073\u006e\u0027\u0074\u0020m\u0061\u0074\u0063\u0068\u0020\u0074\u006f\u0020\u0047\u0042\u0041t\u0059\u0020\u0073\u006c\u0069\u0063\u0065\u0020\u006c\u0065\u006e");
};for _aegf :=0;_aegf < _agc ;_aegf ++{if _aagc =_feff .WriteByte (byte (_ffgg .GBAtX [_aegf ]));_aagc !=nil {return _gbab ,_bg .Wrap (_aagc ,_fbg ,"w\u0072\u0069\u0074\u0065\u0020\u0047\u0042\u0041\u0074\u0058");};_gbab ++;if _aagc =_feff .WriteByte (byte (_ffgg .GBAtY [_aegf ]));
_aagc !=nil {return _gbab ,_bg .Wrap (_aagc ,_fbg ,"w\u0072\u0069\u0074\u0065\u0020\u0047\u0042\u0041\u0074\u0059");};_gbab ++;};return _gbab ,nil ;};const (ORandom OrganizationType =iota ;OSequential ;);func (_edbgd *Header )readSegmentDataLength (_egb *_be .Reader )(_dabb error ){_edbgd .SegmentDataLength ,_dabb =_egb .ReadBits (32);
if _dabb !=nil {return _dabb ;};_edbgd .SegmentDataLength &=_d .MaxInt32 ;return nil ;};func (_eccc *PatternDictionary )readIsMMREncoded ()error {_dbffb ,_dfee :=_eccc ._agcg .ReadBit ();if _dfee !=nil {return _dfee ;};if _dbffb !=0{_eccc .IsMMREncoded =true ;
};return nil ;};func (_adb *GenericRefinementRegion )parseHeader ()(_acca error ){_ecc .Log .Trace ("\u005b\u0047\u0045\u004e\u0045\u0052\u0049\u0043\u002d\u0052\u0045\u0046\u002d\u0052\u0045\u0047\u0049\u004f\u004e\u005d\u0020\u0070\u0061\u0072s\u0069\u006e\u0067\u0020\u0048e\u0061\u0064e\u0072\u002e\u002e\u002e");
_abc :=_ea .Now ();defer func (){if _acca ==nil {_ecc .Log .Trace ("\u005b\u0047\u0045\u004e\u0045\u0052\u0049\u0043\u002d\u0052\u0045\u0046\u002d\u0052\u0045G\u0049\u004f\u004e\u005d\u0020\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020h\u0065\u0061\u0064\u0065\u0072\u0020\u0066\u0069\u006e\u0069\u0073\u0068id\u0020\u0069\u006e\u003a\u0020\u0025\u0064\u0020\u006e\u0073",_ea .Since (_abc ).Nanoseconds ());
}else {_ecc .Log .Trace ("\u005b\u0047E\u004e\u0045\u0052\u0049\u0043\u002d\u0052\u0045\u0046\u002d\u0052\u0045\u0047\u0049\u004f\u004e\u005d\u0020\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0068\u0065\u0061\u0064\u0065\u0072\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0073",_acca );
};}();if _acca =_adb .RegionInfo .parseHeader ();_acca !=nil {return _acca ;};_ ,_acca =_adb ._bba .ReadBits (6);if _acca !=nil {return _acca ;};_adb .IsTPGROn ,_acca =_adb ._bba .ReadBool ();if _acca !=nil {return _acca ;};var _bfb int ;_bfb ,_acca =_adb ._bba .ReadBit ();
if _acca !=nil {return _acca ;};_adb .TemplateID =int8 (_bfb );switch _adb .TemplateID {case 0:_adb .Template =_adb ._ecb ;if _acca =_adb .readAtPixels ();_acca !=nil {return ;};case 1:_adb .Template =_adb ._cff ;};return nil ;};func _eadf (_ecge int )int {if _ecge ==0{return 0;
};_ecge |=_ecge >>1;_ecge |=_ecge >>2;_ecge |=_ecge >>4;_ecge |=_ecge >>8;_ecge |=_ecge >>16;return (_ecge +1)>>1;};func (_dacgg *Header )CleanSegmentData (){if _dacgg .SegmentData !=nil {_dacgg .SegmentData =nil ;};};func (_gbfe *TextRegion )encodeSymbols (_gged _be .BinaryWriter )(_bedfd int ,_adcdd error ){const _cagf ="\u0065\u006e\u0063\u006f\u0064\u0065\u0053\u0079\u006d\u0062\u006f\u006c\u0073";
_edfd :=make ([]byte ,4);_b .BigEndian .PutUint32 (_edfd ,_gbfe .NumberOfSymbols );if _bedfd ,_adcdd =_gged .Write (_edfd );_adcdd !=nil {return _bedfd ,_bg .Wrap (_adcdd ,_cagf ,"\u004e\u0075\u006dbe\u0072\u004f\u0066\u0053\u0079\u006d\u0062\u006f\u006c\u0049\u006e\u0073\u0074\u0061\u006e\u0063\u0065\u0073");
};_cbbb ,_adcdd :=_eag .NewClassedPoints (_gbfe ._gda ,_gbfe ._bccb );if _adcdd !=nil {return 0,_bg .Wrap (_adcdd ,_cagf ,"");};var _bgbef ,_cbdd int ;_bbfb :=_bd .New ();_bbfb .Init ();if _adcdd =_bbfb .EncodeInteger (_bd .IADT ,0);_adcdd !=nil {return _bedfd ,_bg .Wrap (_adcdd ,_cagf ,"\u0069\u006e\u0069\u0074\u0069\u0061\u006c\u0020\u0044\u0054");
};_dagd ,_adcdd :=_cbbb .GroupByY ();if _adcdd !=nil {return 0,_bg .Wrap (_adcdd ,_cagf ,"");};for _ ,_bdace :=range _dagd {_bcfgd :=int (_bdace .YAtIndex (0));_dfda :=_bcfgd -_bgbef ;if _adcdd =_bbfb .EncodeInteger (_bd .IADT ,_dfda );_adcdd !=nil {return _bedfd ,_bg .Wrap (_adcdd ,_cagf ,"");
};var _gcaa int ;for _gcde ,_gffa :=range _bdace .IntSlice {switch _gcde {case 0:_ceadc :=int (_bdace .XAtIndex (_gcde ))-_cbdd ;if _adcdd =_bbfb .EncodeInteger (_bd .IAFS ,_ceadc );_adcdd !=nil {return _bedfd ,_bg .Wrap (_adcdd ,_cagf ,"");};_cbdd +=_ceadc ;
_gcaa =_cbdd ;default:_dbgd :=int (_bdace .XAtIndex (_gcde ))-_gcaa ;if _adcdd =_bbfb .EncodeInteger (_bd .IADS ,_dbgd );_adcdd !=nil {return _bedfd ,_bg .Wrap (_adcdd ,_cagf ,"");};_gcaa +=_dbgd ;};_ccae ,_cfbd :=_gbfe ._edbgg .Get (_gffa );if _cfbd !=nil {return _bedfd ,_bg .Wrap (_cfbd ,_cagf ,"");
};_fbgdff ,_cccb :=_gbfe ._ebbdb [_ccae ];if !_cccb {_fbgdff ,_cccb =_gbfe ._cddc [_ccae ];if !_cccb {return _bedfd ,_bg .Errorf (_cagf ,"\u0053\u0079\u006d\u0062\u006f\u006c:\u0020\u0027\u0025d\u0027\u0020\u0069s\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064 \u0069\u006e\u0020\u0067\u006cob\u0061\u006c\u0020\u0061\u006e\u0064\u0020\u006c\u006f\u0063\u0061\u006c\u0020\u0073\u0079\u006d\u0062\u006f\u006c\u0020\u006d\u0061\u0070",_ccae );
};};if _cfbd =_bbfb .EncodeIAID (_gbfe ._ebcb ,_fbgdff );_cfbd !=nil {return _bedfd ,_bg .Wrap (_cfbd ,_cagf ,"");};};if _adcdd =_bbfb .EncodeOOB (_bd .IADS );_adcdd !=nil {return _bedfd ,_bg .Wrap (_adcdd ,_cagf ,"");};};_bbfb .Final ();_ccfda ,_adcdd :=_bbfb .WriteTo (_gged );
if _adcdd !=nil {return _bedfd ,_bg .Wrap (_adcdd ,_cagf ,"");};_bedfd +=int (_ccfda );return _bedfd ,nil ;};func (_caef *HalftoneRegion )parseHeader ()error {if _fcd :=_caef .RegionSegment .parseHeader ();_fcd !=nil {return _fcd ;};_bdfg ,_geggc :=_caef ._cae .ReadBit ();
if _geggc !=nil {return _geggc ;};_caef .HDefaultPixel =int8 (_bdfg );_gfae ,_geggc :=_caef ._cae .ReadBits (3);if _geggc !=nil {return _geggc ;};_caef .CombinationOperator =_eag .CombinationOperator (_gfae &0xf);_bdfg ,_geggc =_caef ._cae .ReadBit ();
if _geggc !=nil {return _geggc ;};if _bdfg ==1{_caef .HSkipEnabled =true ;};_gfae ,_geggc =_caef ._cae .ReadBits (2);if _geggc !=nil {return _geggc ;};_caef .HTemplate =byte (_gfae &0xf);_bdfg ,_geggc =_caef ._cae .ReadBit ();if _geggc !=nil {return _geggc ;
};if _bdfg ==1{_caef .IsMMREncoded =true ;};_gfae ,_geggc =_caef ._cae .ReadBits (32);if _geggc !=nil {return _geggc ;};_caef .HGridWidth =uint32 (_gfae &_d .MaxUint32 );_gfae ,_geggc =_caef ._cae .ReadBits (32);if _geggc !=nil {return _geggc ;};_caef .HGridHeight =uint32 (_gfae &_d .MaxUint32 );
_gfae ,_geggc =_caef ._cae .ReadBits (32);if _geggc !=nil {return _geggc ;};_caef .HGridX =int32 (_gfae &_d .MaxInt32 );_gfae ,_geggc =_caef ._cae .ReadBits (32);if _geggc !=nil {return _geggc ;};_caef .HGridY =int32 (_gfae &_d .MaxInt32 );_gfae ,_geggc =_caef ._cae .ReadBits (16);
if _geggc !=nil {return _geggc ;};_caef .HRegionX =uint16 (_gfae &_d .MaxUint16 );_gfae ,_geggc =_caef ._cae .ReadBits (16);if _geggc !=nil {return _geggc ;};_caef .HRegionY =uint16 (_gfae &_d .MaxUint16 );if _geggc =_caef .computeSegmentDataStructure ();
_geggc !=nil {return _geggc ;};return _caef .checkInput ();};type GenericRegion struct{_fb *_be .Reader ;DataHeaderOffset int64 ;DataHeaderLength int64 ;DataOffset int64 ;DataLength int64 ;RegionSegment *RegionSegment ;UseExtTemplates bool ;IsTPGDon bool ;
GBTemplate byte ;IsMMREncoded bool ;UseMMR bool ;GBAtX []int8 ;GBAtY []int8 ;GBAtOverride []bool ;_ebfe bool ;Bitmap *_eag .Bitmap ;_dac *_g .Decoder ;_gcgd *_g .DecoderStats ;_gdd *_cc .Decoder ;};func (_egc *GenericRegion )getPixel (_ced ,_ace int )int8 {if _ced < 0||_ced >=_egc .Bitmap .Width {return 0;
};if _ace < 0||_ace >=_egc .Bitmap .Height {return 0;};if _egc .Bitmap .GetPixel (_ced ,_ace ){return 1;};return 0;};func (_feb *PageInformationSegment )Init (h *Header ,r *_be .Reader )(_fbbc error ){_feb ._cbcb =r ;if _fbbc =_feb .parseHeader ();_fbbc !=nil {return _bg .Wrap (_fbbc ,"P\u0061\u0067\u0065\u0049\u006e\u0066o\u0072\u006d\u0061\u0074\u0069\u006f\u006e\u0053\u0065g\u006d\u0065\u006et\u002eI\u006e\u0069\u0074","");
};return nil ;};type TextRegion struct{_ecga *_be .Reader ;RegionInfo *RegionSegment ;SbrTemplate int8 ;SbDsOffset int8 ;DefaultPixel int8 ;CombinationOperator _eag .CombinationOperator ;IsTransposed int8 ;ReferenceCorner int16 ;LogSBStrips int16 ;UseRefinement bool ;
IsHuffmanEncoded bool ;SbHuffRSize int8 ;SbHuffRDY int8 ;SbHuffRDX int8 ;SbHuffRDHeight int8 ;SbHuffRDWidth int8 ;SbHuffDT int8 ;SbHuffDS int8 ;SbHuffFS int8 ;SbrATX []int8 ;SbrATY []int8 ;NumberOfSymbolInstances uint32 ;_abdc int64 ;SbStrips int8 ;NumberOfSymbols uint32 ;
RegionBitmap *_eag .Bitmap ;Symbols []*_eag .Bitmap ;_bafa *_g .Decoder ;_cab *GenericRefinementRegion ;_aaga *_g .DecoderStats ;_fdaf *_g .DecoderStats ;_afdef *_g .DecoderStats ;_bbbad *_g .DecoderStats ;_cfcc *_g .DecoderStats ;_bcbe *_g .DecoderStats ;
_cccca *_g .DecoderStats ;_gegaed *_g .DecoderStats ;_dcfef *_g .DecoderStats ;_cage *_g .DecoderStats ;_fgadd *_g .DecoderStats ;_ebcg int8 ;_cgace *_bb .FixedSizeTable ;Header *Header ;_ebce _bb .Tabler ;_bgaf _bb .Tabler ;_acae _bb .Tabler ;_fdcbg _bb .Tabler ;
_agcb _bb .Tabler ;_fbgc _bb .Tabler ;_cgcgf _bb .Tabler ;_bdbe _bb .Tabler ;_ebbdb ,_cddc map[int ]int ;_bccb []int ;_gda *_eag .Points ;_fdcbc *_eag .Bitmaps ;_edbgg *_ec .IntSlice ;_deff ,_ebcb int ;_abdbb *_eag .Boxes ;};func (_dacee *PatternDictionary )computeSegmentDataStructure ()error {_dacee .DataOffset =_dacee ._agcg .AbsolutePosition ();
_dacee .DataHeaderLength =_dacee .DataOffset -_dacee .DataHeaderOffset ;_dacee .DataLength =int64 (_dacee ._agcg .AbsoluteLength ())-_dacee .DataHeaderLength ;return nil ;};func (_ddcf *HalftoneRegion )shiftAndFill (_fda int )int {_fda >>=8;if _fda < 0{_dbcb :=int (_d .Log (float64 (_eadf (_fda )))/_d .Log (2));
_cbfc :=31-_dbcb ;for _abcb :=1;_abcb < _cbfc ;_abcb ++{_fda |=1<<uint (31-_abcb );};};return _fda ;};func (_beee *PageInformationSegment )parseHeader ()(_geef error ){_ecc .Log .Trace ("\u005b\u0050\u0061\u0067\u0065I\u006e\u0066\u006f\u0072\u006d\u0061\u0074\u0069\u006f\u006e\u0053\u0065\u0067m\u0065\u006e\u0074\u005d\u0020\u0050\u0061\u0072\u0073\u0069\u006e\u0067\u0048\u0065\u0061\u0064\u0065\u0072\u002e\u002e\u002e");
defer func (){var _aca ="[\u0050\u0061\u0067\u0065\u0049\u006e\u0066\u006f\u0072m\u0061\u0074\u0069\u006f\u006e\u0053\u0065gm\u0065\u006e\u0074\u005d \u0050\u0061\u0072\u0073\u0069\u006e\u0067\u0048\u0065ad\u0065\u0072 \u0046\u0069\u006e\u0069\u0073\u0068\u0065\u0064";
if _geef !=nil {_aca +="\u0020\u0077\u0069t\u0068\u0020\u0065\u0072\u0072\u006f\u0072\u0020"+_geef .Error ();}else {_aca +="\u0020\u0073\u0075\u0063\u0063\u0065\u0073\u0073\u0066\u0075\u006c\u006c\u0079";};_ecc .Log .Trace (_aca );}();if _geef =_beee .readWidthAndHeight ();
_geef !=nil {return _geef ;};if _geef =_beee .readResolution ();_geef !=nil {return _geef ;};_ ,_geef =_beee ._cbcb .ReadBit ();if _geef !=nil {return _geef ;};if _geef =_beee .readCombinationOperatorOverrideAllowed ();_geef !=nil {return _geef ;};if _geef =_beee .readRequiresAuxiliaryBuffer ();
_geef !=nil {return _geef ;};if _geef =_beee .readCombinationOperator ();_geef !=nil {return _geef ;};if _geef =_beee .readDefaultPixelValue ();_geef !=nil {return _geef ;};if _geef =_beee .readContainsRefinement ();_geef !=nil {return _geef ;};if _geef =_beee .readIsLossless ();
_geef !=nil {return _geef ;};if _geef =_beee .readIsStriped ();_geef !=nil {return _geef ;};if _geef =_beee .readMaxStripeSize ();_geef !=nil {return _geef ;};if _geef =_beee .checkInput ();_geef !=nil {return _geef ;};_ecc .Log .Trace ("\u0025\u0073",_beee );
return nil ;};func (_cdfgf *Header )readSegmentNumber (_dbbd *_be .Reader )error {const _gead ="\u0072\u0065\u0061\u0064\u0053\u0065\u0067\u006d\u0065\u006e\u0074\u004eu\u006d\u0062\u0065\u0072";_dffg :=make ([]byte ,4);_ ,_fgfe :=_dbbd .Read (_dffg );
if _fgfe !=nil {return _bg .Wrap (_fgfe ,_gead ,"");};_cdfgf .SegmentNumber =_b .BigEndian .Uint32 (_dffg );return nil ;};type EndOfStripe struct{_cb *_be .Reader ;_bge int ;};func (_aaad *PageInformationSegment )encodeStripingInformation (_bdcc _be .BinaryWriter )(_fad int ,_adfeg error ){const _bdec ="\u0065n\u0063\u006f\u0064\u0065S\u0074\u0072\u0069\u0070\u0069n\u0067I\u006ef\u006f\u0072\u006d\u0061\u0074\u0069\u006fn";
if !_aaad .IsStripe {if _fad ,_adfeg =_bdcc .Write ([]byte {0x00,0x00});_adfeg !=nil {return 0,_bg .Wrap (_adfeg ,_bdec ,"n\u006f\u0020\u0073\u0074\u0072\u0069\u0070\u0069\u006e\u0067");};return _fad ,nil ;};_cbgf :=make ([]byte ,2);_b .BigEndian .PutUint16 (_cbgf ,_aaad .MaxStripeSize |1<<15);
if _fad ,_adfeg =_bdcc .Write (_cbgf );_adfeg !=nil {return 0,_bg .Wrapf (_adfeg ,_bdec ,"\u0073\u0074\u0072i\u0070\u0069\u006e\u0067\u003a\u0020\u0025\u0064",_aaad .MaxStripeSize );};return _fad ,nil ;};type Regioner interface{GetRegionBitmap ()(*_eag .Bitmap ,error );
GetRegionInfo ()*RegionSegment ;};func (_gcff *SymbolDictionary )retrieveImportSymbols ()error {for _ ,_gbbc :=range _gcff .Header .RTSegments {if _gbbc .Type ==0{_cfag ,_aaadf :=_gbbc .GetSegmentData ();if _aaadf !=nil {return _aaadf ;};_gecc ,_eacf :=_cfag .(*SymbolDictionary );
if !_eacf {return _c .Errorf ("\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0053\u0065\u0067\u006d\u0065\u006e\u0074\u0020\u0044\u0061\u0074a\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0053\u0079\u006d\u0062\u006f\u006c\u0044\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u0020\u0053\u0065\u0067m\u0065\u006e\u0074\u003a\u0020%\u0054",_cfag );
};_eega ,_aaadf :=_gecc .GetDictionary ();if _aaadf !=nil {return _c .Errorf ("\u0072\u0065\u006c\u0061\u0074\u0065\u0064 \u0073\u0065\u0067m\u0065\u006e\u0074 \u0077\u0069t\u0068\u0020\u0069\u006e\u0064\u0065x\u003a %\u0064\u0020\u0067\u0065\u0074\u0044\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u002e\u0020\u0025\u0073",_gbbc .SegmentNumber ,_aaadf .Error ());
};_gcff ._fddb =append (_gcff ._fddb ,_eega ...);_gcff ._ggdcg +=_gecc .NumberOfExportedSymbols ;};};return nil ;};func (_cdfg *GenericRegion )Init (h *Header ,r *_be .Reader )error {_cdfg .RegionSegment =NewRegionSegment (r );_cdfg ._fb =r ;return _cdfg .parseHeader ();
};func (_abd *GenericRefinementRegion )GetRegionInfo ()*RegionSegment {return _abd .RegionInfo };func (_acgc *PageInformationSegment )readWidthAndHeight ()error {_cgff ,_bdcf :=_acgc ._cbcb .ReadBits (32);if _bdcf !=nil {return _bdcf ;};_acgc .PageBMWidth =int (_cgff &_d .MaxInt32 );
_cgff ,_bdcf =_acgc ._cbcb .ReadBits (32);if _bdcf !=nil {return _bdcf ;};_acgc .PageBMHeight =int (_cgff &_d .MaxInt32 );return nil ;};func (_gae *PatternDictionary )readGrayMax ()error {_ddca ,_cggd :=_gae ._agcg .ReadBits (32);if _cggd !=nil {return _cggd ;
};_gae .GrayMax =uint32 (_ddca &_d .MaxUint32 );return nil ;};func (_aeb *GenericRefinementRegion )String ()string {_dafe :=&_db .Builder {};_dafe .WriteString ("\u000a[\u0047E\u004e\u0045\u0052\u0049\u0043 \u0052\u0045G\u0049\u004f\u004e\u005d\u000a");
_dafe .WriteString (_aeb .RegionInfo .String ()+"\u000a");_dafe .WriteString (_c .Sprintf ("\u0009\u002d \u0049\u0073\u0054P\u0047\u0052\u006f\u006e\u003a\u0020\u0025\u0076\u000a",_aeb .IsTPGROn ));_dafe .WriteString (_c .Sprintf ("\u0009-\u0020T\u0065\u006d\u0070\u006c\u0061t\u0065\u0049D\u003a\u0020\u0025\u0076\u000a",_aeb .TemplateID ));
_dafe .WriteString (_c .Sprintf ("\u0009\u002d\u0020\u0047\u0072\u0041\u0074\u0058\u003a\u0020\u0025\u0076\u000a",_aeb .GrAtX ));_dafe .WriteString (_c .Sprintf ("\u0009\u002d\u0020\u0047\u0072\u0041\u0074\u0059\u003a\u0020\u0025\u0076\u000a",_aeb .GrAtY ));
_dafe .WriteString (_c .Sprintf ("\u0009-\u0020R\u0065\u0066\u0065\u0072\u0065n\u0063\u0065D\u0058\u0020\u0025\u0076\u000a",_aeb .ReferenceDX ));_dafe .WriteString (_c .Sprintf ("\u0009\u002d\u0020\u0052ef\u0065\u0072\u0065\u006e\u0063\u0044\u0065\u0059\u003a\u0020\u0025\u0076\u000a",_aeb .ReferenceDY ));
return _dafe .String ();};func (_bgeb *GenericRefinementRegion )overrideAtTemplate0 (_cbf ,_daf ,_cgc ,_ggc ,_dag int )int {if _bgeb ._ge [0]{_cbf &=0xfff7;if _bgeb .GrAtY [0]==0&&int (_bgeb .GrAtX [0])>=-_dag {_cbf |=(_ggc >>uint (7-(_dag +int (_bgeb .GrAtX [0])))&0x1)<<3;
}else {_cbf |=_bgeb .getPixel (_bgeb .RegionBitmap ,_daf +int (_bgeb .GrAtX [0]),_cgc +int (_bgeb .GrAtY [0]))<<3;};};if _bgeb ._ge [1]{_cbf &=0xefff;if _bgeb .GrAtY [1]==0&&int (_bgeb .GrAtX [1])>=-_dag {_cbf |=(_ggc >>uint (7-(_dag +int (_bgeb .GrAtX [1])))&0x1)<<12;
}else {_cbf |=_bgeb .getPixel (_bgeb .ReferenceBitmap ,_daf +int (_bgeb .GrAtX [1]),_cgc +int (_bgeb .GrAtY [1]));};};return _cbf ;};func (_egdfg *SymbolDictionary )Init (h *Header ,r *_be .Reader )error {_egdfg .Header =h ;_egdfg ._cecgc =r ;return _egdfg .parseHeader ();
};func (_gfeaf *SymbolDictionary )decodeDifferenceWidth ()(int64 ,error ){if _gfeaf .IsHuffmanEncoded {switch _gfeaf .SdHuffDecodeWidthSelection {case 0:_fec ,_ggbd :=_bb .GetStandardTable (2);if _ggbd !=nil {return 0,_ggbd ;};return _fec .Decode (_gfeaf ._cecgc );
case 1:_defbd ,_gbd :=_bb .GetStandardTable (3);if _gbd !=nil {return 0,_gbd ;};return _defbd .Decode (_gfeaf ._cecgc );case 3:if _gfeaf ._bcd ==nil {var _ffad int ;if _gfeaf .SdHuffDecodeHeightSelection ==3{_ffad ++;};_ggaaa ,_dca :=_gfeaf .getUserTable (_ffad );
if _dca !=nil {return 0,_dca ;};_gfeaf ._bcd =_ggaaa ;};return _gfeaf ._bcd .Decode (_gfeaf ._cecgc );};}else {_aceb ,_deae :=_gfeaf ._bbgf .DecodeInt (_gfeaf ._cacb );if _deae !=nil {return 0,_deae ;};return int64 (_aceb ),nil ;};return 0,nil ;};type EncodeInitializer interface{InitEncode ();
};func (_defbc *SymbolDictionary )setAtPixels ()error {if _defbc .IsHuffmanEncoded {return nil ;};_dcee :=1;if _defbc .SdTemplate ==0{_dcee =4;};if _geca :=_defbc .readAtPixels (_dcee );_geca !=nil {return _geca ;};return nil ;};func (_bgecf *HalftoneRegion )GetPatterns ()([]*_eag .Bitmap ,error ){var (_cac []*_eag .Bitmap ;
_acb error ;);for _ ,_gdcg :=range _bgecf ._abge .RTSegments {var _fcbc Segmenter ;_fcbc ,_acb =_gdcg .GetSegmentData ();if _acb !=nil {_ecc .Log .Debug ("\u0047e\u0074\u0053\u0065\u0067m\u0065\u006e\u0074\u0044\u0061t\u0061 \u0066a\u0069\u006c\u0065\u0064\u003a\u0020\u0025v",_acb );
return nil ,_acb ;};_bbae ,_caa :=_fcbc .(*PatternDictionary );if !_caa {_acb =_c .Errorf ("\u0072e\u006c\u0061t\u0065\u0064\u0020\u0073e\u0067\u006d\u0065n\u0074\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0070at\u0074\u0065\u0072n\u0020\u0064i\u0063\u0074\u0069\u006f\u006e\u0061r\u0079\u003a \u0025\u0054",_fcbc );
return nil ,_acb ;};var _edfg []*_eag .Bitmap ;_edfg ,_acb =_bbae .GetDictionary ();if _acb !=nil {_ecc .Log .Debug ("\u0070\u0061\u0074\u0074\u0065\u0072\u006e\u0020\u0047\u0065\u0074\u0044\u0069\u0063\u0074i\u006fn\u0061\u0072\u0079\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_acb );
return nil ,_acb ;};_cac =append (_cac ,_edfg ...);};return _cac ,nil ;};func (_bgf *GenericRegion )overrideAtTemplate0b (_cdfce ,_ccb ,_afc ,_efe ,_bbgb ,_bed int )int {if _bgf .GBAtOverride [0]{_cdfce &=0xFFFD;if _bgf .GBAtY [0]==0&&_bgf .GBAtX [0]>=-int8 (_bbgb ){_cdfce |=(_efe >>uint (int8 (_bed )-_bgf .GBAtX [0]&0x1))<<1;
}else {_cdfce |=int (_bgf .getPixel (_ccb +int (_bgf .GBAtX [0]),_afc +int (_bgf .GBAtY [0])))<<1;};};if _bgf .GBAtOverride [1]{_cdfce &=0xDFFF;if _bgf .GBAtY [1]==0&&_bgf .GBAtX [1]>=-int8 (_bbgb ){_cdfce |=(_efe >>uint (int8 (_bed )-_bgf .GBAtX [1]&0x1))<<13;
}else {_cdfce |=int (_bgf .getPixel (_ccb +int (_bgf .GBAtX [1]),_afc +int (_bgf .GBAtY [1])))<<13;};};if _bgf .GBAtOverride [2]{_cdfce &=0xFDFF;if _bgf .GBAtY [2]==0&&_bgf .GBAtX [2]>=-int8 (_bbgb ){_cdfce |=(_efe >>uint (int8 (_bed )-_bgf .GBAtX [2]&0x1))<<9;
}else {_cdfce |=int (_bgf .getPixel (_ccb +int (_bgf .GBAtX [2]),_afc +int (_bgf .GBAtY [2])))<<9;};};if _bgf .GBAtOverride [3]{_cdfce &=0xBFFF;if _bgf .GBAtY [3]==0&&_bgf .GBAtX [3]>=-int8 (_bbgb ){_cdfce |=(_efe >>uint (int8 (_bed )-_bgf .GBAtX [3]&0x1))<<14;
}else {_cdfce |=int (_bgf .getPixel (_ccb +int (_bgf .GBAtX [3]),_afc +int (_bgf .GBAtY [3])))<<14;};};if _bgf .GBAtOverride [4]{_cdfce &=0xEFFF;if _bgf .GBAtY [4]==0&&_bgf .GBAtX [4]>=-int8 (_bbgb ){_cdfce |=(_efe >>uint (int8 (_bed )-_bgf .GBAtX [4]&0x1))<<12;
}else {_cdfce |=int (_bgf .getPixel (_ccb +int (_bgf .GBAtX [4]),_afc +int (_bgf .GBAtY [4])))<<12;};};if _bgf .GBAtOverride [5]{_cdfce &=0xFFDF;if _bgf .GBAtY [5]==0&&_bgf .GBAtX [5]>=-int8 (_bbgb ){_cdfce |=(_efe >>uint (int8 (_bed )-_bgf .GBAtX [5]&0x1))<<5;
}else {_cdfce |=int (_bgf .getPixel (_ccb +int (_bgf .GBAtX [5]),_afc +int (_bgf .GBAtY [5])))<<5;};};if _bgf .GBAtOverride [6]{_cdfce &=0xFFFB;if _bgf .GBAtY [6]==0&&_bgf .GBAtX [6]>=-int8 (_bbgb ){_cdfce |=(_efe >>uint (int8 (_bed )-_bgf .GBAtX [6]&0x1))<<2;
}else {_cdfce |=int (_bgf .getPixel (_ccb +int (_bgf .GBAtX [6]),_afc +int (_bgf .GBAtY [6])))<<2;};};if _bgf .GBAtOverride [7]{_cdfce &=0xFFF7;if _bgf .GBAtY [7]==0&&_bgf .GBAtX [7]>=-int8 (_bbgb ){_cdfce |=(_efe >>uint (int8 (_bed )-_bgf .GBAtX [7]&0x1))<<3;
}else {_cdfce |=int (_bgf .getPixel (_ccb +int (_bgf .GBAtX [7]),_afc +int (_bgf .GBAtY [7])))<<3;};};if _bgf .GBAtOverride [8]{_cdfce &=0xF7FF;if _bgf .GBAtY [8]==0&&_bgf .GBAtX [8]>=-int8 (_bbgb ){_cdfce |=(_efe >>uint (int8 (_bed )-_bgf .GBAtX [8]&0x1))<<11;
}else {_cdfce |=int (_bgf .getPixel (_ccb +int (_bgf .GBAtX [8]),_afc +int (_bgf .GBAtY [8])))<<11;};};if _bgf .GBAtOverride [9]{_cdfce &=0xFFEF;if _bgf .GBAtY [9]==0&&_bgf .GBAtX [9]>=-int8 (_bbgb ){_cdfce |=(_efe >>uint (int8 (_bed )-_bgf .GBAtX [9]&0x1))<<4;
}else {_cdfce |=int (_bgf .getPixel (_ccb +int (_bgf .GBAtX [9]),_afc +int (_bgf .GBAtY [9])))<<4;};};if _bgf .GBAtOverride [10]{_cdfce &=0x7FFF;if _bgf .GBAtY [10]==0&&_bgf .GBAtX [10]>=-int8 (_bbgb ){_cdfce |=(_efe >>uint (int8 (_bed )-_bgf .GBAtX [10]&0x1))<<15;
}else {_cdfce |=int (_bgf .getPixel (_ccb +int (_bgf .GBAtX [10]),_afc +int (_bgf .GBAtY [10])))<<15;};};if _bgf .GBAtOverride [11]{_cdfce &=0xFDFF;if _bgf .GBAtY [11]==0&&_bgf .GBAtX [11]>=-int8 (_bbgb ){_cdfce |=(_efe >>uint (int8 (_bed )-_bgf .GBAtX [11]&0x1))<<10;
}else {_cdfce |=int (_bgf .getPixel (_ccb +int (_bgf .GBAtX [11]),_afc +int (_bgf .GBAtY [11])))<<10;};};return _cdfce ;};func (_ddac *SymbolDictionary )setSymbolsArray ()error {if _ddac ._fddb ==nil {if _dead :=_ddac .retrieveImportSymbols ();_dead !=nil {return _dead ;
};};if _ddac ._gfea ==nil {_ddac ._gfea =append (_ddac ._gfea ,_ddac ._fddb ...);};return nil ;};func (_facf *Header )readNumberOfReferredToSegments (_aade *_be .Reader )(uint64 ,error ){const _ebcc ="\u0072\u0065\u0061\u0064\u004e\u0075\u006d\u0062\u0065\u0072O\u0066\u0052\u0065\u0066\u0065\u0072\u0072e\u0064\u0054\u006f\u0053\u0065\u0067\u006d\u0065\u006e\u0074\u0073";
_fbbd ,_bcee :=_aade .ReadBits (3);if _bcee !=nil {return 0,_bg .Wrap (_bcee ,_ebcc ,"\u0063\u006f\u0075n\u0074\u0020\u006f\u0066\u0020\u0072\u0074\u0073");};_fbbd &=0xf;var _cgf []byte ;if _fbbd <=4{_cgf =make ([]byte ,5);for _bcaa :=0;_bcaa <=4;_bcaa ++{_edga ,_dbg :=_aade .ReadBit ();
if _dbg !=nil {return 0,_bg .Wrap (_dbg ,_ebcc ,"\u0073\u0068\u006fr\u0074\u0020\u0066\u006f\u0072\u006d\u0061\u0074");};_cgf [_bcaa ]=byte (_edga );};}else {_fbbd ,_bcee =_aade .ReadBits (29);if _bcee !=nil {return 0,_bcee ;};_fbbd &=_d .MaxInt32 ;_bced :=(_fbbd +8)>>3;
_bced <<=3;_cgf =make ([]byte ,_bced );var _feec uint64 ;for _feec =0;_feec < _bced ;_feec ++{_dace ,_fgbca :=_aade .ReadBit ();if _fgbca !=nil {return 0,_bg .Wrap (_fgbca ,_ebcc ,"l\u006f\u006e\u0067\u0020\u0066\u006f\u0072\u006d\u0061\u0074");};_cgf [_feec ]=byte (_dace );
};};return _fbbd ,nil ;};func (_ebdf *Header )writeReferredToCount (_ade _be .BinaryWriter )(_aagf int ,_dagg error ){const _bcb ="w\u0072i\u0074\u0065\u0052\u0065\u0066\u0065\u0072\u0072e\u0064\u0054\u006f\u0043ou\u006e\u0074";_ebdf .RTSNumbers =make ([]int ,len (_ebdf .RTSegments ));
for _fccc ,_bea :=range _ebdf .RTSegments {_ebdf .RTSNumbers [_fccc ]=int (_bea .SegmentNumber );};if len (_ebdf .RTSNumbers )<=4{var _cdcg byte ;if len (_ebdf .RetainBits )>=1{_cdcg =_ebdf .RetainBits [0];};_cdcg |=byte (len (_ebdf .RTSNumbers ))<<5;if _dagg =_ade .WriteByte (_cdcg );
_dagg !=nil {return 0,_bg .Wrap (_dagg ,_bcb ,"\u0073\u0068\u006fr\u0074\u0020\u0066\u006f\u0072\u006d\u0061\u0074");};return 1,nil ;};_gace :=uint32 (len (_ebdf .RTSNumbers ));_ebba :=make ([]byte ,4+_ec .Ceil (len (_ebdf .RTSNumbers )+1,8));_gace |=0x7<<29;
_b .BigEndian .PutUint32 (_ebba ,_gace );copy (_ebba [1:],_ebdf .RetainBits );_aagf ,_dagg =_ade .Write (_ebba );if _dagg !=nil {return 0,_bg .Wrap (_dagg ,_bcb ,"l\u006f\u006e\u0067\u0020\u0066\u006f\u0072\u006d\u0061\u0074");};return _aagf ,nil ;};func NewHeader (d Documenter ,r *_be .Reader ,offset int64 ,organizationType OrganizationType )(*Header ,error ){_degf :=&Header {Reader :r };
if _bbf :=_degf .parse (d ,r ,offset ,organizationType );_bbf !=nil {return nil ,_bg .Wrap (_bbf ,"\u004ee\u0077\u0048\u0065\u0061\u0064\u0065r","");};return _degf ,nil ;};func (_gfgda *Header )writeSegmentPageAssociation (_cbfb _be .BinaryWriter )(_egff int ,_eebc error ){const _ddga ="w\u0072\u0069\u0074\u0065\u0053\u0065g\u006d\u0065\u006e\u0074\u0050\u0061\u0067\u0065\u0041s\u0073\u006f\u0063i\u0061t\u0069\u006f\u006e";
if _gfgda .pageSize ()!=4{if _eebc =_cbfb .WriteByte (byte (_gfgda .PageAssociation ));_eebc !=nil {return 0,_bg .Wrap (_eebc ,_ddga ,"\u0070\u0061\u0067\u0065\u0053\u0069\u007a\u0065\u0020\u0021\u003d\u0020\u0034");};return 1,nil ;};_ccaf :=make ([]byte ,4);
_b .BigEndian .PutUint32 (_ccaf ,uint32 (_gfgda .PageAssociation ));if _egff ,_eebc =_cbfb .Write (_ccaf );_eebc !=nil {return 0,_bg .Wrap (_eebc ,_ddga ,"\u0034 \u0062y\u0074\u0065\u0020\u0070\u0061g\u0065\u0020n\u0075\u006d\u0062\u0065\u0072");};return _egff ,nil ;
};func (_fde *GenericRegion )InitEncode (bm *_eag .Bitmap ,xLoc ,yLoc ,template int ,duplicateLineRemoval bool )error {const _bbb ="\u0047e\u006e\u0065\u0072\u0069\u0063\u0052\u0065\u0067\u0069\u006f\u006e.\u0049\u006e\u0069\u0074\u0045\u006e\u0063\u006f\u0064\u0065";
if bm ==nil {return _bg .Error (_bbb ,"\u0070\u0072\u006f\u0076id\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0062\u0069\u0074\u006d\u0061\u0070");};if xLoc < 0||yLoc < 0{return _bg .Error (_bbb ,"\u0078\u0020\u0061\u006e\u0064\u0020\u0079\u0020\u006c\u006f\u0063\u0061\u0074i\u006f\u006e\u0020\u006d\u0075\u0073t\u0020\u0062\u0065\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0074h\u0061\u006e\u0020\u0030");
};_fde .Bitmap =bm ;_fde .GBTemplate =byte (template );switch _fde .GBTemplate {case 0:_fde .GBAtX =[]int8 {3,-3,2,-2};_fde .GBAtY =[]int8 {-1,-1,-2,-2};case 1:_fde .GBAtX =[]int8 {3};_fde .GBAtY =[]int8 {-1};case 2,3:_fde .GBAtX =[]int8 {2};_fde .GBAtY =[]int8 {-1};
default:return _bg .Errorf (_bbb ,"\u0070\u0072o\u0076\u0069\u0064\u0065\u0064 \u0074\u0065\u006d\u0070\u006ca\u0074\u0065\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006e\u006f\u0074\u0020\u0069\u006e\u0020\u0076\u0061\u006c\u0069\u0064\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u007b\u0030\u002c\u0031\u002c\u0032\u002c\u0033\u007d",template );
};_fde .RegionSegment =&RegionSegment {BitmapHeight :uint32 (bm .Height ),BitmapWidth :uint32 (bm .Width ),XLocation :uint32 (xLoc ),YLocation :uint32 (yLoc )};_fde .IsTPGDon =duplicateLineRemoval ;return nil ;};func (_gfeda *SymbolDictionary )parseHeader ()(_dbaga error ){_ecc .Log .Trace ("\u005b\u0053\u0059\u004d\u0042\u004f\u004c \u0044\u0049\u0043T\u0049\u004f\u004e\u0041R\u0059\u005d\u005b\u0050\u0041\u0052\u0053\u0045\u002d\u0048\u0045\u0041\u0044\u0045\u0052\u005d\u0020\u0062\u0065\u0067\u0069\u006e\u0073\u002e\u002e\u002e");
defer func (){if _dbaga !=nil {_ecc .Log .Trace ("\u005bS\u0059\u004dB\u004f\u004c\u0020\u0044I\u0043\u0054\u0049O\u004e\u0041\u0052\u0059\u005d\u005b\u0050\u0041\u0052SE\u002d\u0048\u0045A\u0044\u0045R\u005d\u0020\u0066\u0061\u0069\u006ce\u0064\u002e \u0025\u0076",_dbaga );
}else {_ecc .Log .Trace ("\u005b\u0053\u0059\u004d\u0042\u004f\u004c \u0044\u0049\u0043T\u0049\u004f\u004e\u0041R\u0059\u005d\u005b\u0050\u0041\u0052\u0053\u0045\u002d\u0048\u0045\u0041\u0044\u0045\u0052\u005d\u0020\u0066\u0069\u006e\u0069\u0073\u0068\u0065\u0064\u002e");
};}();if _dbaga =_gfeda .readRegionFlags ();_dbaga !=nil {return _dbaga ;};if _dbaga =_gfeda .setAtPixels ();_dbaga !=nil {return _dbaga ;};if _dbaga =_gfeda .setRefinementAtPixels ();_dbaga !=nil {return _dbaga ;};if _dbaga =_gfeda .readNumberOfExportedSymbols ();
_dbaga !=nil {return _dbaga ;};if _dbaga =_gfeda .readNumberOfNewSymbols ();_dbaga !=nil {return _dbaga ;};if _dbaga =_gfeda .setInSyms ();_dbaga !=nil {return _dbaga ;};if _gfeda ._feecg {_ggbf :=_gfeda .Header .RTSegments ;for _bdcfc :=len (_ggbf )-1;
_bdcfc >=0;_bdcfc --{if _ggbf [_bdcfc ].Type ==0{_gggd ,_dccb :=_ggbf [_bdcfc ].SegmentData .(*SymbolDictionary );if !_dccb {_dbaga =_c .Errorf ("\u0072\u0065\u006c\u0061\u0074\u0065\u0064\u0020\u0053\u0065\u0067\u006d\u0065\u006e\u0074:\u0020\u0025\u0076\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u0020S\u0079\u006d\u0062\u006f\u006c\u0020\u0044\u0069\u0063\u0074\u0069\u006fna\u0072\u0079\u0020\u0053\u0065\u0067\u006d\u0065\u006e\u0074",_ggbf [_bdcfc ]);
return _dbaga ;};if _gggd ._feecg {_gfeda .setRetainedCodingContexts (_gggd );};break ;};};};if _dbaga =_gfeda .checkInput ();_dbaga !=nil {return _dbaga ;};return nil ;};func (_bbfc *TextRegion )checkInput ()error {const _bdee ="\u0063\u0068\u0065\u0063\u006b\u0049\u006e\u0070\u0075\u0074";
if !_bbfc .UseRefinement {if _bbfc .SbrTemplate !=0{_ecc .Log .Debug ("\u0053\u0062\u0072Te\u006d\u0070\u006c\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0030");_bbfc .SbrTemplate =0;};};if _bbfc .SbHuffFS ==2||_bbfc .SbHuffRDWidth ==2||_bbfc .SbHuffRDHeight ==2||_bbfc .SbHuffRDX ==2||_bbfc .SbHuffRDY ==2{return _bg .Error (_bdee ,"h\u0075\u0066\u0066\u006d\u0061\u006e \u0066\u006c\u0061\u0067\u0020\u0076a\u006c\u0075\u0065\u0020\u0069\u0073\u0020n\u006f\u0074\u0020\u0070\u0065\u0072\u006d\u0069\u0074\u0074e\u0064");
};if !_bbfc .UseRefinement {if _bbfc .SbHuffRSize !=0{_ecc .Log .Debug ("\u0053\u0062\u0048uf\u0066\u0052\u0053\u0069\u007a\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0030");_bbfc .SbHuffRSize =0;};if _bbfc .SbHuffRDY !=0{_ecc .Log .Debug ("S\u0062\u0048\u0075\u0066fR\u0044Y\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u0030");
_bbfc .SbHuffRDY =0;};if _bbfc .SbHuffRDX !=0{_ecc .Log .Debug ("S\u0062\u0048\u0075\u0066fR\u0044X\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u0030");_bbfc .SbHuffRDX =0;};if _bbfc .SbHuffRDWidth !=0{_ecc .Log .Debug ("\u0053b\u0048\u0075\u0066\u0066R\u0044\u0057\u0069\u0064\u0074h\u0020s\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u00200");
_bbfc .SbHuffRDWidth =0;};if _bbfc .SbHuffRDHeight !=0{_ecc .Log .Debug ("\u0053\u0062\u0048\u0075\u0066\u0066\u0052\u0044\u0048\u0065\u0069g\u0068\u0074\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020b\u0065\u0020\u0030");_bbfc .SbHuffRDHeight =0;};};
return nil ;};func (_gea *Header )GetSegmentData ()(Segmenter ,error ){var _bcc Segmenter ;if _gea .SegmentData !=nil {_bcc =_gea .SegmentData ;};if _bcc ==nil {_fggg ,_ccd :=_bga [_gea .Type ];if !_ccd {return nil ,_c .Errorf ("\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0073\u002f\u0020\u0025\u0064\u0020\u0063\u0072e\u0061t\u006f\u0072\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064\u002e\u0020",_gea .Type ,_gea .Type );
};_bcc =_fggg ();_ecc .Log .Trace ("\u005b\u0053E\u0047\u004d\u0045\u004e\u0054-\u0048\u0045\u0041\u0044\u0045R\u005d\u005b\u0023\u0025\u0064\u005d\u0020\u0047\u0065\u0074\u0053\u0065\u0067\u006d\u0065\u006e\u0074\u0044\u0061\u0074\u0061\u0020\u0061\u0074\u0020\u004f\u0066\u0066\u0073\u0065\u0074\u003a\u0020\u0025\u0030\u0034\u0058",_gea .SegmentNumber ,_gea .SegmentDataStartOffset );
_ebc ,_acec :=_gea .subInputReader ();if _acec !=nil {return nil ,_acec ;};if _aeec :=_bcc .Init (_gea ,_ebc );_aeec !=nil {_ecc .Log .Debug ("\u0049\u006e\u0069\u0074 \u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076 \u0066o\u0072\u0020\u0074\u0079\u0070\u0065\u003a \u0025\u0054",_aeec ,_bcc );
return nil ,_aeec ;};_gea .SegmentData =_bcc ;};return _bcc ,nil ;};func (_fbeb *TextRegion )decodeRdh ()(int64 ,error ){const _cgdc ="\u0064e\u0063\u006f\u0064\u0065\u0052\u0064h";if _fbeb .IsHuffmanEncoded {if _fbeb .SbHuffRDHeight ==3{if _fbeb ._agcb ==nil {var (_dfaa int ;
_cafb error ;);if _fbeb .SbHuffFS ==3{_dfaa ++;};if _fbeb .SbHuffDS ==3{_dfaa ++;};if _fbeb .SbHuffDT ==3{_dfaa ++;};if _fbeb .SbHuffRDWidth ==3{_dfaa ++;};_fbeb ._agcb ,_cafb =_fbeb .getUserTable (_dfaa );if _cafb !=nil {return 0,_bg .Wrap (_cafb ,_cgdc ,"");
};};return _fbeb ._agcb .Decode (_fbeb ._ecga );};_ecdaa ,_gebg :=_bb .GetStandardTable (14+int (_fbeb .SbHuffRDHeight ));if _gebg !=nil {return 0,_bg .Wrap (_gebg ,_cgdc ,"");};return _ecdaa .Decode (_fbeb ._ecga );};_cbab ,_fefed :=_fbeb ._bafa .DecodeInt (_fbeb ._cccca );
if _fefed !=nil {return 0,_bg .Wrap (_fefed ,_cgdc ,"");};return int64 (_cbab ),nil ;};func NewRegionSegment (r *_be .Reader )*RegionSegment {return &RegionSegment {_ecfa :r }};func (_gaf *GenericRegion )overrideAtTemplate0a (_dee ,_eefd ,_aacb ,_dbe ,_ceg ,_cbg int )int {if _gaf .GBAtOverride [0]{_dee &=0xFFEF;
if _gaf .GBAtY [0]==0&&_gaf .GBAtX [0]>=-int8 (_ceg ){_dee |=(_dbe >>uint (int8 (_cbg )-_gaf .GBAtX [0]&0x1))<<4;}else {_dee |=int (_gaf .getPixel (_eefd +int (_gaf .GBAtX [0]),_aacb +int (_gaf .GBAtY [0])))<<4;};};if _gaf .GBAtOverride [1]{_dee &=0xFBFF;
if _gaf .GBAtY [1]==0&&_gaf .GBAtX [1]>=-int8 (_ceg ){_dee |=(_dbe >>uint (int8 (_cbg )-_gaf .GBAtX [1]&0x1))<<10;}else {_dee |=int (_gaf .getPixel (_eefd +int (_gaf .GBAtX [1]),_aacb +int (_gaf .GBAtY [1])))<<10;};};if _gaf .GBAtOverride [2]{_dee &=0xF7FF;
if _gaf .GBAtY [2]==0&&_gaf .GBAtX [2]>=-int8 (_ceg ){_dee |=(_dbe >>uint (int8 (_cbg )-_gaf .GBAtX [2]&0x1))<<11;}else {_dee |=int (_gaf .getPixel (_eefd +int (_gaf .GBAtX [2]),_aacb +int (_gaf .GBAtY [2])))<<11;};};if _gaf .GBAtOverride [3]{_dee &=0x7FFF;
if _gaf .GBAtY [3]==0&&_gaf .GBAtX [3]>=-int8 (_ceg ){_dee |=(_dbe >>uint (int8 (_cbg )-_gaf .GBAtX [3]&0x1))<<15;}else {_dee |=int (_gaf .getPixel (_eefd +int (_gaf .GBAtX [3]),_aacb +int (_gaf .GBAtY [3])))<<15;};};return _dee ;};type Pager interface{GetSegment (int )(*Header ,error );
GetBitmap ()(*_eag .Bitmap ,error );};func (_gfbf *TableSegment )HtOOB ()int32 {return _gfbf ._agab };type Type int ;type PatternDictionary struct{_agcg *_be .Reader ;DataHeaderOffset int64 ;DataHeaderLength int64 ;DataOffset int64 ;DataLength int64 ;GBAtX []int8 ;
GBAtY []int8 ;IsMMREncoded bool ;HDTemplate byte ;HdpWidth byte ;HdpHeight byte ;Patterns []*_eag .Bitmap ;GrayMax uint32 ;};func (_dfad *TextRegion )getSymbols ()error {if _dfad .Header .RTSegments !=nil {return _dfad .initSymbols ();};return nil ;};func (_edcd *TextRegion )String ()string {_dbfd :=&_db .Builder {};
_dbfd .WriteString ("\u000a[\u0054E\u0058\u0054\u0020\u0052\u0045\u0047\u0049\u004f\u004e\u005d\u000a");_dbfd .WriteString (_edcd .RegionInfo .String ()+"\u000a");_dbfd .WriteString (_c .Sprintf ("\u0009\u002d\u0020\u0053br\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u003a\u0020\u0025\u0076\u000a",_edcd .SbrTemplate ));
_dbfd .WriteString (_c .Sprintf ("\u0009-\u0020S\u0062\u0044\u0073\u004f\u0066f\u0073\u0065t\u003a\u0020\u0025\u0076\u000a",_edcd .SbDsOffset ));_dbfd .WriteString (_c .Sprintf ("\t\u002d \u0044\u0065\u0066\u0061\u0075\u006c\u0074\u0050i\u0078\u0065\u006c\u003a %\u0076\u000a",_edcd .DefaultPixel ));
_dbfd .WriteString (_c .Sprintf ("\t\u002d\u0020\u0043\u006f\u006d\u0062i\u006e\u0061\u0074\u0069\u006f\u006e\u004f\u0070\u0065r\u0061\u0074\u006fr\u003a \u0025\u0076\u000a",_edcd .CombinationOperator ));_dbfd .WriteString (_c .Sprintf ("\t\u002d \u0049\u0073\u0054\u0072\u0061\u006e\u0073\u0070o\u0073\u0065\u0064\u003a %\u0076\u000a",_edcd .IsTransposed ));
_dbfd .WriteString (_c .Sprintf ("\u0009\u002d\u0020Re\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0043\u006f\u0072\u006e\u0065\u0072\u003a\u0020\u0025\u0076\u000a",_edcd .ReferenceCorner ));_dbfd .WriteString (_c .Sprintf ("\t\u002d\u0020\u0055\u0073eR\u0065f\u0069\u006e\u0065\u006d\u0065n\u0074\u003a\u0020\u0025\u0076\u000a",_edcd .UseRefinement ));
_dbfd .WriteString (_c .Sprintf ("\u0009-\u0020\u0049\u0073\u0048\u0075\u0066\u0066\u006d\u0061\u006e\u0045n\u0063\u006f\u0064\u0065\u0064\u003a\u0020\u0025\u0076\u000a",_edcd .IsHuffmanEncoded ));if _edcd .IsHuffmanEncoded {_dbfd .WriteString (_c .Sprintf ("\u0009\u002d\u0020\u0053bH\u0075\u0066\u0066\u0052\u0053\u0069\u007a\u0065\u003a\u0020\u0025\u0076\u000a",_edcd .SbHuffRSize ));
_dbfd .WriteString (_c .Sprintf ("\u0009\u002d\u0020\u0053\u0062\u0048\u0075\u0066\u0066\u0052\u0044\u0059:\u0020\u0025\u0076\u000a",_edcd .SbHuffRDY ));_dbfd .WriteString (_c .Sprintf ("\u0009\u002d\u0020\u0053\u0062\u0048\u0075\u0066\u0066\u0052\u0044\u0058:\u0020\u0025\u0076\u000a",_edcd .SbHuffRDX ));
_dbfd .WriteString (_c .Sprintf ("\u0009\u002d\u0020\u0053bH\u0075\u0066\u0066\u0052\u0044\u0048\u0065\u0069\u0067\u0068\u0074\u003a\u0020\u0025v\u000a",_edcd .SbHuffRDHeight ));_dbfd .WriteString (_c .Sprintf ("\t\u002d\u0020\u0053\u0062Hu\u0066f\u0052\u0044\u0057\u0069\u0064t\u0068\u003a\u0020\u0025\u0076\u000a",_edcd .SbHuffRDWidth ));
_dbfd .WriteString (_c .Sprintf ("\u0009\u002d \u0053\u0062\u0048u\u0066\u0066\u0044\u0054\u003a\u0020\u0025\u0076\u000a",_edcd .SbHuffDT ));_dbfd .WriteString (_c .Sprintf ("\u0009\u002d \u0053\u0062\u0048u\u0066\u0066\u0044\u0053\u003a\u0020\u0025\u0076\u000a",_edcd .SbHuffDS ));
_dbfd .WriteString (_c .Sprintf ("\u0009\u002d \u0053\u0062\u0048u\u0066\u0066\u0046\u0053\u003a\u0020\u0025\u0076\u000a",_edcd .SbHuffFS ));};_dbfd .WriteString (_c .Sprintf ("\u0009\u002d\u0020\u0053\u0062\u0072\u0041\u0054\u0058:\u0020\u0025\u0076\u000a",_edcd .SbrATX ));
_dbfd .WriteString (_c .Sprintf ("\u0009\u002d\u0020\u0053\u0062\u0072\u0041\u0054\u0059:\u0020\u0025\u0076\u000a",_edcd .SbrATY ));_dbfd .WriteString (_c .Sprintf ("\u0009\u002d\u0020N\u0075\u006d\u0062\u0065r\u004f\u0066\u0053\u0079\u006d\u0062\u006fl\u0049\u006e\u0073\u0074\u0061\u006e\u0063\u0065\u0073\u003a\u0020\u0025\u0076\u000a",_edcd .NumberOfSymbolInstances ));
_dbfd .WriteString (_c .Sprintf ("\u0009\u002d\u0020\u0053\u0062\u0072\u0041\u0054\u0058:\u0020\u0025\u0076\u000a",_edcd .SbrATX ));return _dbfd .String ();};func _begc (_gcfb *_be .Reader ,_ccde *Header )*TextRegion {_gade :=&TextRegion {_ecga :_gcfb ,Header :_ccde ,RegionInfo :NewRegionSegment (_gcfb )};
return _gade ;};func (_gegc *SymbolDictionary )getSbSymCodeLen ()int8 {_abbdd :=int8 (_d .Ceil (_d .Log (float64 (_gegc ._ggdcg +_gegc .NumberOfNewSymbols ))/_d .Log (2)));if _gegc .IsHuffmanEncoded &&_abbdd < 1{return 1;};return _abbdd ;};func (_abcda *SymbolDictionary )encodeFlags (_bdga _be .BinaryWriter )(_fea int ,_gdfe error ){const _bcge ="e\u006e\u0063\u006f\u0064\u0065\u0046\u006c\u0061\u0067\u0073";
if _gdfe =_bdga .SkipBits (3);_gdfe !=nil {return 0,_bg .Wrap (_gdfe ,_bcge ,"\u0065\u006d\u0070\u0074\u0079\u0020\u0062\u0069\u0074\u0073");};var _fdgb int ;if _abcda .SdrTemplate > 0{_fdgb =1;};if _gdfe =_bdga .WriteBit (_fdgb );_gdfe !=nil {return _fea ,_bg .Wrap (_gdfe ,_bcge ,"s\u0064\u0072\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065");
};_fdgb =0;if _abcda .SdTemplate > 1{_fdgb =1;};if _gdfe =_bdga .WriteBit (_fdgb );_gdfe !=nil {return _fea ,_bg .Wrap (_gdfe ,_bcge ,"\u0073\u0064\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065");};_fdgb =0;if _abcda .SdTemplate ==1||_abcda .SdTemplate ==3{_fdgb =1;
};if _gdfe =_bdga .WriteBit (_fdgb );_gdfe !=nil {return _fea ,_bg .Wrap (_gdfe ,_bcge ,"\u0073\u0064\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065");};_fdgb =0;if _abcda ._ecgg {_fdgb =1;};if _gdfe =_bdga .WriteBit (_fdgb );_gdfe !=nil {return _fea ,_bg .Wrap (_gdfe ,_bcge ,"\u0063\u006f\u0064in\u0067\u0020\u0063\u006f\u006e\u0074\u0065\u0078\u0074\u0020\u0072\u0065\u0074\u0061\u0069\u006e\u0065\u0064");
};_fdgb =0;if _abcda ._feecg {_fdgb =1;};if _gdfe =_bdga .WriteBit (_fdgb );_gdfe !=nil {return _fea ,_bg .Wrap (_gdfe ,_bcge ,"\u0063\u006f\u0064\u0069ng\u0020\u0063\u006f\u006e\u0074\u0065\u0078\u0074\u0020\u0075\u0073\u0065\u0064");};_fdgb =0;if _abcda .SdHuffAggInstanceSelection {_fdgb =1;
};if _gdfe =_bdga .WriteBit (_fdgb );_gdfe !=nil {return _fea ,_bg .Wrap (_gdfe ,_bcge ,"\u0073\u0064\u0048\u0075\u0066\u0066\u0041\u0067\u0067\u0049\u006e\u0073\u0074");};_fdgb =int (_abcda .SdHuffBMSizeSelection );if _gdfe =_bdga .WriteBit (_fdgb );_gdfe !=nil {return _fea ,_bg .Wrap (_gdfe ,_bcge ,"\u0073\u0064\u0048u\u0066\u0066\u0042\u006d\u0053\u0069\u007a\u0065");
};_fdgb =0;if _abcda .SdHuffDecodeWidthSelection > 1{_fdgb =1;};if _gdfe =_bdga .WriteBit (_fdgb );_gdfe !=nil {return _fea ,_bg .Wrap (_gdfe ,_bcge ,"s\u0064\u0048\u0075\u0066\u0066\u0057\u0069\u0064\u0074\u0068");};_fdgb =0;switch _abcda .SdHuffDecodeWidthSelection {case 1,3:_fdgb =1;
};if _gdfe =_bdga .WriteBit (_fdgb );_gdfe !=nil {return _fea ,_bg .Wrap (_gdfe ,_bcge ,"s\u0064\u0048\u0075\u0066\u0066\u0057\u0069\u0064\u0074\u0068");};_fdgb =0;if _abcda .SdHuffDecodeHeightSelection > 1{_fdgb =1;};if _gdfe =_bdga .WriteBit (_fdgb );
_gdfe !=nil {return _fea ,_bg .Wrap (_gdfe ,_bcge ,"\u0073\u0064\u0048u\u0066\u0066\u0048\u0065\u0069\u0067\u0068\u0074");};_fdgb =0;switch _abcda .SdHuffDecodeHeightSelection {case 1,3:_fdgb =1;};if _gdfe =_bdga .WriteBit (_fdgb );_gdfe !=nil {return _fea ,_bg .Wrap (_gdfe ,_bcge ,"\u0073\u0064\u0048u\u0066\u0066\u0048\u0065\u0069\u0067\u0068\u0074");
};_fdgb =0;if _abcda .UseRefinementAggregation {_fdgb =1;};if _gdfe =_bdga .WriteBit (_fdgb );_gdfe !=nil {return _fea ,_bg .Wrap (_gdfe ,_bcge ,"\u0073\u0064\u0052\u0065\u0066\u0041\u0067\u0067");};_fdgb =0;if _abcda .IsHuffmanEncoded {_fdgb =1;};if _gdfe =_bdga .WriteBit (_fdgb );
_gdfe !=nil {return _fea ,_bg .Wrap (_gdfe ,_bcge ,"\u0073\u0064\u0048\u0075\u0066\u0066");};return 2,nil ;};func (_dd *GenericRefinementRegion )GetRegionBitmap ()(*_eag .Bitmap ,error ){var _gce error ;_ecc .Log .Trace ("\u005b\u0047E\u004e\u0045\u0052\u0049\u0043\u002d\u0052\u0045\u0046\u002d\u0052\u0045\u0047\u0049\u004f\u004e\u005d\u0020\u0047\u0065\u0074\u0052\u0065\u0067\u0069\u006f\u006e\u0042\u0069\u0074\u006d\u0061\u0070\u0020\u0062\u0065\u0067\u0069\u006e\u0073\u002e\u002e\u002e");
defer func (){if _gce !=nil {_ecc .Log .Trace ("[\u0047\u0045\u004e\u0045\u0052\u0049\u0043\u002d\u0052E\u0046\u002d\u0052\u0045\u0047\u0049\u004fN]\u0020\u0047\u0065\u0074R\u0065\u0067\u0069\u006f\u006e\u0042\u0069\u0074\u006dap\u0020\u0066a\u0069\u006c\u0065\u0064\u002e\u0020\u0025\u0076",_gce );
}else {_ecc .Log .Trace ("\u005b\u0047E\u004e\u0045\u0052\u0049\u0043\u002d\u0052\u0045\u0046\u002d\u0052\u0045\u0047\u0049\u004f\u004e\u005d\u0020\u0047\u0065\u0074\u0052\u0065\u0067\u0069\u006f\u006e\u0042\u0069\u0074\u006d\u0061\u0070\u0020\u0066\u0069\u006e\u0069\u0073\u0068\u0065\u0064\u002e");
};}();if _dd .RegionBitmap !=nil {return _dd .RegionBitmap ,nil ;};_ba :=0;if _dd .ReferenceBitmap ==nil {_dd .ReferenceBitmap ,_gce =_dd .getGrReference ();if _gce !=nil {return nil ,_gce ;};};if _dd ._bda ==nil {_dd ._bda ,_gce =_g .New (_dd ._bba );
if _gce !=nil {return nil ,_gce ;};};if _dd ._eeb ==nil {_dd ._eeb =_g .NewStats (8192,1);};_dd .RegionBitmap =_eag .New (int (_dd .RegionInfo .BitmapWidth ),int (_dd .RegionInfo .BitmapHeight ));if _dd .TemplateID ==0{if _gce =_dd .updateOverride ();_gce !=nil {return nil ,_gce ;
};};_gg :=(_dd .RegionBitmap .Width +7)&-8;var _fg int ;if _dd .IsTPGROn {_fg =int (-_dd .ReferenceDY )*_dd .ReferenceBitmap .RowStride ;};_eg :=_fg +1;for _da :=0;_da < _dd .RegionBitmap .Height ;_da ++{if _dd .IsTPGROn {_beg ,_fa :=_dd .decodeSLTP ();
if _fa !=nil {return nil ,_fa ;};_ba ^=_beg ;};if _ba ==0{_gce =_dd .decodeOptimized (_da ,_dd .RegionBitmap .Width ,_dd .RegionBitmap .RowStride ,_dd .ReferenceBitmap .RowStride ,_gg ,_fg ,_eg );if _gce !=nil {return nil ,_gce ;};}else {_gce =_dd .decodeTypicalPredictedLine (_da ,_dd .RegionBitmap .Width ,_dd .RegionBitmap .RowStride ,_dd .ReferenceBitmap .RowStride ,_gg ,_fg );
if _gce !=nil {return nil ,_gce ;};};};return _dd .RegionBitmap ,nil ;};func (_fdac *PageInformationSegment )readCombinationOperator ()error {_bafg ,_dcfg :=_fdac ._cbcb .ReadBits (2);if _dcfg !=nil {return _dcfg ;};_fdac ._cbge =_eag .CombinationOperator (int (_bafg ));
return nil ;};type SymbolDictionary struct{_cecgc *_be .Reader ;SdrTemplate int8 ;SdTemplate int8 ;_ecgg bool ;_feecg bool ;SdHuffAggInstanceSelection bool ;SdHuffBMSizeSelection int8 ;SdHuffDecodeWidthSelection int8 ;SdHuffDecodeHeightSelection int8 ;
UseRefinementAggregation bool ;IsHuffmanEncoded bool ;SdATX []int8 ;SdATY []int8 ;SdrATX []int8 ;SdrATY []int8 ;NumberOfExportedSymbols uint32 ;NumberOfNewSymbols uint32 ;Header *Header ;_ggdcg uint32 ;_fddb []*_eag .Bitmap ;_abde uint32 ;_fagf []*_eag .Bitmap ;
_bede _bb .Tabler ;_bcd _bb .Tabler ;_dcgb _bb .Tabler ;_edbb _bb .Tabler ;_abef []*_eag .Bitmap ;_gfea []*_eag .Bitmap ;_bbgf *_g .Decoder ;_dgee *TextRegion ;_fcfe *GenericRegion ;_ggff *GenericRefinementRegion ;_edeb *_g .DecoderStats ;_fegg *_g .DecoderStats ;
_cacb *_g .DecoderStats ;_abdb *_g .DecoderStats ;_caf *_g .DecoderStats ;_ggba *_g .DecoderStats ;_cbcab *_g .DecoderStats ;_eeff *_g .DecoderStats ;_gagf *_g .DecoderStats ;_fdfb int8 ;_dbgf *_eag .Bitmaps ;_ffef []int ;_ffa map[int ]int ;_adbc bool ;
};func (_gf *GenericRefinementRegion )getGrReference ()(*_eag .Bitmap ,error ){segments :=_gf ._ag .RTSegments ;if len (segments )==0{return nil ,_cf .New ("\u0052\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0064\u0020\u0053\u0065\u0067\u006d\u0065\u006e\u0074\u0020\u006e\u006f\u0074\u0020\u0065\u0078is\u0074\u0073");
};_ac ,_de :=segments [0].GetSegmentData ();if _de !=nil {return nil ,_de ;};_ad ,_dg :=_ac .(Regioner );if !_dg {return nil ,_c .Errorf ("\u0072\u0065\u0066\u0065\u0072r\u0065\u0064\u0020\u0074\u006f\u0020\u0053\u0065\u0067\u006d\u0065\u006e\u0074 \u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0052\u0065\u0067\u0069\u006f\u006e\u0065\u0072\u003a\u0020\u0025\u0054",_ac );
};return _ad .GetRegionBitmap ();};func (_dggf *TextRegion )readHuffmanFlags ()error {var (_fdb int ;_eefb uint64 ;_gaff error ;);_ ,_gaff =_dggf ._ecga .ReadBit ();if _gaff !=nil {return _gaff ;};_fdb ,_gaff =_dggf ._ecga .ReadBit ();if _gaff !=nil {return _gaff ;
};_dggf .SbHuffRSize =int8 (_fdb );_eefb ,_gaff =_dggf ._ecga .ReadBits (2);if _gaff !=nil {return _gaff ;};_dggf .SbHuffRDY =int8 (_eefb )&0xf;_eefb ,_gaff =_dggf ._ecga .ReadBits (2);if _gaff !=nil {return _gaff ;};_dggf .SbHuffRDX =int8 (_eefb )&0xf;
_eefb ,_gaff =_dggf ._ecga .ReadBits (2);if _gaff !=nil {return _gaff ;};_dggf .SbHuffRDHeight =int8 (_eefb )&0xf;_eefb ,_gaff =_dggf ._ecga .ReadBits (2);if _gaff !=nil {return _gaff ;};_dggf .SbHuffRDWidth =int8 (_eefb )&0xf;_eefb ,_gaff =_dggf ._ecga .ReadBits (2);
if _gaff !=nil {return _gaff ;};_dggf .SbHuffDT =int8 (_eefb )&0xf;_eefb ,_gaff =_dggf ._ecga .ReadBits (2);if _gaff !=nil {return _gaff ;};_dggf .SbHuffDS =int8 (_eefb )&0xf;_eefb ,_gaff =_dggf ._ecga .ReadBits (2);if _gaff !=nil {return _gaff ;};_dggf .SbHuffFS =int8 (_eefb )&0xf;
return nil ;};func (_agfc *SymbolDictionary )readNumberOfNewSymbols ()error {_fgff ,_bfcd :=_agfc ._cecgc .ReadBits (32);if _bfcd !=nil {return _bfcd ;};_agfc .NumberOfNewSymbols =uint32 (_fgff &_d .MaxUint32 );return nil ;};func (_gadg *Header )readDataStartOffset (_befbg *_be .Reader ,_abce OrganizationType ){if _abce ==OSequential {_gadg .SegmentDataStartOffset =uint64 (_befbg .AbsolutePosition ());
};};func (_aedb *template0 )form (_egd ,_afd ,_gab ,_dba ,_gfb int16 )int16 {return (_egd <<10)|(_afd <<7)|(_gab <<4)|(_dba <<1)|_gfb ;};func (_faga *Header )readReferredToSegmentNumbers (_gebe *_be .Reader ,_ceea int )([]int ,error ){const _egeag ="\u0072\u0065\u0061\u0064R\u0065\u0066\u0065\u0072\u0072\u0065\u0064\u0054\u006f\u0053e\u0067m\u0065\u006e\u0074\u004e\u0075\u006d\u0062e\u0072\u0073";
_fdc :=make ([]int ,_ceea );if _ceea > 0{_faga .RTSegments =make ([]*Header ,_ceea );var (_cffe uint64 ;_ggfd error ;);for _ffgd :=0;_ffgd < _ceea ;_ffgd ++{_cffe ,_ggfd =_gebe .ReadBits (byte (_faga .referenceSize ())<<3);if _ggfd !=nil {return nil ,_bg .Wrapf (_ggfd ,_egeag ,"\u0027\u0025\u0064\u0027 \u0072\u0065\u0066\u0065\u0072\u0072\u0065\u0064\u0020\u0073e\u0067m\u0065\u006e\u0074\u0020\u006e\u0075\u006db\u0065\u0072",_ffgd );
};_fdc [_ffgd ]=int (_cffe &_d .MaxInt32 );};};return _fdc ,nil ;};func (_aeae *TextRegion )getUserTable (_ecdc int )(_bb .Tabler ,error ){const _dafbg ="\u0067\u0065\u0074U\u0073\u0065\u0072\u0054\u0061\u0062\u006c\u0065";var _eaee int ;for _ ,_edef :=range _aeae .Header .RTSegments {if _edef .Type ==53{if _eaee ==_ecdc {_gggff ,_ceeg :=_edef .GetSegmentData ();
if _ceeg !=nil {return nil ,_ceeg ;};_ffgdf ,_cade :=_gggff .(*TableSegment );if !_cade {_ecc .Log .Debug (_c .Sprintf ("\u0073\u0065\u0067\u006d\u0065\u006e\u0074 \u0077\u0069\u0074h\u0020\u0054\u0079p\u0065\u00205\u0033\u0020\u002d\u0020\u0061\u006ed\u0020in\u0064\u0065\u0078\u003a\u0020\u0025\u0064\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u0054\u0061\u0062\u006c\u0065\u0053\u0065\u0067\u006d\u0065\u006e\u0074",_edef .SegmentNumber ));
return nil ,_bg .Error (_dafbg ,"\u0073\u0065\u0067\u006d\u0065\u006e\u0074 \u0077\u0069\u0074h\u0020\u0054\u0079\u0070e\u0020\u0035\u0033\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u0020\u002a\u0054\u0061\u0062\u006c\u0065\u0053\u0065\u0067\u006d\u0065\u006e\u0074");
};return _bb .NewEncodedTable (_ffgdf );};_eaee ++;};};return nil ,nil ;};func (_fgda *template0 )setIndex (_cgg *_g .DecoderStats ){_cgg .SetIndex (0x100)};func (_befc *SymbolDictionary )encodeATFlags (_dbag _be .BinaryWriter )(_ceeb int ,_dafg error ){const _fccb ="\u0065\u006e\u0063\u006f\u0064\u0065\u0041\u0054\u0046\u006c\u0061\u0067\u0073";
if _befc .IsHuffmanEncoded ||_befc .SdTemplate !=0{return 0,nil ;};_ecff :=4;if _befc .SdTemplate !=0{_ecff =1;};for _dffge :=0;_dffge < _ecff ;_dffge ++{if _dafg =_dbag .WriteByte (byte (_befc .SdATX [_dffge ]));_dafg !=nil {return _ceeb ,_bg .Wrapf (_dafg ,_fccb ,"\u0053d\u0041\u0054\u0058\u005b\u0025\u0064]",_dffge );
};_ceeb ++;if _dafg =_dbag .WriteByte (byte (_befc .SdATY [_dffge ]));_dafg !=nil {return _ceeb ,_bg .Wrapf (_dafg ,_fccb ,"\u0053d\u0041\u0054\u0059\u005b\u0025\u0064]",_dffge );};_ceeb ++;};return _ceeb ,nil ;};func (_eabd *HalftoneRegion )renderPattern (_abbd [][]int )(_egea error ){var _aggfe ,_cbfe int ;
for _gcge :=0;_gcge < int (_eabd .HGridHeight );_gcge ++{for _cdee :=0;_cdee < int (_eabd .HGridWidth );_cdee ++{_aggfe =_eabd .computeX (_gcge ,_cdee );_cbfe =_eabd .computeY (_gcge ,_cdee );_bcef :=_eabd .Patterns [_abbd [_gcge ][_cdee ]];if _egea =_eag .Blit (_bcef ,_eabd .HalftoneRegionBitmap ,_aggfe +int (_eabd .HGridX ),_cbfe +int (_eabd .HGridY ),_eabd .CombinationOperator );
_egea !=nil {return _egea ;};};};return nil ;};var _ templater =&template0 {};type template1 struct{};func (_cbe *GenericRegion )overrideAtTemplate3 (_gba ,_fcb ,_bbba ,_gcgb ,_cbb int )int {_gba &=0x3EF;if _cbe .GBAtY [0]==0&&_cbe .GBAtX [0]>=-int8 (_cbb ){_gba |=(_gcgb >>uint (7-(int8 (_cbb )+_cbe .GBAtX [0]))&0x1)<<4;
}else {_gba |=int (_cbe .getPixel (_fcb +int (_cbe .GBAtX [0]),_bbba +int (_cbe .GBAtY [0])))<<4;};return _gba ;};func (_bfgga *RegionSegment )Encode (w _be .BinaryWriter )(_dbceb int ,_edd error ){const _ggcaa ="R\u0065g\u0069\u006f\u006e\u0053\u0065\u0067\u006d\u0065n\u0074\u002e\u0045\u006eco\u0064\u0065";
_daef :=make ([]byte ,4);_b .BigEndian .PutUint32 (_daef ,_bfgga .BitmapWidth );_dbceb ,_edd =w .Write (_daef );if _edd !=nil {return 0,_bg .Wrap (_edd ,_ggcaa ,"\u0057\u0069\u0064t\u0068");};_b .BigEndian .PutUint32 (_daef ,_bfgga .BitmapHeight );var _cffbc int ;
_cffbc ,_edd =w .Write (_daef );if _edd !=nil {return 0,_bg .Wrap (_edd ,_ggcaa ,"\u0048\u0065\u0069\u0067\u0068\u0074");};_dbceb +=_cffbc ;_b .BigEndian .PutUint32 (_daef ,_bfgga .XLocation );_cffbc ,_edd =w .Write (_daef );if _edd !=nil {return 0,_bg .Wrap (_edd ,_ggcaa ,"\u0058L\u006f\u0063\u0061\u0074\u0069\u006fn");
};_dbceb +=_cffbc ;_b .BigEndian .PutUint32 (_daef ,_bfgga .YLocation );_cffbc ,_edd =w .Write (_daef );if _edd !=nil {return 0,_bg .Wrap (_edd ,_ggcaa ,"\u0059L\u006f\u0063\u0061\u0074\u0069\u006fn");};_dbceb +=_cffbc ;if _edd =w .WriteByte (byte (_bfgga .CombinaionOperator )&0x07);
_edd !=nil {return 0,_bg .Wrap (_edd ,_ggcaa ,"c\u006fm\u0062\u0069\u006e\u0061\u0074\u0069\u006f\u006e \u006f\u0070\u0065\u0072at\u006f\u0072");};_dbceb ++;return _dbceb ,nil ;};type PageInformationSegment struct{_cbcb *_be .Reader ;PageBMHeight int ;
PageBMWidth int ;ResolutionX int ;ResolutionY int ;_bad bool ;_cbge _eag .CombinationOperator ;_adg bool ;DefaultPixelValue uint8 ;_ceaca bool ;IsLossless bool ;IsStripe bool ;MaxStripeSize uint16 ;};type OrganizationType uint8 ;func (_dgge *PatternDictionary )setGbAtPixels (){if _dgge .HDTemplate ==0{_dgge .GBAtX =make ([]int8 ,4);
_dgge .GBAtY =make ([]int8 ,4);_dgge .GBAtX [0]=-int8 (_dgge .HdpWidth );_dgge .GBAtY [0]=0;_dgge .GBAtX [1]=-3;_dgge .GBAtY [1]=-1;_dgge .GBAtX [2]=2;_dgge .GBAtY [2]=-2;_dgge .GBAtX [3]=-2;_dgge .GBAtY [3]=-2;}else {_dgge .GBAtX =[]int8 {-int8 (_dgge .HdpWidth )};
_dgge .GBAtY =[]int8 {0};};};type SegmentEncoder interface{Encode (_fed _be .BinaryWriter )(_bgbe int ,_cgab error );};func (_gdb *TableSegment )HtLow ()int32 {return _gdb ._ddcb };func (_fgef *SymbolDictionary )decodeNewSymbols (_adbfe ,_begf uint32 ,_fadb *_eag .Bitmap ,_gfaf ,_gcec int32 )error {if _fgef ._ggff ==nil {_fgef ._ggff =_ecaf (_fgef ._cecgc ,nil );
if _fgef ._bbgf ==nil {var _dbfa error ;_fgef ._bbgf ,_dbfa =_g .New (_fgef ._cecgc );if _dbfa !=nil {return _dbfa ;};};if _fgef ._edeb ==nil {_fgef ._edeb =_g .NewStats (65536,1);};};_fgef ._ggff .setParameters (_fgef ._edeb ,_fgef ._bbgf ,_fgef .SdrTemplate ,_adbfe ,_begf ,_fadb ,_gfaf ,_gcec ,false ,_fgef .SdrATX ,_fgef .SdrATY );
return _fgef .addSymbol (_fgef ._ggff );};func (_dfd *GenericRegion )updateOverrideFlags ()error {const _fbde ="\u0075\u0070\u0064\u0061te\u004f\u0076\u0065\u0072\u0072\u0069\u0064\u0065\u0046\u006c\u0061\u0067\u0073";if _dfd .GBAtX ==nil ||_dfd .GBAtY ==nil {return nil ;
};if len (_dfd .GBAtX )!=len (_dfd .GBAtY ){return _bg .Errorf (_fbde ,"i\u006eco\u0073i\u0073t\u0065\u006e\u0074\u0020\u0041T\u0020\u0070\u0069x\u0065\u006c\u002e\u0020\u0041m\u006f\u0075\u006et\u0020\u006f\u0066\u0020\u0027\u0078\u0027\u0020\u0070\u0069\u0078e\u006c\u0073\u003a %d\u002c\u0020\u0041\u006d\u006f\u0075n\u0074\u0020\u006f\u0066\u0020\u0027\u0079\u0027\u0020\u0070\u0069\u0078e\u006cs\u003a\u0020\u0025\u0064",len (_dfd .GBAtX ),len (_dfd .GBAtY ));
};_dfd .GBAtOverride =make ([]bool ,len (_dfd .GBAtX ));switch _dfd .GBTemplate {case 0:if !_dfd .UseExtTemplates {if _dfd .GBAtX [0]!=3||_dfd .GBAtY [0]!=-1{_dfd .setOverrideFlag (0);};if _dfd .GBAtX [1]!=-3||_dfd .GBAtY [1]!=-1{_dfd .setOverrideFlag (1);
};if _dfd .GBAtX [2]!=2||_dfd .GBAtY [2]!=-2{_dfd .setOverrideFlag (2);};if _dfd .GBAtX [3]!=-2||_dfd .GBAtY [3]!=-2{_dfd .setOverrideFlag (3);};}else {if _dfd .GBAtX [0]!=-2||_dfd .GBAtY [0]!=0{_dfd .setOverrideFlag (0);};if _dfd .GBAtX [1]!=0||_dfd .GBAtY [1]!=-2{_dfd .setOverrideFlag (1);
};if _dfd .GBAtX [2]!=-2||_dfd .GBAtY [2]!=-1{_dfd .setOverrideFlag (2);};if _dfd .GBAtX [3]!=-1||_dfd .GBAtY [3]!=-2{_dfd .setOverrideFlag (3);};if _dfd .GBAtX [4]!=1||_dfd .GBAtY [4]!=-2{_dfd .setOverrideFlag (4);};if _dfd .GBAtX [5]!=2||_dfd .GBAtY [5]!=-1{_dfd .setOverrideFlag (5);
};if _dfd .GBAtX [6]!=-3||_dfd .GBAtY [6]!=0{_dfd .setOverrideFlag (6);};if _dfd .GBAtX [7]!=-4||_dfd .GBAtY [7]!=0{_dfd .setOverrideFlag (7);};if _dfd .GBAtX [8]!=2||_dfd .GBAtY [8]!=-2{_dfd .setOverrideFlag (8);};if _dfd .GBAtX [9]!=3||_dfd .GBAtY [9]!=-1{_dfd .setOverrideFlag (9);
};if _dfd .GBAtX [10]!=-2||_dfd .GBAtY [10]!=-2{_dfd .setOverrideFlag (10);};if _dfd .GBAtX [11]!=-3||_dfd .GBAtY [11]!=-1{_dfd .setOverrideFlag (11);};};case 1:if _dfd .GBAtX [0]!=3||_dfd .GBAtY [0]!=-1{_dfd .setOverrideFlag (0);};case 2:if _dfd .GBAtX [0]!=2||_dfd .GBAtY [0]!=-1{_dfd .setOverrideFlag (0);
};case 3:if _dfd .GBAtX [0]!=2||_dfd .GBAtY [0]!=-1{_dfd .setOverrideFlag (0);};};return nil ;};type Documenter interface{GetPage (int )(Pager ,error );GetGlobalSegment (int )(*Header ,error );};func (_feda *RegionSegment )String ()string {_eecf :=&_db .Builder {};
_eecf .WriteString ("\u0009[\u0052E\u0047\u0049\u004f\u004e\u0020S\u0045\u0047M\u0045\u004e\u0054\u005d\u000a");_eecf .WriteString (_c .Sprintf ("\t\u0009\u002d\u0020\u0042\u0069\u0074m\u0061\u0070\u0020\u0028\u0077\u0069d\u0074\u0068\u002c\u0020\u0068\u0065\u0069g\u0068\u0074\u0029\u0020\u005b\u0025\u0064\u0078\u0025\u0064]\u000a",_feda .BitmapWidth ,_feda .BitmapHeight ));
_eecf .WriteString (_c .Sprintf ("\u0009\u0009\u002d\u0020L\u006f\u0063\u0061\u0074\u0069\u006f\u006e\u0020\u0028\u0078,\u0079)\u003a\u0020\u005b\u0025\u0064\u002c\u0025d\u005d\u000a",_feda .XLocation ,_feda .YLocation ));_eecf .WriteString (_c .Sprintf ("\t\u0009\u002d\u0020\u0043\u006f\u006db\u0069\u006e\u0061\u0074\u0069\u006f\u006e\u004f\u0070e\u0072\u0061\u0074o\u0072:\u0020\u0025\u0073",_feda .CombinaionOperator ));
return _eecf .String ();};func (_efba *PageInformationSegment )readDefaultPixelValue ()error {_gcf ,_eecdc :=_efba ._cbcb .ReadBit ();if _eecdc !=nil {return _eecdc ;};_efba .DefaultPixelValue =uint8 (_gcf &0xf);return nil ;};func (_eaa *GenericRefinementRegion )decodeOptimized (_aa ,_bf ,_begb ,_cg ,_bbe ,_gad ,_bbef int )error {var (_abf error ;
_abb int ;_ged int ;);_dde :=_aa -int (_eaa .ReferenceDY );if _dgd :=int (-_eaa .ReferenceDX );_dgd > 0{_abb =_dgd ;};_aba :=_eaa .ReferenceBitmap .GetByteIndex (_abb ,_dde );if _eaa .ReferenceDX > 0{_ged =int (_eaa .ReferenceDX );};_ff :=_eaa .RegionBitmap .GetByteIndex (_ged ,_aa );
switch _eaa .TemplateID {case 0:_abf =_eaa .decodeTemplate (_aa ,_bf ,_begb ,_cg ,_bbe ,_gad ,_bbef ,_ff ,_dde ,_aba ,_eaa ._ecb );case 1:_abf =_eaa .decodeTemplate (_aa ,_bf ,_begb ,_cg ,_bbe ,_gad ,_bbef ,_ff ,_dde ,_aba ,_eaa ._cff );};return _abf ;
};func (_ggfg *GenericRegion )decodeSLTP ()(int ,error ){switch _ggfg .GBTemplate {case 0:_ggfg ._gcgd .SetIndex (0x9B25);case 1:_ggfg ._gcgd .SetIndex (0x795);case 2:_ggfg ._gcgd .SetIndex (0xE5);case 3:_ggfg ._gcgd .SetIndex (0x195);};return _ggfg ._dac .DecodeBit (_ggfg ._gcgd );
};func (_bccc *SymbolDictionary )decodeHeightClassDeltaHeight ()(int64 ,error ){if _bccc .IsHuffmanEncoded {return _bccc .decodeHeightClassDeltaHeightWithHuffman ();};_eagab ,_dddc :=_bccc ._bbgf .DecodeInt (_bccc ._fegg );if _dddc !=nil {return 0,_dddc ;
};return int64 (_eagab ),nil ;};func (_ccff *Header )pageSize ()uint {if _ccff .PageAssociation <=255{return 1;};return 4;};func (_adfe *Header )readHeaderLength (_bfcc *_be .Reader ,_gbfb int64 ){_adfe .HeaderLength =_bfcc .AbsolutePosition ()-_gbfb ;
};func (_dgff *TextRegion )decodeRI ()(int64 ,error ){if !_dgff .UseRefinement {return 0,nil ;};if _dgff .IsHuffmanEncoded {_ceff ,_dffb :=_dgff ._ecga .ReadBit ();return int64 (_ceff ),_dffb ;};_dbbdf ,_fbgdf :=_dgff ._bafa .DecodeInt (_dgff ._cfcc );
return int64 (_dbbdf ),_fbgdf ;};func (_eaab *GenericRegion )GetRegionBitmap ()(_cca *_eag .Bitmap ,_dfc error ){if _eaab .Bitmap !=nil {return _eaab .Bitmap ,nil ;};if _eaab .IsMMREncoded {if _eaab ._gdd ==nil {_eaab ._gdd ,_dfc =_cc .New (_eaab ._fb ,int (_eaab .RegionSegment .BitmapWidth ),int (_eaab .RegionSegment .BitmapHeight ),_eaab .DataOffset ,_eaab .DataLength );
if _dfc !=nil {return nil ,_dfc ;};};_eaab .Bitmap ,_dfc =_eaab ._gdd .UncompressMMR ();return _eaab .Bitmap ,_dfc ;};if _dfc =_eaab .updateOverrideFlags ();_dfc !=nil {return nil ,_dfc ;};var _abcd int ;if _eaab ._dac ==nil {_eaab ._dac ,_dfc =_g .New (_eaab ._fb );
if _dfc !=nil {return nil ,_dfc ;};};if _eaab ._gcgd ==nil {_eaab ._gcgd =_g .NewStats (65536,1);};_eaab .Bitmap =_eag .New (int (_eaab .RegionSegment .BitmapWidth ),int (_eaab .RegionSegment .BitmapHeight ));_gdca :=int (uint32 (_eaab .Bitmap .Width +7)&(^uint32 (7)));
for _ddge :=0;_ddge < _eaab .Bitmap .Height ;_ddge ++{if _eaab .IsTPGDon {var _eage int ;_eage ,_dfc =_eaab .decodeSLTP ();if _dfc !=nil {return nil ,_dfc ;};_abcd ^=_eage ;};if _abcd ==1{if _ddge > 0{if _dfc =_eaab .copyLineAbove (_ddge );_dfc !=nil {return nil ,_dfc ;
};};}else {if _dfc =_eaab .decodeLine (_ddge ,_eaab .Bitmap .Width ,_gdca );_dfc !=nil {return nil ,_dfc ;};};};return _eaab .Bitmap ,nil ;};func (_gcea *SymbolDictionary )readAtPixels (_bafgc int )error {_gcea .SdATX =make ([]int8 ,_bafgc );_gcea .SdATY =make ([]int8 ,_bafgc );
var (_bfff byte ;_dcda error ;);for _fbffd :=0;_fbffd < _bafgc ;_fbffd ++{_bfff ,_dcda =_gcea ._cecgc .ReadByte ();if _dcda !=nil {return _dcda ;};_gcea .SdATX [_fbffd ]=int8 (_bfff );_bfff ,_dcda =_gcea ._cecgc .ReadByte ();if _dcda !=nil {return _dcda ;
};_gcea .SdATY [_fbffd ]=int8 (_bfff );};return nil ;};func (_efd *HalftoneRegion )grayScaleDecoding (_gbade int )([][]int ,error ){var (_efdc []int8 ;_cbace []int8 ;);if !_efd .IsMMREncoded {_efdc =make ([]int8 ,4);_cbace =make ([]int8 ,4);if _efd .HTemplate <=1{_efdc [0]=3;
}else if _efd .HTemplate >=2{_efdc [0]=2;};_cbace [0]=-1;_efdc [1]=-3;_cbace [1]=-1;_efdc [2]=2;_cbace [2]=-2;_efdc [3]=-2;_cbace [3]=-2;};_cfgc :=make ([]*_eag .Bitmap ,_gbade );_bae :=NewGenericRegion (_efd ._cae );_bae .setParametersMMR (_efd .IsMMREncoded ,_efd .DataOffset ,_efd .DataLength ,_efd .HGridHeight ,_efd .HGridWidth ,_efd .HTemplate ,false ,_efd .HSkipEnabled ,_efdc ,_cbace );
_cda :=_gbade -1;var _fbbb error ;_cfgc [_cda ],_fbbb =_bae .GetRegionBitmap ();if _fbbb !=nil {return nil ,_fbbb ;};for _cda > 0{_cda --;_bae .Bitmap =nil ;_cfgc [_cda ],_fbbb =_bae .GetRegionBitmap ();if _fbbb !=nil {return nil ,_fbbb ;};if _fbbb =_efd .combineGrayscalePlanes (_cfgc ,_cda );
_fbbb !=nil {return nil ,_fbbb ;};};return _efd .computeGrayScalePlanes (_cfgc ,_gbade );};func (_cgec *SymbolDictionary )getSymbol (_gaec int )(*_eag .Bitmap ,error ){const _egeb ="\u0067e\u0074\u0053\u0079\u006d\u0062\u006fl";_gcac ,_efeb :=_cgec ._dbgf .GetBitmap (_cgec ._ffef [_gaec ]);
if _efeb !=nil {return nil ,_bg .Wrap (_efeb ,_egeb ,"\u0063\u0061n\u0027\u0074\u0020g\u0065\u0074\u0020\u0073\u0079\u006d\u0062\u006f\u006c");};return _gcac ,nil ;};func (_bfg *GenericRegion )String ()string {_dda :=&_db .Builder {};_dda .WriteString ("\u000a[\u0047E\u004e\u0045\u0052\u0049\u0043 \u0052\u0045G\u0049\u004f\u004e\u005d\u000a");
_dda .WriteString (_bfg .RegionSegment .String ()+"\u000a");_dda .WriteString (_c .Sprintf ("\u0009\u002d\u0020Us\u0065\u0045\u0078\u0074\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0073\u003a\u0020\u0025\u0076\u000a",_bfg .UseExtTemplates ));_dda .WriteString (_c .Sprintf ("\u0009\u002d \u0049\u0073\u0054P\u0047\u0044\u006f\u006e\u003a\u0020\u0025\u0076\u000a",_bfg .IsTPGDon ));
_dda .WriteString (_c .Sprintf ("\u0009-\u0020G\u0042\u0054\u0065\u006d\u0070l\u0061\u0074e\u003a\u0020\u0025\u0064\u000a",_bfg .GBTemplate ));_dda .WriteString (_c .Sprintf ("\t\u002d \u0049\u0073\u004d\u004d\u0052\u0045\u006e\u0063o\u0064\u0065\u0064\u003a %\u0076\u000a",_bfg .IsMMREncoded ));
_dda .WriteString (_c .Sprintf ("\u0009\u002d\u0020\u0047\u0042\u0041\u0074\u0058\u003a\u0020\u0025\u0076\u000a",_bfg .GBAtX ));_dda .WriteString (_c .Sprintf ("\u0009\u002d\u0020\u0047\u0042\u0041\u0074\u0059\u003a\u0020\u0025\u0076\u000a",_bfg .GBAtY ));
_dda .WriteString (_c .Sprintf ("\t\u002d \u0047\u0042\u0041\u0074\u004f\u0076\u0065\u0072r\u0069\u0064\u0065\u003a %\u0076\u000a",_bfg .GBAtOverride ));return _dda .String ();};func (_ffcg *SymbolDictionary )decodeThroughTextRegion (_bfbb ,_fbdg ,_cdcbb uint32 )error {if _ffcg ._dgee ==nil {_ffcg ._dgee =_begc (_ffcg ._cecgc ,nil );
_ffcg ._dgee .setContexts (_ffcg ._edeb ,_g .NewStats (512,1),_g .NewStats (512,1),_g .NewStats (512,1),_g .NewStats (512,1),_ffcg ._gagf ,_g .NewStats (512,1),_g .NewStats (512,1),_g .NewStats (512,1),_g .NewStats (512,1));};if _dedc :=_ffcg .setSymbolsArray ();
_dedc !=nil {return _dedc ;};_ffcg ._dgee .setParameters (_ffcg ._bbgf ,_ffcg .IsHuffmanEncoded ,true ,_bfbb ,_fbdg ,_cdcbb ,1,_ffcg ._ggdcg +_ffcg ._abde ,0,0,0,1,0,0,0,0,0,0,0,0,0,_ffcg .SdrTemplate ,_ffcg .SdrATX ,_ffcg .SdrATY ,_ffcg ._gfea ,_ffcg ._fdfb );
return _ffcg .addSymbol (_ffcg ._dgee );};func (_dbdb *GenericRegion )setOverrideFlag (_adbg int ){_dbdb .GBAtOverride [_adbg ]=true ;_dbdb ._ebfe =true ;};func (_gegd *GenericRegion )setParametersWithAt (_fffb bool ,_befdd byte ,_gafd ,_dgce bool ,_edgd ,_ddc []int8 ,_cfg ,_fgad uint32 ,_bfgg *_g .DecoderStats ,_gegda *_g .Decoder ){_gegd .IsMMREncoded =_fffb ;
_gegd .GBTemplate =_befdd ;_gegd .IsTPGDon =_gafd ;_gegd .GBAtX =_edgd ;_gegd .GBAtY =_ddc ;_gegd .RegionSegment .BitmapHeight =_fgad ;_gegd .RegionSegment .BitmapWidth =_cfg ;_gegd ._gdd =nil ;_gegd .Bitmap =nil ;if _bfgg !=nil {_gegd ._gcgd =_bfgg ;};
if _gegda !=nil {_gegd ._dac =_gegda ;};_ecc .Log .Trace ("\u005b\u0047\u0045\u004e\u0045\u0052\u0049\u0043\u002d\u0052\u0045\u0047\u0049O\u004e\u005d\u0020\u0073\u0065\u0074P\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u0020\u0053\u0044\u0041t\u003a\u0020\u0025\u0073",_gegd );
};func (_bfad *SymbolDictionary )decodeRefinedSymbol (_eabe ,_becb uint32 )error {var (_fdgf int ;_cbfg ,_caab int32 ;);if _bfad .IsHuffmanEncoded {_dddbc ,_defg :=_bfad ._cecgc .ReadBits (byte (_bfad ._fdfb ));if _defg !=nil {return _defg ;};_fdgf =int (_dddbc );
_gbe ,_defg :=_bb .GetStandardTable (15);if _defg !=nil {return _defg ;};_gfeaa ,_defg :=_gbe .Decode (_bfad ._cecgc );if _defg !=nil {return _defg ;};_cbfg =int32 (_gfeaa );_gfeaa ,_defg =_gbe .Decode (_bfad ._cecgc );if _defg !=nil {return _defg ;};_caab =int32 (_gfeaa );
_gbe ,_defg =_bb .GetStandardTable (1);if _defg !=nil {return _defg ;};if _ ,_defg =_gbe .Decode (_bfad ._cecgc );_defg !=nil {return _defg ;};_bfad ._cecgc .Align ();}else {_abgc ,_fcgc :=_bfad ._bbgf .DecodeIAID (uint64 (_bfad ._fdfb ),_bfad ._gagf );
if _fcgc !=nil {return _fcgc ;};_fdgf =int (_abgc );_cbfg ,_fcgc =_bfad ._bbgf .DecodeInt (_bfad ._ggba );if _fcgc !=nil {return _fcgc ;};_caab ,_fcgc =_bfad ._bbgf .DecodeInt (_bfad ._cbcab );if _fcgc !=nil {return _fcgc ;};};if _fbbg :=_bfad .setSymbolsArray ();
_fbbg !=nil {return _fbbg ;};_ebg :=_bfad ._gfea [_fdgf ];if _ggbb :=_bfad .decodeNewSymbols (_eabe ,_becb ,_ebg ,_cbfg ,_caab );_ggbb !=nil {return _ggbb ;};if _bfad .IsHuffmanEncoded {_bfad ._cecgc .Align ();};return nil ;};func (_fcge *PatternDictionary )GetDictionary ()([]*_eag .Bitmap ,error ){if _fcge .Patterns !=nil {return _fcge .Patterns ,nil ;
};if !_fcge .IsMMREncoded {_fcge .setGbAtPixels ();};_cagc :=NewGenericRegion (_fcge ._agcg );_cagc .setParametersMMR (_fcge .IsMMREncoded ,_fcge .DataOffset ,_fcge .DataLength ,uint32 (_fcge .HdpHeight ),(_fcge .GrayMax +1)*uint32 (_fcge .HdpWidth ),_fcge .HDTemplate ,false ,false ,_fcge .GBAtX ,_fcge .GBAtY );
_cedf ,_faff :=_cagc .GetRegionBitmap ();if _faff !=nil {return nil ,_faff ;};if _faff =_fcge .extractPatterns (_cedf );_faff !=nil {return nil ,_faff ;};return _fcge .Patterns ,nil ;};func (_ccce *PageInformationSegment )checkInput ()error {if _ccce .PageBMHeight ==_d .MaxInt32 {if !_ccce .IsStripe {_ecc .Log .Debug ("P\u0061\u0067\u0065\u0049\u006e\u0066\u006f\u0072\u006da\u0074\u0069\u006f\u006e\u0053\u0065\u0067me\u006e\u0074\u002e\u0049s\u0053\u0074\u0072\u0069\u0070\u0065\u0020\u0073\u0068ou\u006c\u0064 \u0062\u0065\u0020\u0074\u0072\u0075\u0065\u002e");
};};return nil ;};func (_fgggc *TextRegion )encodeFlags (_cbdff _be .BinaryWriter )(_ebdga int ,_eeeb error ){const _cege ="e\u006e\u0063\u006f\u0064\u0065\u0046\u006c\u0061\u0067\u0073";if _eeeb =_cbdff .WriteBit (int (_fgggc .SbrTemplate ));_eeeb !=nil {return _ebdga ,_bg .Wrap (_eeeb ,_cege ,"s\u0062\u0072\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065");
};if _ ,_eeeb =_cbdff .WriteBits (uint64 (_fgggc .SbDsOffset ),5);_eeeb !=nil {return _ebdga ,_bg .Wrap (_eeeb ,_cege ,"\u0073\u0062\u0044\u0073\u004f\u0066\u0066\u0073\u0065\u0074");};if _eeeb =_cbdff .WriteBit (int (_fgggc .DefaultPixel ));_eeeb !=nil {return _ebdga ,_bg .Wrap (_eeeb ,_cege ,"\u0044\u0065\u0066a\u0075\u006c\u0074\u0050\u0069\u0078\u0065\u006c");
};if _ ,_eeeb =_cbdff .WriteBits (uint64 (_fgggc .CombinationOperator ),2);_eeeb !=nil {return _ebdga ,_bg .Wrap (_eeeb ,_cege ,"\u0043\u006f\u006d\u0062in\u0061\u0074\u0069\u006f\u006e\u004f\u0070\u0065\u0072\u0061\u0074\u006f\u0072");};if _eeeb =_cbdff .WriteBit (int (_fgggc .IsTransposed ));
_eeeb !=nil {return _ebdga ,_bg .Wrap (_eeeb ,_cege ,"\u0069\u0073\u0020\u0074\u0072\u0061\u006e\u0073\u0070\u006f\u0073\u0065\u0064");};if _ ,_eeeb =_cbdff .WriteBits (uint64 (_fgggc .ReferenceCorner ),2);_eeeb !=nil {return _ebdga ,_bg .Wrap (_eeeb ,_cege ,"\u0072\u0065f\u0065\u0072\u0065n\u0063\u0065\u0020\u0063\u006f\u0072\u006e\u0065\u0072");
};if _ ,_eeeb =_cbdff .WriteBits (uint64 (_fgggc .LogSBStrips ),2);_eeeb !=nil {return _ebdga ,_bg .Wrap (_eeeb ,_cege ,"L\u006f\u0067\u0053\u0042\u0053\u0074\u0072\u0069\u0070\u0073");};var _bdeg int ;if _fgggc .UseRefinement {_bdeg =1;};if _eeeb =_cbdff .WriteBit (_bdeg );
_eeeb !=nil {return _ebdga ,_bg .Wrap (_eeeb ,_cege ,"\u0075\u0073\u0065\u0020\u0072\u0065\u0066\u0069\u006ee\u006d\u0065\u006e\u0074");};_bdeg =0;if _fgggc .IsHuffmanEncoded {_bdeg =1;};if _eeeb =_cbdff .WriteBit (_bdeg );_eeeb !=nil {return _ebdga ,_bg .Wrap (_eeeb ,_cege ,"u\u0073\u0065\u0020\u0068\u0075\u0066\u0066\u006d\u0061\u006e");
};_ebdga =2;return _ebdga ,nil ;};type TableSegment struct{_daggf *_be .Reader ;_agab int32 ;_bfgb int32 ;_fbef int32 ;_ddcb int32 ;_egbfb int32 ;};func (_ab *EndOfStripe )parseHeader ()error {_gc ,_f :=_ab ._cb .ReadBits (32);if _f !=nil {return _f ;};
_ab ._bge =int (_gc &_d .MaxInt32 );return nil ;};func (_daec *PageInformationSegment )encodeFlags (_aabb _be .BinaryWriter )(_ddaa error ){const _egbf ="e\u006e\u0063\u006f\u0064\u0065\u0046\u006c\u0061\u0067\u0073";if _ddaa =_aabb .SkipBits (1);_ddaa !=nil {return _bg .Wrap (_ddaa ,_egbf ,"\u0072\u0065\u0073e\u0072\u0076\u0065\u0064\u0020\u0062\u0069\u0074");
};var _gfe int ;if _daec .CombinationOperatorOverrideAllowed (){_gfe =1;};if _ddaa =_aabb .WriteBit (_gfe );_ddaa !=nil {return _bg .Wrap (_ddaa ,_egbf ,"\u0063\u006f\u006db\u0069\u006e\u0061\u0074i\u006f\u006e\u0020\u006f\u0070\u0065\u0072a\u0074\u006f\u0072\u0020\u006f\u0076\u0065\u0072\u0072\u0069\u0064\u0064\u0065\u006e");
};_gfe =0;if _daec ._adg {_gfe =1;};if _ddaa =_aabb .WriteBit (_gfe );_ddaa !=nil {return _bg .Wrap (_ddaa ,_egbf ,"\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0061\u0075\u0078i\u006ci\u0061r\u0079\u0020\u0062\u0075\u0066\u0066\u0065r");};if _ddaa =_aabb .WriteBit ((int (_daec ._cbge )>>1)&0x01);
_ddaa !=nil {return _bg .Wrap (_ddaa ,_egbf ,"\u0063\u006f\u006d\u0062\u0069\u006e\u0061\u0074\u0069\u006fn\u0020\u006f\u0070\u0065\u0072\u0061\u0074o\u0072\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0062\u0069\u0074");};if _ddaa =_aabb .WriteBit (int (_daec ._cbge )&0x01);
_ddaa !=nil {return _bg .Wrap (_ddaa ,_egbf ,"\u0063\u006f\u006db\u0069\u006e\u0061\u0074i\u006f\u006e\u0020\u006f\u0070\u0065\u0072a\u0074\u006f\u0072\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0062\u0069\u0074");};_gfe =int (_daec .DefaultPixelValue );
if _ddaa =_aabb .WriteBit (_gfe );_ddaa !=nil {return _bg .Wrap (_ddaa ,_egbf ,"\u0064e\u0066\u0061\u0075\u006c\u0074\u0020\u0070\u0061\u0067\u0065\u0020p\u0069\u0078\u0065\u006c\u0020\u0076\u0061\u006c\u0075\u0065");};_gfe =0;if _daec ._ceaca {_gfe =1;
};if _ddaa =_aabb .WriteBit (_gfe );_ddaa !=nil {return _bg .Wrap (_ddaa ,_egbf ,"\u0063\u006f\u006e\u0074ai\u006e\u0073\u0020\u0072\u0065\u0066\u0069\u006e\u0065\u006d\u0065\u006e\u0074");};_gfe =0;if _daec .IsLossless {_gfe =1;};if _ddaa =_aabb .WriteBit (_gfe );
_ddaa !=nil {return _bg .Wrap (_ddaa ,_egbf ,"p\u0061\u0067\u0065\u0020\u0069\u0073 \u0065\u0076\u0065\u006e\u0074\u0075\u0061\u006c\u006cy\u0020\u006c\u006fs\u0073l\u0065\u0073\u0073");};return nil ;};func (_gacbf *TextRegion )blit (_cgad *_eag .Bitmap ,_adag int64 )error {if _gacbf .IsTransposed ==0&&(_gacbf .ReferenceCorner ==2||_gacbf .ReferenceCorner ==3){_gacbf ._abdc +=int64 (_cgad .Width -1);
}else if _gacbf .IsTransposed ==1&&(_gacbf .ReferenceCorner ==0||_gacbf .ReferenceCorner ==2){_gacbf ._abdc +=int64 (_cgad .Height -1);};_bbab :=_gacbf ._abdc ;if _gacbf .IsTransposed ==1{_bbab ,_adag =_adag ,_bbab ;};switch _gacbf .ReferenceCorner {case 0:_adag -=int64 (_cgad .Height -1);
case 2:_adag -=int64 (_cgad .Height -1);_bbab -=int64 (_cgad .Width -1);case 3:_bbab -=int64 (_cgad .Width -1);};_ggda :=_eag .Blit (_cgad ,_gacbf .RegionBitmap ,int (_bbab ),int (_adag ),_gacbf .CombinationOperator );if _ggda !=nil {return _ggda ;};if _gacbf .IsTransposed ==0&&(_gacbf .ReferenceCorner ==0||_gacbf .ReferenceCorner ==1){_gacbf ._abdc +=int64 (_cgad .Width -1);
};if _gacbf .IsTransposed ==1&&(_gacbf .ReferenceCorner ==1||_gacbf .ReferenceCorner ==3){_gacbf ._abdc +=int64 (_cgad .Height -1);};return nil ;};func (_cfac *RegionSegment )parseHeader ()error {const _fegf ="p\u0061\u0072\u0073\u0065\u0048\u0065\u0061\u0064\u0065\u0072";
_ecc .Log .Trace ("\u005b\u0052\u0045\u0047I\u004f\u004e\u005d\u005b\u0050\u0041\u0052\u0053\u0045\u002dH\u0045A\u0044\u0045\u0052\u005d\u0020\u0042\u0065g\u0069\u006e");defer func (){_ecc .Log .Trace ("\u005b\u0052\u0045G\u0049\u004f\u004e\u005d[\u0050\u0041\u0052\u0053\u0045\u002d\u0048E\u0041\u0044\u0045\u0052\u005d\u0020\u0046\u0069\u006e\u0069\u0073\u0068\u0065\u0064");
}();_dfa ,_dfgb :=_cfac ._ecfa .ReadBits (32);if _dfgb !=nil {return _bg .Wrap (_dfgb ,_fegf ,"\u0077\u0069\u0064t\u0068");};_cfac .BitmapWidth =uint32 (_dfa &_d .MaxUint32 );_dfa ,_dfgb =_cfac ._ecfa .ReadBits (32);if _dfgb !=nil {return _bg .Wrap (_dfgb ,_fegf ,"\u0068\u0065\u0069\u0067\u0068\u0074");
};_cfac .BitmapHeight =uint32 (_dfa &_d .MaxUint32 );_dfa ,_dfgb =_cfac ._ecfa .ReadBits (32);if _dfgb !=nil {return _bg .Wrap (_dfgb ,_fegf ,"\u0078\u0020\u006c\u006f\u0063\u0061\u0074\u0069\u006f\u006e");};_cfac .XLocation =uint32 (_dfa &_d .MaxUint32 );
_dfa ,_dfgb =_cfac ._ecfa .ReadBits (32);if _dfgb !=nil {return _bg .Wrap (_dfgb ,_fegf ,"\u0079\u0020\u006c\u006f\u0063\u0061\u0074\u0069\u006f\u006e");};_cfac .YLocation =uint32 (_dfa &_d .MaxUint32 );if _ ,_dfgb =_cfac ._ecfa .ReadBits (5);_dfgb !=nil {return _bg .Wrap (_dfgb ,_fegf ,"\u0064i\u0072\u0079\u0020\u0072\u0065\u0061d");
};if _dfgb =_cfac .readCombinationOperator ();_dfgb !=nil {return _bg .Wrap (_dfgb ,_fegf ,"c\u006fm\u0062\u0069\u006e\u0061\u0074\u0069\u006f\u006e \u006f\u0070\u0065\u0072at\u006f\u0072");};return nil ;};func (_gdcfb *Header )parse (_ebfa Documenter ,_beeb *_be .Reader ,_bbge int64 ,_bbaa OrganizationType )(_defb error ){const _faa ="\u0070\u0061\u0072s\u0065";
_ecc .Log .Trace ("\u005b\u0053\u0045\u0047\u004d\u0045\u004e\u0054\u002d\u0048E\u0041\u0044\u0045\u0052\u005d\u005b\u0050A\u0052\u0053\u0045\u005d\u0020\u0042\u0065\u0067\u0069\u006e\u0073");defer func (){if _defb !=nil {_ecc .Log .Trace ("\u005b\u0053\u0045GM\u0045\u004e\u0054\u002d\u0048\u0045\u0041\u0044\u0045R\u005d[\u0050A\u0052S\u0045\u005d\u0020\u0046\u0061\u0069\u006c\u0065\u0064\u002e\u0020\u0025\u0076",_defb );
}else {_ecc .Log .Trace ("\u005b\u0053\u0045\u0047\u004d\u0045\u004e\u0054\u002d\u0048\u0045\u0041\u0044\u0045\u0052]\u005bP\u0041\u0052\u0053\u0045\u005d\u0020\u0046\u0069\u006e\u0069\u0073\u0068\u0065\u0064");};}();_ ,_defb =_beeb .Seek (_bbge ,_a .SeekStart );
if _defb !=nil {return _bg .Wrap (_defb ,_faa ,"\u0073\u0065\u0065\u006b\u0020\u0073\u0074\u0061\u0072\u0074");};if _defb =_gdcfb .readSegmentNumber (_beeb );_defb !=nil {return _bg .Wrap (_defb ,_faa ,"");};if _defb =_gdcfb .readHeaderFlags ();_defb !=nil {return _bg .Wrap (_defb ,_faa ,"");
};var _fcbce uint64 ;_fcbce ,_defb =_gdcfb .readNumberOfReferredToSegments (_beeb );if _defb !=nil {return _bg .Wrap (_defb ,_faa ,"");};_gdcfb .RTSNumbers ,_defb =_gdcfb .readReferredToSegmentNumbers (_beeb ,int (_fcbce ));if _defb !=nil {return _bg .Wrap (_defb ,_faa ,"");
};_defb =_gdcfb .readSegmentPageAssociation (_ebfa ,_beeb ,_fcbce ,_gdcfb .RTSNumbers ...);if _defb !=nil {return _bg .Wrap (_defb ,_faa ,"");};if _gdcfb .Type !=TEndOfFile {if _defb =_gdcfb .readSegmentDataLength (_beeb );_defb !=nil {return _bg .Wrap (_defb ,_faa ,"");
};};_gdcfb .readDataStartOffset (_beeb ,_bbaa );_gdcfb .readHeaderLength (_beeb ,_bbge );_ecc .Log .Trace ("\u0025\u0073",_gdcfb );return nil ;};func (_gfcc *SymbolDictionary )GetDictionary ()([]*_eag .Bitmap ,error ){_ecc .Log .Trace ("\u005b\u0053\u0059\u004d\u0042\u004f\u004c-\u0044\u0049\u0043T\u0049\u004f\u004e\u0041R\u0059\u005d\u0020\u0047\u0065\u0074\u0044\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u0020\u0062\u0065\u0067\u0069\u006e\u0073\u002e\u002e\u002e");
defer func (){_ecc .Log .Trace ("\u005b\u0053\u0059M\u0042\u004f\u004c\u002d\u0044\u0049\u0043\u0054\u0049\u004f\u004e\u0041\u0052\u0059\u005d\u0020\u0047\u0065\u0074\u0044\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079 \u0066\u0069\u006e\u0069\u0073\u0068\u0065\u0064");
_ecc .Log .Trace ("\u005b\u0053Y\u004d\u0042\u004f\u004c\u002dD\u0049\u0043\u0054\u0049\u004fN\u0041\u0052\u0059\u005d\u0020\u0044\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u002e\u0020\u000a\u0045\u0078\u003a\u0020\u0027\u0025\u0073\u0027\u002c\u0020\u000a\u006e\u0065\u0077\u003a\u0027\u0025\u0073\u0027",_gfcc ._abef ,_gfcc ._fagf );
}();if _gfcc ._abef ==nil {var _fcgee error ;if _gfcc .UseRefinementAggregation {_gfcc ._fdfb =_gfcc .getSbSymCodeLen ();};if !_gfcc .IsHuffmanEncoded {if _fcgee =_gfcc .setCodingStatistics ();_fcgee !=nil {return nil ,_fcgee ;};};_gfcc ._fagf =make ([]*_eag .Bitmap ,_gfcc .NumberOfNewSymbols );
var _gadc []int ;if _gfcc .IsHuffmanEncoded &&!_gfcc .UseRefinementAggregation {_gadc =make ([]int ,_gfcc .NumberOfNewSymbols );};if _fcgee =_gfcc .setSymbolsArray ();_fcgee !=nil {return nil ,_fcgee ;};var _egee ,_baee int64 ;_gfcc ._abde =0;for _gfcc ._abde < _gfcc .NumberOfNewSymbols {_baee ,_fcgee =_gfcc .decodeHeightClassDeltaHeight ();
if _fcgee !=nil {return nil ,_fcgee ;};_egee +=_baee ;var _efee ,_ebcd uint32 ;_gabc :=int64 (_gfcc ._abde );for {var _agef int64 ;_agef ,_fcgee =_gfcc .decodeDifferenceWidth ();if _cd .Is (_fcgee ,_cfb .ErrOOB ){break ;};if _fcgee !=nil {return nil ,_fcgee ;
};if _gfcc ._abde >=_gfcc .NumberOfNewSymbols {break ;};_efee +=uint32 (_agef );_ebcd +=_efee ;if !_gfcc .IsHuffmanEncoded ||_gfcc .UseRefinementAggregation {if !_gfcc .UseRefinementAggregation {_fcgee =_gfcc .decodeDirectlyThroughGenericRegion (_efee ,uint32 (_egee ));
if _fcgee !=nil {return nil ,_fcgee ;};}else {_fcgee =_gfcc .decodeAggregate (_efee ,uint32 (_egee ));if _fcgee !=nil {return nil ,_fcgee ;};};}else if _gfcc .IsHuffmanEncoded &&!_gfcc .UseRefinementAggregation {_gadc [_gfcc ._abde ]=int (_efee );};_gfcc ._abde ++;
};if _gfcc .IsHuffmanEncoded &&!_gfcc .UseRefinementAggregation {var _gfbd int64 ;if _gfcc .SdHuffBMSizeSelection ==0{var _dbdc _bb .Tabler ;_dbdc ,_fcgee =_bb .GetStandardTable (1);if _fcgee !=nil {return nil ,_fcgee ;};_gfbd ,_fcgee =_dbdc .Decode (_gfcc ._cecgc );
if _fcgee !=nil {return nil ,_fcgee ;};}else {_gfbd ,_fcgee =_gfcc .huffDecodeBmSize ();if _fcgee !=nil {return nil ,_fcgee ;};};_gfcc ._cecgc .Align ();var _ffce *_eag .Bitmap ;_ffce ,_fcgee =_gfcc .decodeHeightClassCollectiveBitmap (_gfbd ,uint32 (_egee ),_ebcd );
if _fcgee !=nil {return nil ,_fcgee ;};_fcgee =_gfcc .decodeHeightClassBitmap (_ffce ,_gabc ,int (_egee ),_gadc );if _fcgee !=nil {return nil ,_fcgee ;};};};_gffbg ,_fcgee :=_gfcc .getToExportFlags ();if _fcgee !=nil {return nil ,_fcgee ;};_gfcc .setExportedSymbols (_gffbg );
};return _gfcc ._abef ,nil ;};func (_ebdc *RegionSegment )readCombinationOperator ()error {_dcga ,_aeff :=_ebdc ._ecfa .ReadBits (3);if _aeff !=nil {return _aeff ;};_ebdc .CombinaionOperator =_eag .CombinationOperator (_dcga &0xF);return nil ;};func (_fbbde *SymbolDictionary )Encode (w _be .BinaryWriter )(_aea int ,_bggd error ){const _bcafb ="\u0053\u0079\u006dbo\u006c\u0044\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u002e\u0045\u006e\u0063\u006f\u0064\u0065";
if _fbbde ==nil {return 0,_bg .Error (_bcafb ,"\u0073\u0079m\u0062\u006f\u006c\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u0020\u006e\u006f\u0074\u0020\u0064\u0065\u0066in\u0065\u0064");};if _aea ,_bggd =_fbbde .encodeFlags (w );
_bggd !=nil {return _aea ,_bg .Wrap (_bggd ,_bcafb ,"");};_bgc ,_bggd :=_fbbde .encodeATFlags (w );if _bggd !=nil {return _aea ,_bg .Wrap (_bggd ,_bcafb ,"");};_aea +=_bgc ;if _bgc ,_bggd =_fbbde .encodeRefinementATFlags (w );_bggd !=nil {return _aea ,_bg .Wrap (_bggd ,_bcafb ,"");
};_aea +=_bgc ;if _bgc ,_bggd =_fbbde .encodeNumSyms (w );_bggd !=nil {return _aea ,_bg .Wrap (_bggd ,_bcafb ,"");};_aea +=_bgc ;if _bgc ,_bggd =_fbbde .encodeSymbols (w );_bggd !=nil {return _aea ,_bg .Wrap (_bggd ,_bcafb ,"");};_aea +=_bgc ;return _aea ,nil ;
};func (_gdcfg *RegionSegment )Size ()int {return 17};func (_dfgbg *SymbolDictionary )huffDecodeRefAggNInst ()(int64 ,error ){if !_dfgbg .SdHuffAggInstanceSelection {_gdgf ,_bbee :=_bb .GetStandardTable (1);if _bbee !=nil {return 0,_bbee ;};return _gdgf .Decode (_dfgbg ._cecgc );
};if _dfgbg ._edbb ==nil {var (_dacab int ;_egfe error ;);if _dfgbg .SdHuffDecodeHeightSelection ==3{_dacab ++;};if _dfgbg .SdHuffDecodeWidthSelection ==3{_dacab ++;};if _dfgbg .SdHuffBMSizeSelection ==3{_dacab ++;};_dfgbg ._edbb ,_egfe =_dfgbg .getUserTable (_dacab );
if _egfe !=nil {return 0,_egfe ;};};return _dfgbg ._edbb .Decode (_dfgbg ._cecgc );};func (_eebdd *SymbolDictionary )readRegionFlags ()error {var (_ageb uint64 ;_bdcfb int ;);_ ,_fbgd :=_eebdd ._cecgc .ReadBits (3);if _fbgd !=nil {return _fbgd ;};_bdcfb ,_fbgd =_eebdd ._cecgc .ReadBit ();
if _fbgd !=nil {return _fbgd ;};_eebdd .SdrTemplate =int8 (_bdcfb );_ageb ,_fbgd =_eebdd ._cecgc .ReadBits (2);if _fbgd !=nil {return _fbgd ;};_eebdd .SdTemplate =int8 (_ageb &0xf);_bdcfb ,_fbgd =_eebdd ._cecgc .ReadBit ();if _fbgd !=nil {return _fbgd ;
};if _bdcfb ==1{_eebdd ._ecgg =true ;};_bdcfb ,_fbgd =_eebdd ._cecgc .ReadBit ();if _fbgd !=nil {return _fbgd ;};if _bdcfb ==1{_eebdd ._feecg =true ;};_bdcfb ,_fbgd =_eebdd ._cecgc .ReadBit ();if _fbgd !=nil {return _fbgd ;};if _bdcfb ==1{_eebdd .SdHuffAggInstanceSelection =true ;
};_bdcfb ,_fbgd =_eebdd ._cecgc .ReadBit ();if _fbgd !=nil {return _fbgd ;};_eebdd .SdHuffBMSizeSelection =int8 (_bdcfb );_ageb ,_fbgd =_eebdd ._cecgc .ReadBits (2);if _fbgd !=nil {return _fbgd ;};_eebdd .SdHuffDecodeWidthSelection =int8 (_ageb &0xf);_ageb ,_fbgd =_eebdd ._cecgc .ReadBits (2);
if _fbgd !=nil {return _fbgd ;};_eebdd .SdHuffDecodeHeightSelection =int8 (_ageb &0xf);_bdcfb ,_fbgd =_eebdd ._cecgc .ReadBit ();if _fbgd !=nil {return _fbgd ;};if _bdcfb ==1{_eebdd .UseRefinementAggregation =true ;};_bdcfb ,_fbgd =_eebdd ._cecgc .ReadBit ();
if _fbgd !=nil {return _fbgd ;};if _bdcfb ==1{_eebdd .IsHuffmanEncoded =true ;};return nil ;};func (_bgff *HalftoneRegion )combineGrayscalePlanes (_fcc []*_eag .Bitmap ,_ebfb int )error {_bfgf :=0;for _fafa :=0;_fafa < _fcc [_ebfb ].Height ;_fafa ++{for _dgda :=0;
_dgda < _fcc [_ebfb ].Width ;_dgda +=8{_dacg ,_ccfdg :=_fcc [_ebfb +1].GetByte (_bfgf );if _ccfdg !=nil {return _ccfdg ;};_gbgc ,_ccfdg :=_fcc [_ebfb ].GetByte (_bfgf );if _ccfdg !=nil {return _ccfdg ;};_ccfdg =_fcc [_ebfb ].SetByte (_bfgf ,_eag .CombineBytes (_gbgc ,_dacg ,_eag .CmbOpXor ));
if _ccfdg !=nil {return _ccfdg ;};_bfgf ++;};};return nil ;};func (_ageff *SymbolDictionary )decodeHeightClassDeltaHeightWithHuffman ()(int64 ,error ){switch _ageff .SdHuffDecodeHeightSelection {case 0:_dcfbd ,_eagc :=_bb .GetStandardTable (4);if _eagc !=nil {return 0,_eagc ;
};return _dcfbd .Decode (_ageff ._cecgc );case 1:_fecb ,_ecec :=_bb .GetStandardTable (5);if _ecec !=nil {return 0,_ecec ;};return _fecb .Decode (_ageff ._cecgc );case 3:if _ageff ._bede ==nil {_efdf ,_cdeg :=_bb .GetStandardTable (0);if _cdeg !=nil {return 0,_cdeg ;
};_ageff ._bede =_efdf ;};return _ageff ._bede .Decode (_ageff ._cecgc );};return 0,nil ;};func (_cdcb *Header )writeFlags (_cdaf _be .BinaryWriter )(_beef error ){const _bcaf ="\u0048\u0065\u0061\u0064\u0065\u0072\u002e\u0077\u0072\u0069\u0074\u0065F\u006c\u0061\u0067\u0073";
_dafb :=byte (_cdcb .Type );if _beef =_cdaf .WriteByte (_dafb );_beef !=nil {return _bg .Wrap (_beef ,_bcaf ,"\u0077\u0072\u0069ti\u006e\u0067\u0020\u0073\u0065\u0067\u006d\u0065\u006et\u0020t\u0079p\u0065 \u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0066\u0061\u0069\u006c\u0065\u0064");
};if !_cdcb .RetainFlag &&!_cdcb .PageAssociationFieldSize {return nil ;};if _beef =_cdaf .SkipBits (-8);_beef !=nil {return _bg .Wrap (_beef ,_bcaf ,"\u0073\u006bi\u0070\u0070\u0069\u006e\u0067\u0020\u0062\u0061\u0063\u006b\u0020\u0074\u0068\u0065\u0020\u0062\u0069\u0074\u0073\u0020\u0066\u0061il\u0065\u0064");
};var _cfae int ;if _cdcb .RetainFlag {_cfae =1;};if _beef =_cdaf .WriteBit (_cfae );_beef !=nil {return _bg .Wrap (_beef ,_bcaf ,"\u0072\u0065\u0074\u0061in\u0020\u0072\u0065\u0074\u0061\u0069\u006e\u0020\u0066\u006c\u0061\u0067\u0073");};_cfae =0;if _cdcb .PageAssociationFieldSize {_cfae =1;
};if _beef =_cdaf .WriteBit (_cfae );_beef !=nil {return _bg .Wrap (_beef ,_bcaf ,"p\u0061\u0067\u0065\u0020as\u0073o\u0063\u0069\u0061\u0074\u0069o\u006e\u0020\u0066\u006c\u0061\u0067");};_cdaf .FinishByte ();return nil ;};func (_efa *GenericRegion )decodeTemplate1 (_aec ,_abad ,_eba int ,_bgdd ,_bdfba int )(_bfba error ){const _abacd ="\u0064e\u0063o\u0064\u0065\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0031";
var (_cbac ,_gec int ;_adbf ,_eed int ;_bcf byte ;_eaga ,_afa int ;);if _aec >=1{_bcf ,_bfba =_efa .Bitmap .GetByte (_bdfba );if _bfba !=nil {return _bg .Wrap (_bfba ,_abacd ,"\u006ci\u006e\u0065\u0020\u003e\u003d\u00201");};_adbf =int (_bcf );};if _aec >=2{_bcf ,_bfba =_efa .Bitmap .GetByte (_bdfba -_efa .Bitmap .RowStride );
if _bfba !=nil {return _bg .Wrap (_bfba ,_abacd ,"\u006ci\u006e\u0065\u0020\u003e\u003d\u00202");};_eed =int (_bcf )<<5;};_cbac =((_adbf >>1)&0x1f8)|((_eed >>1)&0x1e00);for _dbf :=0;_dbf < _eba ;_dbf =_eaga {var (_bfd byte ;_gagg int ;);_eaga =_dbf +8;
if _egde :=_abad -_dbf ;_egde > 8{_gagg =8;}else {_gagg =_egde ;};if _aec > 0{_adbf <<=8;if _eaga < _abad {_bcf ,_bfba =_efa .Bitmap .GetByte (_bdfba +1);if _bfba !=nil {return _bg .Wrap (_bfba ,_abacd ,"\u006c\u0069\u006e\u0065\u0020\u003e\u0020\u0030");
};_adbf |=int (_bcf );};};if _aec > 1{_eed <<=8;if _eaga < _abad {_bcf ,_bfba =_efa .Bitmap .GetByte (_bdfba -_efa .Bitmap .RowStride +1);if _bfba !=nil {return _bg .Wrap (_bfba ,_abacd ,"\u006c\u0069\u006e\u0065\u0020\u003e\u0020\u0031");};_eed |=int (_bcf )<<5;
};};for _fff :=0;_fff < _gagg ;_fff ++{if _efa ._ebfe {_gec =_efa .overrideAtTemplate1 (_cbac ,_dbf +_fff ,_aec ,int (_bfd ),_fff );_efa ._gcgd .SetIndex (int32 (_gec ));}else {_efa ._gcgd .SetIndex (int32 (_cbac ));};_afa ,_bfba =_efa ._dac .DecodeBit (_efa ._gcgd );
if _bfba !=nil {return _bg .Wrap (_bfba ,_abacd ,"");};_bfd |=byte (_afa )<<uint (7-_fff );_ecg :=uint (8-_fff );_cbac =((_cbac &0xefb)<<1)|_afa |((_adbf >>_ecg )&0x8)|((_eed >>_ecg )&0x200);};if _ffbg :=_efa .Bitmap .SetByte (_bgdd ,_bfd );_ffbg !=nil {return _bg .Wrap (_ffbg ,_abacd ,"");
};_bgdd ++;_bdfba ++;};return nil ;};func (_abg *GenericRefinementRegion )Init (header *Header ,r *_be .Reader )error {_abg ._ag =header ;_abg ._bba =r ;_abg .RegionInfo =NewRegionSegment (r );return _abg .parseHeader ();};func (_faggd *TextRegion )decodeIds ()(int64 ,error ){const _fafb ="\u0064e\u0063\u006f\u0064\u0065\u0049\u0064s";
if _faggd .IsHuffmanEncoded {if _faggd .SbHuffDS ==3{if _faggd ._bgaf ==nil {_abded :=0;if _faggd .SbHuffFS ==3{_abded ++;};var _cgbg error ;_faggd ._bgaf ,_cgbg =_faggd .getUserTable (_abded );if _cgbg !=nil {return 0,_bg .Wrap (_cgbg ,_fafb ,"");};};
return _faggd ._bgaf .Decode (_faggd ._ecga );};_cfgg ,_dbad :=_bb .GetStandardTable (8+int (_faggd .SbHuffDS ));if _dbad !=nil {return 0,_bg .Wrap (_dbad ,_fafb ,"");};return _cfgg .Decode (_faggd ._ecga );};_cgaf ,_bbaac :=_faggd ._bafa .DecodeInt (_faggd ._afdef );
if _bbaac !=nil {return 0,_bg .Wrap (_bbaac ,_fafb ,"\u0063\u0078\u0049\u0041\u0044\u0053");};return int64 (_cgaf ),nil ;};func (_abbg *Header )writeSegmentDataLength (_faeg _be .BinaryWriter )(_accb int ,_fcf error ){_gegae :=make ([]byte ,4);_b .BigEndian .PutUint32 (_gegae ,uint32 (_abbg .SegmentDataLength ));
if _accb ,_fcf =_faeg .Write (_gegae );_fcf !=nil {return 0,_bg .Wrap (_fcf ,"\u0048\u0065a\u0064\u0065\u0072\u002e\u0077\u0072\u0069\u0074\u0065\u0053\u0065\u0067\u006d\u0065\u006e\u0074\u0044\u0061\u0074\u0061\u004c\u0065ng\u0074\u0068","");};return _accb ,nil ;
};func (_fagb *TableSegment )HtPS ()int32 {return _fagb ._bfgb };func (_ceac *GenericRegion )decodeTemplate0b (_adc ,_ede ,_gffe int ,_ddba ,_gcc int )(_dcb error ){const _fca ="\u0064\u0065c\u006f\u0064\u0065T\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0030\u0062";
var (_gacb ,_eeg int ;_bdfc ,_dbdg int ;_dbce byte ;_fbd int ;);if _adc >=1{_dbce ,_dcb =_ceac .Bitmap .GetByte (_gcc );if _dcb !=nil {return _bg .Wrap (_dcb ,_fca ,"\u006ci\u006e\u0065\u0020\u003e\u003d\u00201");};_bdfc =int (_dbce );};if _adc >=2{_dbce ,_dcb =_ceac .Bitmap .GetByte (_gcc -_ceac .Bitmap .RowStride );
if _dcb !=nil {return _bg .Wrap (_dcb ,_fca ,"\u006ci\u006e\u0065\u0020\u003e\u003d\u00202");};_dbdg =int (_dbce )<<6;};_gacb =(_bdfc &0xf0)|(_dbdg &0x3800);for _bdfb :=0;_bdfb < _gffe ;_bdfb =_fbd {var (_bbefc byte ;_cfff int ;);_fbd =_bdfb +8;if _bggg :=_ede -_bdfb ;
_bggg > 8{_cfff =8;}else {_cfff =_bggg ;};if _adc > 0{_bdfc <<=8;if _fbd < _ede {_dbce ,_dcb =_ceac .Bitmap .GetByte (_gcc +1);if _dcb !=nil {return _bg .Wrap (_dcb ,_fca ,"\u006c\u0069\u006e\u0065\u0020\u003e\u0020\u0030");};_bdfc |=int (_dbce );};};if _adc > 1{_dbdg <<=8;
if _fbd < _ede {_dbce ,_dcb =_ceac .Bitmap .GetByte (_gcc -_ceac .Bitmap .RowStride +1);if _dcb !=nil {return _bg .Wrap (_dcb ,_fca ,"\u006c\u0069\u006e\u0065\u0020\u003e\u0020\u0031");};_dbdg |=int (_dbce )<<6;};};for _ddae :=0;_ddae < _cfff ;_ddae ++{_gdcf :=uint (7-_ddae );
if _ceac ._ebfe {_eeg =_ceac .overrideAtTemplate0b (_gacb ,_bdfb +_ddae ,_adc ,int (_bbefc ),_ddae ,int (_gdcf ));_ceac ._gcgd .SetIndex (int32 (_eeg ));}else {_ceac ._gcgd .SetIndex (int32 (_gacb ));};var _dacc int ;_dacc ,_dcb =_ceac ._dac .DecodeBit (_ceac ._gcgd );
if _dcb !=nil {return _bg .Wrap (_dcb ,_fca ,"");};_bbefc |=byte (_dacc <<_gdcf );_gacb =((_gacb &0x7bf7)<<1)|_dacc |((_bdfc >>_gdcf )&0x10)|((_dbdg >>_gdcf )&0x800);};if _edca :=_ceac .Bitmap .SetByte (_ddba ,_bbefc );_edca !=nil {return _bg .Wrap (_edca ,_fca ,"");
};_ddba ++;_gcc ++;};return nil ;};func (_cgbc *TextRegion )readRegionFlags ()error {var (_bedc int ;_cdfde uint64 ;_dfb error ;);_bedc ,_dfb =_cgbc ._ecga .ReadBit ();if _dfb !=nil {return _dfb ;};_cgbc .SbrTemplate =int8 (_bedc );_cdfde ,_dfb =_cgbc ._ecga .ReadBits (5);
if _dfb !=nil {return _dfb ;};_cgbc .SbDsOffset =int8 (_cdfde );if _cgbc .SbDsOffset > 0x0f{_cgbc .SbDsOffset -=0x20;};_bedc ,_dfb =_cgbc ._ecga .ReadBit ();if _dfb !=nil {return _dfb ;};_cgbc .DefaultPixel =int8 (_bedc );_cdfde ,_dfb =_cgbc ._ecga .ReadBits (2);
if _dfb !=nil {return _dfb ;};_cgbc .CombinationOperator =_eag .CombinationOperator (int (_cdfde )&0x3);_bedc ,_dfb =_cgbc ._ecga .ReadBit ();if _dfb !=nil {return _dfb ;};_cgbc .IsTransposed =int8 (_bedc );_cdfde ,_dfb =_cgbc ._ecga .ReadBits (2);if _dfb !=nil {return _dfb ;
};_cgbc .ReferenceCorner =int16 (_cdfde )&0x3;_cdfde ,_dfb =_cgbc ._ecga .ReadBits (2);if _dfb !=nil {return _dfb ;};_cgbc .LogSBStrips =int16 (_cdfde )&0x3;_cgbc .SbStrips =1<<uint (_cgbc .LogSBStrips );_bedc ,_dfb =_cgbc ._ecga .ReadBit ();if _dfb !=nil {return _dfb ;
};if _bedc ==1{_cgbc .UseRefinement =true ;};_bedc ,_dfb =_cgbc ._ecga .ReadBit ();if _dfb !=nil {return _dfb ;};if _bedc ==1{_cgbc .IsHuffmanEncoded =true ;};return nil ;};func (_adcg *PatternDictionary )extractPatterns (_aadf *_eag .Bitmap )error {var _gabd int ;
_cad :=make ([]*_eag .Bitmap ,_adcg .GrayMax +1);for _gabd <=int (_adcg .GrayMax ){_daee :=int (_adcg .HdpWidth )*_gabd ;_cgb :=_ee .Rect (_daee ,0,_daee +int (_adcg .HdpWidth ),int (_adcg .HdpHeight ));_eebde ,_fgbbb :=_eag .Extract (_cgb ,_aadf );if _fgbbb !=nil {return _fgbbb ;
};_cad [_gabd ]=_eebde ;_gabd ++;};_adcg .Patterns =_cad ;return nil ;};func (_dgg *PatternDictionary )Init (h *Header ,r *_be .Reader )error {_dgg ._agcg =r ;return _dgg .parseHeader ();};func (_caeg *TextRegion )readAmountOfSymbolInstances ()error {_cebb ,_agbbc :=_caeg ._ecga .ReadBits (32);
if _agbbc !=nil {return _agbbc ;};_caeg .NumberOfSymbolInstances =uint32 (_cebb &_d .MaxUint32 );_gdbe :=_caeg .RegionInfo .BitmapWidth *_caeg .RegionInfo .BitmapHeight ;if _gdbe < _caeg .NumberOfSymbolInstances {_ecc .Log .Debug ("\u004c\u0069\u006d\u0069t\u0069\u006e\u0067\u0020t\u0068\u0065\u0020n\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020d\u0065\u0063\u006f\u0064e\u0064\u0020\u0073\u0079m\u0062\u006f\u006c\u0020\u0069n\u0073\u0074\u0061\u006e\u0063\u0065\u0073 \u0074\u006f\u0020\u006f\u006ee\u0020\u0070\u0065\u0072\u0020\u0070\u0069\u0078\u0065l\u0020\u0028\u0020\u0025\u0064\u0020\u0069\u006e\u0073\u0074\u0065\u0061\u0064\u0020\u006f\u0066\u0020\u0025\u0064\u0029",_gdbe ,_caeg .NumberOfSymbolInstances );
_caeg .NumberOfSymbolInstances =_gdbe ;};return nil ;};func (_faggc *TableSegment )Init (h *Header ,r *_be .Reader )error {_faggc ._daggf =r ;return _faggc .parseHeader ();};func (_bdf *GenericRefinementRegion )decodeTemplate (_dc ,_eebd ,_aef ,_babg ,_fgbd ,_dgf ,_ddf ,_bbag ,_ebf ,_acda int ,_dbb templater )(_fgf error ){var (_gb ,_deg ,_edc ,_bec ,_fgdg int16 ;
_fggb ,_bgb ,_bgbc ,_cfe int ;_ddff byte ;);if _ebf >=1&&(_ebf -1)< _bdf .ReferenceBitmap .Height {_ddff ,_fgf =_bdf .ReferenceBitmap .GetByte (_acda -_babg );if _fgf !=nil {return ;};_fggb =int (_ddff );};if _ebf >=0&&(_ebf )< _bdf .ReferenceBitmap .Height {_ddff ,_fgf =_bdf .ReferenceBitmap .GetByte (_acda );
if _fgf !=nil {return ;};_bgb =int (_ddff );};if _ebf >=-1&&(_ebf +1)< _bdf .ReferenceBitmap .Height {_ddff ,_fgf =_bdf .ReferenceBitmap .GetByte (_acda +_babg );if _fgf !=nil {return ;};_bgbc =int (_ddff );};_acda ++;if _dc >=1{_ddff ,_fgf =_bdf .RegionBitmap .GetByte (_bbag -_aef );
if _fgf !=nil {return ;};_cfe =int (_ddff );};_bbag ++;_cba :=_bdf .ReferenceDX %8;_ead :=6+_cba ;_aag :=_acda %_babg ;if _ead >=0{if _ead < 8{_gb =int16 (_fggb >>uint (_ead ))&0x07;};if _ead < 8{_deg =int16 (_bgb >>uint (_ead ))&0x07;};if _ead < 8{_edc =int16 (_bgbc >>uint (_ead ))&0x07;
};if _ead ==6&&_aag > 1{if _ebf >=1&&(_ebf -1)< _bdf .ReferenceBitmap .Height {_ddff ,_fgf =_bdf .ReferenceBitmap .GetByte (_acda -_babg -2);if _fgf !=nil {return _fgf ;};_gb |=int16 (_ddff <<2)&0x04;};if _ebf >=0&&_ebf < _bdf .ReferenceBitmap .Height {_ddff ,_fgf =_bdf .ReferenceBitmap .GetByte (_acda -2);
if _fgf !=nil {return _fgf ;};_deg |=int16 (_ddff <<2)&0x04;};if _ebf >=-1&&_ebf +1< _bdf .ReferenceBitmap .Height {_ddff ,_fgf =_bdf .ReferenceBitmap .GetByte (_acda +_babg -2);if _fgf !=nil {return _fgf ;};_edc |=int16 (_ddff <<2)&0x04;};};if _ead ==0{_fggb =0;
_bgb =0;_bgbc =0;if _aag < _babg -1{if _ebf >=1&&_ebf -1< _bdf .ReferenceBitmap .Height {_ddff ,_fgf =_bdf .ReferenceBitmap .GetByte (_acda -_babg );if _fgf !=nil {return _fgf ;};_fggb =int (_ddff );};if _ebf >=0&&_ebf < _bdf .ReferenceBitmap .Height {_ddff ,_fgf =_bdf .ReferenceBitmap .GetByte (_acda );
if _fgf !=nil {return _fgf ;};_bgb =int (_ddff );};if _ebf >=-1&&_ebf +1< _bdf .ReferenceBitmap .Height {_ddff ,_fgf =_bdf .ReferenceBitmap .GetByte (_acda +_babg );if _fgf !=nil {return _fgf ;};_bgbc =int (_ddff );};};_acda ++;};}else {_gb =int16 (_fggb <<1)&0x07;
_deg =int16 (_bgb <<1)&0x07;_edc =int16 (_bgbc <<1)&0x07;_fggb =0;_bgb =0;_bgbc =0;if _aag < _babg -1{if _ebf >=1&&_ebf -1< _bdf .ReferenceBitmap .Height {_ddff ,_fgf =_bdf .ReferenceBitmap .GetByte (_acda -_babg );if _fgf !=nil {return _fgf ;};_fggb =int (_ddff );
};if _ebf >=0&&_ebf < _bdf .ReferenceBitmap .Height {_ddff ,_fgf =_bdf .ReferenceBitmap .GetByte (_acda );if _fgf !=nil {return _fgf ;};_bgb =int (_ddff );};if _ebf >=-1&&_ebf +1< _bdf .ReferenceBitmap .Height {_ddff ,_fgf =_bdf .ReferenceBitmap .GetByte (_acda +_babg );
if _fgf !=nil {return _fgf ;};_bgbc =int (_ddff );};_acda ++;};_gb |=int16 ((_fggb >>7)&0x07);_deg |=int16 ((_bgb >>7)&0x07);_edc |=int16 ((_bgbc >>7)&0x07);};_bec =int16 (_cfe >>6);_fgdg =0;_ddd :=(2-_cba )%8;_fggb <<=uint (_ddd );_bgb <<=uint (_ddd );
_bgbc <<=uint (_ddd );_cfe <<=2;var _fc int ;for _befd :=0;_befd < _eebd ;_befd ++{_gbf :=_befd &0x07;_aee :=_dbb .form (_gb ,_deg ,_edc ,_bec ,_fgdg );if _bdf ._fd {_ddff ,_fgf =_bdf .RegionBitmap .GetByte (_bdf .RegionBitmap .GetByteIndex (_befd ,_dc ));
if _fgf !=nil {return _fgf ;};_bdf ._eeb .SetIndex (int32 (_bdf .overrideAtTemplate0 (int (_aee ),_befd ,_dc ,int (_ddff ),_gbf )));}else {_bdf ._eeb .SetIndex (int32 (_aee ));};_fc ,_fgf =_bdf ._bda .DecodeBit (_bdf ._eeb );if _fgf !=nil {return _fgf ;
};if _fgf =_bdf .RegionBitmap .SetPixel (_befd ,_dc ,byte (_fc ));_fgf !=nil {return _fgf ;};_gb =((_gb <<1)|0x01&int16 (_fggb >>7))&0x07;_deg =((_deg <<1)|0x01&int16 (_bgb >>7))&0x07;_edc =((_edc <<1)|0x01&int16 (_bgbc >>7))&0x07;_bec =((_bec <<1)|0x01&int16 (_cfe >>7))&0x07;
_fgdg =int16 (_fc );if (_befd -int (_bdf .ReferenceDX ))%8==5{_fggb =0;_bgb =0;_bgbc =0;if ((_befd -int (_bdf .ReferenceDX ))/8)+1< _bdf .ReferenceBitmap .RowStride {if _ebf >=1&&(_ebf -1)< _bdf .ReferenceBitmap .Height {_ddff ,_fgf =_bdf .ReferenceBitmap .GetByte (_acda -_babg );
if _fgf !=nil {return _fgf ;};_fggb =int (_ddff );};if _ebf >=0&&_ebf < _bdf .ReferenceBitmap .Height {_ddff ,_fgf =_bdf .ReferenceBitmap .GetByte (_acda );if _fgf !=nil {return _fgf ;};_bgb =int (_ddff );};if _ebf >=-1&&(_ebf +1)< _bdf .ReferenceBitmap .Height {_ddff ,_fgf =_bdf .ReferenceBitmap .GetByte (_acda +_babg );
if _fgf !=nil {return _fgf ;};_bgbc =int (_ddff );};};_acda ++;}else {_fggb <<=1;_bgb <<=1;_bgbc <<=1;};if _gbf ==5&&_dc >=1{if ((_befd >>3)+1)>=_bdf .RegionBitmap .RowStride {_cfe =0;}else {_ddff ,_fgf =_bdf .RegionBitmap .GetByte (_bbag -_aef );if _fgf !=nil {return _fgf ;
};_cfe =int (_ddff );};_bbag ++;}else {_cfe <<=1;};};return nil ;};func (_gggf *PageInformationSegment )CombinationOperator ()_eag .CombinationOperator {return _gggf ._cbge ;};func (_cdfcd *TextRegion )decodeStripT ()(_fade int64 ,_gdbd error ){if _cdfcd .IsHuffmanEncoded {if _cdfcd .SbHuffDT ==3{if _cdfcd ._acae ==nil {var _gada int ;
if _cdfcd .SbHuffFS ==3{_gada ++;};if _cdfcd .SbHuffDS ==3{_gada ++;};_cdfcd ._acae ,_gdbd =_cdfcd .getUserTable (_gada );if _gdbd !=nil {return 0,_gdbd ;};};_fade ,_gdbd =_cdfcd ._acae .Decode (_cdfcd ._ecga );if _gdbd !=nil {return 0,_gdbd ;};}else {var _cbea _bb .Tabler ;
_cbea ,_gdbd =_bb .GetStandardTable (11+int (_cdfcd .SbHuffDT ));if _gdbd !=nil {return 0,_gdbd ;};_fade ,_gdbd =_cbea .Decode (_cdfcd ._ecga );if _gdbd !=nil {return 0,_gdbd ;};};}else {var _bfce int32 ;_bfce ,_gdbd =_cdfcd ._bafa .DecodeInt (_cdfcd ._aaga );
if _gdbd !=nil {return 0,_gdbd ;};_fade =int64 (_bfce );};_fade *=int64 (-_cdfcd .SbStrips );return _fade ,nil ;};func (_edce *HalftoneRegion )computeSegmentDataStructure ()error {_edce .DataOffset =_edce ._cae .AbsolutePosition ();_edce .DataHeaderLength =_edce .DataOffset -_edce .DataHeaderOffset ;
_edce .DataLength =int64 (_edce ._cae .AbsoluteLength ())-_edce .DataHeaderLength ;return nil ;};func (_cfgd *SymbolDictionary )setInSyms ()error {if _cfgd .Header .RTSegments !=nil {return _cfgd .retrieveImportSymbols ();};_cfgd ._fddb =make ([]*_eag .Bitmap ,0);
return nil ;};func (_dddb *GenericRegion )decodeLine (_ca ,_dff ,_gfc int )error {const _cecg ="\u0064\u0065\u0063\u006f\u0064\u0065\u004c\u0069\u006e\u0065";_fcg :=_dddb .Bitmap .GetByteIndex (0,_ca );_agf :=_fcg -_dddb .Bitmap .RowStride ;switch _dddb .GBTemplate {case 0:if !_dddb .UseExtTemplates {return _dddb .decodeTemplate0a (_ca ,_dff ,_gfc ,_fcg ,_agf );
};return _dddb .decodeTemplate0b (_ca ,_dff ,_gfc ,_fcg ,_agf );case 1:return _dddb .decodeTemplate1 (_ca ,_dff ,_gfc ,_fcg ,_agf );case 2:return _dddb .decodeTemplate2 (_ca ,_dff ,_gfc ,_fcg ,_agf );case 3:return _dddb .decodeTemplate3 (_ca ,_dff ,_gfc ,_fcg ,_agf );
};return _bg .Errorf (_cecg ,"\u0069\u006e\u0076a\u006c\u0069\u0064\u0020G\u0042\u0054\u0065\u006d\u0070\u006c\u0061t\u0065\u0020\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u003a\u0020\u0025\u0064",_dddb .GBTemplate );};func (_bdab *GenericRefinementRegion )decodeTypicalPredictedLine (_ce ,_acc ,_dge ,_bce ,_eab ,_bdd int )error {_ae :=_ce -int (_bdab .ReferenceDY );
_gge :=_bdab .ReferenceBitmap .GetByteIndex (0,_ae );_eebf :=_bdab .RegionBitmap .GetByteIndex (0,_ce );var _fe error ;switch _bdab .TemplateID {case 0:_fe =_bdab .decodeTypicalPredictedLineTemplate0 (_ce ,_acc ,_dge ,_bce ,_eab ,_bdd ,_eebf ,_ae ,_gge );
case 1:_fe =_bdab .decodeTypicalPredictedLineTemplate1 (_ce ,_acc ,_dge ,_bce ,_eab ,_bdd ,_eebf ,_ae ,_gge );};return _fe ;};func (_agfb *GenericRegion )decodeTemplate2 (_bfc ,_ebbd ,_adaf int ,_bddb ,_dgc int )(_aad error ){const _ebbf ="\u0064e\u0063o\u0064\u0065\u0054\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0032";
var (_gdf ,_cbff int ;_eecd ,_gccf int ;_edge byte ;_fbaa ,_aegd int ;);if _bfc >=1{_edge ,_aad =_agfb .Bitmap .GetByte (_dgc );if _aad !=nil {return _bg .Wrap (_aad ,_ebbf ,"\u006ci\u006ee\u004e\u0075\u006d\u0062\u0065\u0072\u0020\u003e\u003d\u0020\u0031");
};_eecd =int (_edge );};if _bfc >=2{_edge ,_aad =_agfb .Bitmap .GetByte (_dgc -_agfb .Bitmap .RowStride );if _aad !=nil {return _bg .Wrap (_aad ,_ebbf ,"\u006ci\u006ee\u004e\u0075\u006d\u0062\u0065\u0072\u0020\u003e\u003d\u0020\u0032");};_gccf =int (_edge )<<4;
};_gdf =(_eecd >>3&0x7c)|(_gccf >>3&0x380);for _dab :=0;_dab < _adaf ;_dab =_fbaa {var (_becc byte ;_ffca int ;);_fbaa =_dab +8;if _aeef :=_ebbd -_dab ;_aeef > 8{_ffca =8;}else {_ffca =_aeef ;};if _bfc > 0{_eecd <<=8;if _fbaa < _ebbd {_edge ,_aad =_agfb .Bitmap .GetByte (_dgc +1);
if _aad !=nil {return _bg .Wrap (_aad ,_ebbf ,"\u006c\u0069\u006e\u0065\u004e\u0075\u006d\u0062\u0065r\u0020\u003e\u0020\u0030");};_eecd |=int (_edge );};};if _bfc > 1{_gccf <<=8;if _fbaa < _ebbd {_edge ,_aad =_agfb .Bitmap .GetByte (_dgc -_agfb .Bitmap .RowStride +1);
if _aad !=nil {return _bg .Wrap (_aad ,_ebbf ,"\u006c\u0069\u006e\u0065\u004e\u0075\u006d\u0062\u0065r\u0020\u003e\u0020\u0031");};_gccf |=int (_edge )<<4;};};for _aegc :=0;_aegc < _ffca ;_aegc ++{_eaaa :=uint (10-_aegc );if _agfb ._ebfe {_cbff =_agfb .overrideAtTemplate2 (_gdf ,_dab +_aegc ,_bfc ,int (_becc ),_aegc );
_agfb ._gcgd .SetIndex (int32 (_cbff ));}else {_agfb ._gcgd .SetIndex (int32 (_gdf ));};_aegd ,_aad =_agfb ._dac .DecodeBit (_agfb ._gcgd );if _aad !=nil {return _bg .Wrap (_aad ,_ebbf ,"");};_becc |=byte (_aegd <<uint (7-_aegc ));_gdf =((_gdf &0x1bd)<<1)|_aegd |((_eecd >>_eaaa )&0x4)|((_gccf >>_eaaa )&0x80);
};if _bbec :=_agfb .Bitmap .SetByte (_bddb ,_becc );_bbec !=nil {return _bg .Wrap (_bbec ,_ebbf ,"");};_bddb ++;_dgc ++;};return nil ;};func (_cdc *Header )subInputReader ()(*_be .Reader ,error ){_bfbc :=int (_cdc .SegmentDataLength );if _cdc .SegmentDataLength ==_d .MaxInt32 {_bfbc =-1;
};return _cdc .Reader .NewPartialReader (int (_cdc .SegmentDataStartOffset ),_bfbc ,false );};func (_daa *SymbolDictionary )String ()string {_fdca :=&_db .Builder {};_fdca .WriteString ("\n\u005b\u0053\u0059\u004dBO\u004c-\u0044\u0049\u0043\u0054\u0049O\u004e\u0041\u0052\u0059\u005d\u000a");
_fdca .WriteString (_c .Sprintf ("\u0009-\u0020S\u0064\u0072\u0054\u0065\u006dp\u006c\u0061t\u0065\u0020\u0025\u0076\u000a",_daa .SdrTemplate ));_fdca .WriteString (_c .Sprintf ("\u0009\u002d\u0020\u0053\u0064\u0054\u0065\u006d\u0070\u006c\u0061\u0074e\u0020\u0025\u0076\u000a",_daa .SdTemplate ));
_fdca .WriteString (_c .Sprintf ("\u0009\u002d\u0020\u0069\u0073\u0043\u006f\u0064\u0069\u006eg\u0043\u006f\u006e\u0074\u0065\u0078\u0074R\u0065\u0074\u0061\u0069\u006e\u0065\u0064\u0020\u0025\u0076\u000a",_daa ._ecgg ));_fdca .WriteString (_c .Sprintf ("\u0009\u002d\u0020\u0069\u0073\u0043\u006f\u0064\u0069\u006e\u0067C\u006f\u006e\u0074\u0065\u0078\u0074\u0055\u0073\u0065\u0064 \u0025\u0076\u000a",_daa ._feecg ));
_fdca .WriteString (_c .Sprintf ("\u0009\u002d\u0020\u0053\u0064\u0048u\u0066\u0066\u0041\u0067\u0067\u0049\u006e\u0073\u0074\u0061\u006e\u0063\u0065S\u0065\u006c\u0065\u0063\u0074\u0069\u006fn\u0020\u0025\u0076\u000a",_daa .SdHuffAggInstanceSelection ));
_fdca .WriteString (_c .Sprintf ("\u0009\u002d\u0020\u0053d\u0048\u0075\u0066\u0066\u0042\u004d\u0053\u0069\u007a\u0065S\u0065l\u0065\u0063\u0074\u0069\u006f\u006e\u0020%\u0076\u000a",_daa .SdHuffBMSizeSelection ));_fdca .WriteString (_c .Sprintf ("\u0009\u002d\u0020\u0053\u0064\u0048u\u0066\u0066\u0044\u0065\u0063\u006f\u0064\u0065\u0057\u0069\u0064\u0074\u0068S\u0065\u006c\u0065\u0063\u0074\u0069\u006fn\u0020\u0025\u0076\u000a",_daa .SdHuffDecodeWidthSelection ));
_fdca .WriteString (_c .Sprintf ("\u0009\u002d\u0020Sd\u0048\u0075\u0066\u0066\u0044\u0065\u0063\u006f\u0064e\u0048e\u0069g\u0068t\u0053\u0065\u006c\u0065\u0063\u0074\u0069\u006f\u006e\u0020\u0025\u0076\u000a",_daa .SdHuffDecodeHeightSelection ));_fdca .WriteString (_c .Sprintf ("\u0009\u002d\u0020U\u0073\u0065\u0052\u0065f\u0069\u006e\u0065\u006d\u0065\u006e\u0074A\u0067\u0067\u0072\u0065\u0067\u0061\u0074\u0069\u006f\u006e\u0020\u0025\u0076\u000a",_daa .UseRefinementAggregation ));
_fdca .WriteString (_c .Sprintf ("\u0009\u002d\u0020is\u0048\u0075\u0066\u0066\u006d\u0061\u006e\u0045\u006e\u0063\u006f\u0064\u0065\u0064\u0020\u0025\u0076\u000a",_daa .IsHuffmanEncoded ));_fdca .WriteString (_c .Sprintf ("\u0009\u002d\u0020S\u0064\u0041\u0054\u0058\u0020\u0025\u0076\u000a",_daa .SdATX ));
_fdca .WriteString (_c .Sprintf ("\u0009\u002d\u0020S\u0064\u0041\u0054\u0059\u0020\u0025\u0076\u000a",_daa .SdATY ));_fdca .WriteString (_c .Sprintf ("\u0009\u002d\u0020\u0053\u0064\u0072\u0041\u0054\u0058\u0020\u0025\u0076\u000a",_daa .SdrATX ));_fdca .WriteString (_c .Sprintf ("\u0009\u002d\u0020\u0053\u0064\u0072\u0041\u0054\u0059\u0020\u0025\u0076\u000a",_daa .SdrATY ));
_fdca .WriteString (_c .Sprintf ("\u0009\u002d\u0020\u004e\u0075\u006d\u0062\u0065\u0072\u004ff\u0045\u0078\u0070\u006f\u0072\u0074\u0065d\u0053\u0079\u006d\u0062\u006f\u006c\u0073\u0020\u0025\u0076\u000a",_daa .NumberOfExportedSymbols ));_fdca .WriteString (_c .Sprintf ("\u0009-\u0020\u004e\u0075\u006db\u0065\u0072\u004f\u0066\u004ee\u0077S\u0079m\u0062\u006f\u006c\u0073\u0020\u0025\u0076\n",_daa .NumberOfNewSymbols ));
_fdca .WriteString (_c .Sprintf ("\u0009\u002d\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u004ff\u0049\u006d\u0070\u006f\u0072\u0074\u0065d\u0053\u0079\u006d\u0062\u006f\u006c\u0073\u0020\u0025\u0076\u000a",_daa ._ggdcg ));_fdca .WriteString (_c .Sprintf ("\u0009\u002d \u006e\u0075\u006d\u0062\u0065\u0072\u004f\u0066\u0044\u0065\u0063\u006f\u0064\u0065\u0064\u0053\u0079\u006d\u0062\u006f\u006c\u0073 %\u0076\u000a",_daa ._abde ));
return _fdca .String ();};func (_eecg *Header )String ()string {_eee :=&_db .Builder {};_eee .WriteString ("\u000a[\u0053E\u0047\u004d\u0045\u004e\u0054-\u0048\u0045A\u0044\u0045\u0052\u005d\u000a");_eee .WriteString (_c .Sprintf ("\t\u002d\u0020\u0053\u0065gm\u0065n\u0074\u004e\u0075\u006d\u0062e\u0072\u003a\u0020\u0025\u0076\u000a",_eecg .SegmentNumber ));
_eee .WriteString (_c .Sprintf ("\u0009\u002d\u0020T\u0079\u0070\u0065\u003a\u0020\u0025\u0076\u000a",_eecg .Type ));_eee .WriteString (_c .Sprintf ("\u0009-\u0020R\u0065\u0074\u0061\u0069\u006eF\u006c\u0061g\u003a\u0020\u0025\u0076\u000a",_eecg .RetainFlag ));
_eee .WriteString (_c .Sprintf ("\u0009\u002d\u0020Pa\u0067\u0065\u0041\u0073\u0073\u006f\u0063\u0069\u0061\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0076\u000a",_eecg .PageAssociation ));_eee .WriteString (_c .Sprintf ("\u0009\u002d\u0020\u0050\u0061\u0067\u0065\u0041\u0073\u0073\u006f\u0063\u0069\u0061\u0074i\u006fn\u0046\u0069\u0065\u006c\u0064\u0053\u0069\u007a\u0065\u003a\u0020\u0025\u0076\u000a",_eecg .PageAssociationFieldSize ));
_eee .WriteString ("\u0009-\u0020R\u0054\u0053\u0045\u0047\u004d\u0045\u004e\u0054\u0053\u003a\u000a");for _ ,_ggdcf :=range _eecg .RTSNumbers {_eee .WriteString (_c .Sprintf ("\u0009\t\u002d\u0020\u0025\u0064\u000a",_ggdcf ));};_eee .WriteString (_c .Sprintf ("\t\u002d \u0048\u0065\u0061\u0064\u0065\u0072\u004c\u0065n\u0067\u0074\u0068\u003a %\u0076\u000a",_eecg .HeaderLength ));
_eee .WriteString (_c .Sprintf ("\u0009-\u0020\u0053\u0065\u0067m\u0065\u006e\u0074\u0044\u0061t\u0061L\u0065n\u0067\u0074\u0068\u003a\u0020\u0025\u0076\n",_eecg .SegmentDataLength ));_eee .WriteString (_c .Sprintf ("\u0009\u002d\u0020\u0053\u0065\u0067\u006d\u0065\u006e\u0074D\u0061\u0074\u0061\u0053\u0074\u0061\u0072t\u004f\u0066\u0066\u0073\u0065\u0074\u003a\u0020\u0025\u0076\u000a",_eecg .SegmentDataStartOffset ));
return _eee .String ();};func (_ccef *TextRegion )symbolIDCodeLengths ()error {var (_agece []*_bb .Code ;_ecbg uint64 ;_fcdc _bb .Tabler ;_ccbg error ;);for _adbgb :=0;_adbgb < 35;_adbgb ++{_ecbg ,_ccbg =_ccef ._ecga .ReadBits (4);if _ccbg !=nil {return _ccbg ;
};_fcca :=int (_ecbg &0xf);if _fcca > 0{_agece =append (_agece ,_bb .NewCode (int32 (_fcca ),0,int32 (_adbgb ),false ));};};_fcdc ,_ccbg =_bb .NewFixedSizeTable (_agece );if _ccbg !=nil {return _ccbg ;};var (_ebcgg int64 ;_bgecg uint32 ;_dedb []*_bb .Code ;
_ddce int64 ;);for _bgecg < _ccef .NumberOfSymbols {_ddce ,_ccbg =_fcdc .Decode (_ccef ._ecga );if _ccbg !=nil {return _ccbg ;};if _ddce < 32{if _ddce > 0{_dedb =append (_dedb ,_bb .NewCode (int32 (_ddce ),0,int32 (_bgecg ),false ));};_ebcgg =_ddce ;_bgecg ++;
}else {var _gffae ,_dfaag int64 ;switch _ddce {case 32:_ecbg ,_ccbg =_ccef ._ecga .ReadBits (2);if _ccbg !=nil {return _ccbg ;};_gffae =3+int64 (_ecbg );if _bgecg > 0{_dfaag =_ebcgg ;};case 33:_ecbg ,_ccbg =_ccef ._ecga .ReadBits (3);if _ccbg !=nil {return _ccbg ;
};_gffae =3+int64 (_ecbg );case 34:_ecbg ,_ccbg =_ccef ._ecga .ReadBits (7);if _ccbg !=nil {return _ccbg ;};_gffae =11+int64 (_ecbg );};for _cbgda :=0;_cbgda < int (_gffae );_cbgda ++{if _dfaag > 0{_dedb =append (_dedb ,_bb .NewCode (int32 (_dfaag ),0,int32 (_bgecg ),false ));
};_bgecg ++;};};};_ccef ._ecga .Align ();_ccef ._cgace ,_ccbg =_bb .NewFixedSizeTable (_dedb );return _ccbg ;};type Header struct{SegmentNumber uint32 ;Type Type ;RetainFlag bool ;PageAssociation int ;PageAssociationFieldSize bool ;RTSegments []*Header ;
HeaderLength int64 ;SegmentDataLength uint64 ;SegmentDataStartOffset uint64 ;Reader *_be .Reader ;SegmentData Segmenter ;RTSNumbers []int ;RetainBits []uint8 ;};func (_gffb *HalftoneRegion )checkInput ()error {if _gffb .IsMMREncoded {if _gffb .HTemplate !=0{_ecc .Log .Debug ("\u0048\u0054\u0065\u006d\u0070l\u0061\u0074\u0065\u0020\u003d\u0020\u0025\u0064\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0074\u0068\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0030",_gffb .HTemplate );
};if _gffb .HSkipEnabled {_ecc .Log .Debug ("\u0048\u0053\u006b\u0069\u0070\u0045\u006e\u0061\u0062\u006c\u0065\u0064\u0020\u0030\u0020\u0025\u0076\u0020(\u0073\u0068\u006f\u0075\u006c\u0064\u0020c\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0074\u0068\u0065\u0020v\u0061\u006c\u0075\u0065\u0020\u0066\u0061\u006c\u0073\u0065\u0029",_gffb .HSkipEnabled );
};};return nil ;};func (_abdce *TextRegion )computeSymbolCodeLength ()error {if _abdce .IsHuffmanEncoded {return _abdce .symbolIDCodeLengths ();};_abdce ._ebcg =int8 (_d .Ceil (_d .Log (float64 (_abdce .NumberOfSymbols ))/_d .Log (2)));return nil ;};const (TSymbolDictionary Type =0;
TIntermediateTextRegion Type =4;TImmediateTextRegion Type =6;TImmediateLosslessTextRegion Type =7;TPatternDictionary Type =16;TIntermediateHalftoneRegion Type =20;TImmediateHalftoneRegion Type =22;TImmediateLosslessHalftoneRegion Type =23;TIntermediateGenericRegion Type =36;
TImmediateGenericRegion Type =38;TImmediateLosslessGenericRegion Type =39;TIntermediateGenericRefinementRegion Type =40;TImmediateGenericRefinementRegion Type =42;TImmediateLosslessGenericRefinementRegion Type =43;TPageInformation Type =48;TEndOfPage Type =49;
TEndOfStrip Type =50;TEndOfFile Type =51;TProfiles Type =52;TTables Type =53;TExtension Type =62;TBitmap Type =70;);func (_abac *template1 )setIndex (_adde *_g .DecoderStats ){_adde .SetIndex (0x080)};func (_feab *TextRegion )InitEncode (globalSymbolsMap ,localSymbolsMap map[int ]int ,comps []int ,inLL *_eag .Points ,symbols *_eag .Bitmaps ,classIDs *_ec .IntSlice ,boxes *_eag .Boxes ,width ,height ,symBits int ){_feab .RegionInfo =&RegionSegment {BitmapWidth :uint32 (width ),BitmapHeight :uint32 (height )};
_feab ._ebbdb =globalSymbolsMap ;_feab ._cddc =localSymbolsMap ;_feab ._bccb =comps ;_feab ._gda =inLL ;_feab ._fdcbc =symbols ;_feab ._edbgg =classIDs ;_feab ._abdbb =boxes ;_feab ._ebcb =symBits ;};func (_babb *PageInformationSegment )readMaxStripeSize ()error {_ddeb ,_ddgb :=_babb ._cbcb .ReadBits (15);
if _ddgb !=nil {return _ddgb ;};_babb .MaxStripeSize =uint16 (_ddeb &_d .MaxUint16 );return nil ;};func (_cbbg *SymbolDictionary )decodeAggregate (_cbdf ,_bgfcd uint32 )error {var (_bebg int64 ;_bcedd error ;);if _cbbg .IsHuffmanEncoded {_bebg ,_bcedd =_cbbg .huffDecodeRefAggNInst ();
if _bcedd !=nil {return _bcedd ;};}else {_cggda ,_cegg :=_cbbg ._bbgf .DecodeInt (_cbbg ._abdb );if _cegg !=nil {return _cegg ;};_bebg =int64 (_cggda );};if _bebg > 1{return _cbbg .decodeThroughTextRegion (_cbdf ,_bgfcd ,uint32 (_bebg ));}else if _bebg ==1{return _cbbg .decodeRefinedSymbol (_cbdf ,_bgfcd );
};return nil ;};func (_gbag *GenericRegion )setParametersMMR (_bfda bool ,_bbad ,_bggc int64 ,_cgac ,_cgaa uint32 ,_fbbe byte ,_bdb ,_cggg bool ,_fbded ,_efab []int8 ){_gbag .DataOffset =_bbad ;_gbag .DataLength =_bggc ;_gbag .RegionSegment =&RegionSegment {};
_gbag .RegionSegment .BitmapHeight =_cgac ;_gbag .RegionSegment .BitmapWidth =_cgaa ;_gbag .GBTemplate =_fbbe ;_gbag .IsMMREncoded =_bfda ;_gbag .IsTPGDon =_bdb ;_gbag .GBAtX =_fbded ;_gbag .GBAtY =_efab ;};func (_bfbad *SymbolDictionary )setCodingStatistics ()error {if _bfbad ._eeff ==nil {_bfbad ._eeff =_g .NewStats (512,1);
};if _bfbad ._fegg ==nil {_bfbad ._fegg =_g .NewStats (512,1);};if _bfbad ._cacb ==nil {_bfbad ._cacb =_g .NewStats (512,1);};if _bfbad ._abdb ==nil {_bfbad ._abdb =_g .NewStats (512,1);};if _bfbad ._caf ==nil {_bfbad ._caf =_g .NewStats (512,1);};if _bfbad .UseRefinementAggregation &&_bfbad ._gagf ==nil {_bfbad ._gagf =_g .NewStats (1<<uint (_bfbad ._fdfb ),1);
_bfbad ._ggba =_g .NewStats (512,1);_bfbad ._cbcab =_g .NewStats (512,1);};if _bfbad ._edeb ==nil {_bfbad ._edeb =_g .NewStats (65536,1);};if _bfbad ._bbgf ==nil {var _fdcbd error ;_bfbad ._bbgf ,_fdcbd =_g .New (_bfbad ._cecgc );if _fdcbd !=nil {return _fdcbd ;
};};return nil ;};func (_dadg *SymbolDictionary )decodeHeightClassCollectiveBitmap (_fefc int64 ,_ccfg ,_agfab uint32 )(*_eag .Bitmap ,error ){if _fefc ==0{_ffcaa :=_eag .New (int (_agfab ),int (_ccfg ));var (_dddbg byte ;_fbee error ;);for _afcd :=0;_afcd < len (_ffcaa .Data );
_afcd ++{_dddbg ,_fbee =_dadg ._cecgc .ReadByte ();if _fbee !=nil {return nil ,_fbee ;};if _fbee =_ffcaa .SetByte (_afcd ,_dddbg );_fbee !=nil {return nil ,_fbee ;};};return _ffcaa ,nil ;};if _dadg ._fcfe ==nil {_dadg ._fcfe =NewGenericRegion (_dadg ._cecgc );
};_dadg ._fcfe .setParameters (true ,_dadg ._cecgc .AbsolutePosition (),_fefc ,_ccfg ,_agfab );_ecggg ,_gabb :=_dadg ._fcfe .GetRegionBitmap ();if _gabb !=nil {return nil ,_gabb ;};return _ecggg ,nil ;};func (_fdg *GenericRefinementRegion )getPixel (_fgbc *_eag .Bitmap ,_cdd ,_bee int )int {if _cdd < 0||_cdd >=_fgbc .Width {return 0;
};if _bee < 0||_bee >=_fgbc .Height {return 0;};if _fgbc .GetPixel (_cdd ,_bee ){return 1;};return 0;};func (_dacf *TextRegion )decodeDfs ()(int64 ,error ){if _dacf .IsHuffmanEncoded {if _dacf .SbHuffFS ==3{if _dacf ._ebce ==nil {var _aafca error ;_dacf ._ebce ,_aafca =_dacf .getUserTable (0);
if _aafca !=nil {return 0,_aafca ;};};return _dacf ._ebce .Decode (_dacf ._ecga );};_ebe ,_ecee :=_bb .GetStandardTable (6+int (_dacf .SbHuffFS ));if _ecee !=nil {return 0,_ecee ;};return _ebe .Decode (_dacf ._ecga );};_agfcg ,_fgfeg :=_dacf ._bafa .DecodeInt (_dacf ._fdaf );
if _fgfeg !=nil {return 0,_fgfeg ;};return int64 (_agfcg ),nil ;};func (_cagcf *PatternDictionary )readPatternWidthAndHeight ()error {_bbeg ,_dcg :=_cagcf ._agcg .ReadByte ();if _dcg !=nil {return _dcg ;};_cagcf .HdpWidth =_bbeg ;_bbeg ,_dcg =_cagcf ._agcg .ReadByte ();
if _dcg !=nil {return _dcg ;};_cagcf .HdpHeight =_bbeg ;return nil ;};func (_fddc *TextRegion )createRegionBitmap ()error {_fddc .RegionBitmap =_eag .New (int (_fddc .RegionInfo .BitmapWidth ),int (_fddc .RegionInfo .BitmapHeight ));if _fddc .DefaultPixel !=0{_fddc .RegionBitmap .SetDefaultPixel ();
};return nil ;};func (_acea *HalftoneRegion )computeY (_efc ,_dagcf int )int {return _acea .shiftAndFill (int (_acea .HGridY )+_efc *int (_acea .HRegionX )-_dagcf *int (_acea .HRegionY ));};func (_bfdf *PageInformationSegment )readIsStriped ()error {_agca ,_bedf :=_bfdf ._cbcb .ReadBit ();
if _bedf !=nil {return _bedf ;};if _agca ==1{_bfdf .IsStripe =true ;};return nil ;};func (_dcfe *TableSegment )HtRS ()int32 {return _dcfe ._fbef };func (_faac *TextRegion )setCodingStatistics ()error {if _faac ._aaga ==nil {_faac ._aaga =_g .NewStats (512,1);
};if _faac ._fdaf ==nil {_faac ._fdaf =_g .NewStats (512,1);};if _faac ._afdef ==nil {_faac ._afdef =_g .NewStats (512,1);};if _faac ._bbbad ==nil {_faac ._bbbad =_g .NewStats (512,1);};if _faac ._cfcc ==nil {_faac ._cfcc =_g .NewStats (512,1);};if _faac ._bcbe ==nil {_faac ._bcbe =_g .NewStats (512,1);
};if _faac ._cccca ==nil {_faac ._cccca =_g .NewStats (512,1);};if _faac ._gegaed ==nil {_faac ._gegaed =_g .NewStats (1<<uint (_faac ._ebcg ),1);};if _faac ._dcfef ==nil {_faac ._dcfef =_g .NewStats (512,1);};if _faac ._cage ==nil {_faac ._cage =_g .NewStats (512,1);
};if _faac ._bafa ==nil {var _cdge error ;_faac ._bafa ,_cdge =_g .New (_faac ._ecga );if _cdge !=nil {return _cdge ;};};return nil ;};func (_ccec *PageInformationSegment )readCombinationOperatorOverrideAllowed ()error {_fagg ,_bdadc :=_ccec ._cbcb .ReadBit ();
if _bdadc !=nil {return _bdadc ;};if _fagg ==1{_ccec ._bad =true ;};return nil ;};func (_fcac *TextRegion )GetRegionBitmap ()(*_eag .Bitmap ,error ){if _fcac .RegionBitmap !=nil {return _fcac .RegionBitmap ,nil ;};if !_fcac .IsHuffmanEncoded {if _ddeba :=_fcac .setCodingStatistics ();
_ddeba !=nil {return nil ,_ddeba ;};};if _afcf :=_fcac .createRegionBitmap ();_afcf !=nil {return nil ,_afcf ;};if _cdfgd :=_fcac .decodeSymbolInstances ();_cdfgd !=nil {return nil ,_cdfgd ;};return _fcac .RegionBitmap ,nil ;};func (_ddde *TextRegion )decodeID ()(int64 ,error ){if _ddde .IsHuffmanEncoded {if _ddde ._cgace ==nil {_dfdc ,_fabd :=_ddde ._ecga .ReadBits (byte (_ddde ._ebcg ));
return int64 (_dfdc ),_fabd ;};return _ddde ._cgace .Decode (_ddde ._ecga );};return _ddde ._bafa .DecodeIAID (uint64 (_ddde ._ebcg ),_ddde ._gegaed );};func (_ggaf *TextRegion )decodeDT ()(_cgfb int64 ,_faec error ){if _ggaf .IsHuffmanEncoded {if _ggaf .SbHuffDT ==3{_cgfb ,_faec =_ggaf ._acae .Decode (_ggaf ._ecga );
if _faec !=nil {return 0,_faec ;};}else {var _fggcf _bb .Tabler ;_fggcf ,_faec =_bb .GetStandardTable (11+int (_ggaf .SbHuffDT ));if _faec !=nil {return 0,_faec ;};_cgfb ,_faec =_fggcf .Decode (_ggaf ._ecga );if _faec !=nil {return 0,_faec ;};};}else {var _dgcfa int32 ;
_dgcfa ,_faec =_ggaf ._bafa .DecodeInt (_ggaf ._aaga );if _faec !=nil {return ;};_cgfb =int64 (_dgcfa );};_cgfb *=int64 (_ggaf .SbStrips );return _cgfb ,nil ;};func (_bafe *SymbolDictionary )huffDecodeBmSize ()(int64 ,error ){if _bafe ._dcgb ==nil {var (_aggb int ;
_adcc error ;);if _bafe .SdHuffDecodeHeightSelection ==3{_aggb ++;};if _bafe .SdHuffDecodeWidthSelection ==3{_aggb ++;};_bafe ._dcgb ,_adcc =_bafe .getUserTable (_aggb );if _adcc !=nil {return 0,_adcc ;};};return _bafe ._dcgb .Decode (_bafe ._cecgc );};
func (_afad *PageInformationSegment )readResolution ()error {_egdeg ,_fbe :=_afad ._cbcb .ReadBits (32);if _fbe !=nil {return _fbe ;};_afad .ResolutionX =int (_egdeg &_d .MaxInt32 );_egdeg ,_fbe =_afad ._cbcb .ReadBits (32);if _fbe !=nil {return _fbe ;
};_afad .ResolutionY =int (_egdeg &_d .MaxInt32 );return nil ;};func (_gfgdag *TextRegion )decodeCurrentT ()(int64 ,error ){if _gfgdag .SbStrips !=1{if _gfgdag .IsHuffmanEncoded {_addeb ,_ddgee :=_gfgdag ._ecga .ReadBits (byte (_gfgdag .LogSBStrips ));
return int64 (_addeb ),_ddgee ;};_cefb ,_ccfe :=_gfgdag ._bafa .DecodeInt (_gfgdag ._bbbad );if _ccfe !=nil {return 0,_ccfe ;};return int64 (_cefb ),nil ;};return 0,nil ;};func (_adfc *GenericRegion )decodeTemplate0a (_ffc ,_gfcg ,_ggb int ,_agb ,_aggf int )(_fba error ){const _egg ="\u0064\u0065c\u006f\u0064\u0065T\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0030\u0061";
var (_ffcf ,_dfcd int ;_fbag ,_fbb int ;_ggdc byte ;_fggf int ;);if _ffc >=1{_ggdc ,_fba =_adfc .Bitmap .GetByte (_aggf );if _fba !=nil {return _bg .Wrap (_fba ,_egg ,"\u006ci\u006e\u0065\u0020\u003e\u003d\u00201");};_fbag =int (_ggdc );};if _ffc >=2{_ggdc ,_fba =_adfc .Bitmap .GetByte (_aggf -_adfc .Bitmap .RowStride );
if _fba !=nil {return _bg .Wrap (_fba ,_egg ,"\u006ci\u006e\u0065\u0020\u003e\u003d\u00202");};_fbb =int (_ggdc )<<6;};_ffcf =(_fbag &0xf0)|(_fbb &0x3800);for _ffba :=0;_ffba < _ggb ;_ffba =_fggf {var (_eec byte ;_dcd int ;);_fggf =_ffba +8;if _fgbf :=_gfcg -_ffba ;
_fgbf > 8{_dcd =8;}else {_dcd =_fgbf ;};if _ffc > 0{_fbag <<=8;if _fggf < _gfcg {_ggdc ,_fba =_adfc .Bitmap .GetByte (_aggf +1);if _fba !=nil {return _bg .Wrap (_fba ,_egg ,"\u006c\u0069\u006e\u0065\u0020\u003e\u0020\u0030");};_fbag |=int (_ggdc );};};
if _ffc > 1{_gedc :=_aggf -_adfc .Bitmap .RowStride +1;_fbb <<=8;if _fggf < _gfcg {_ggdc ,_fba =_adfc .Bitmap .GetByte (_gedc );if _fba !=nil {return _bg .Wrap (_fba ,_egg ,"\u006c\u0069\u006e\u0065\u0020\u003e\u0020\u0031");};_fbb |=int (_ggdc )<<6;}else {_fbb |=0;
};};for _gff :=0;_gff < _dcd ;_gff ++{_fgag :=uint (7-_gff );if _adfc ._ebfe {_dfcd =_adfc .overrideAtTemplate0a (_ffcf ,_ffba +_gff ,_ffc ,int (_eec ),_gff ,int (_fgag ));_adfc ._gcgd .SetIndex (int32 (_dfcd ));}else {_adfc ._gcgd .SetIndex (int32 (_ffcf ));
};var _cgge int ;_cgge ,_fba =_adfc ._dac .DecodeBit (_adfc ._gcgd );if _fba !=nil {return _bg .Wrap (_fba ,_egg ,"");};_eec |=byte (_cgge )<<_fgag ;_ffcf =((_ffcf &0x7bf7)<<1)|_cgge |((_fbag >>_fgag )&0x10)|((_fbb >>_fgag )&0x800);};if _cgcg :=_adfc .Bitmap .SetByte (_agb ,_eec );
_cgcg !=nil {return _bg .Wrap (_cgcg ,_egg ,"");};_agb ++;_aggf ++;};return nil ;};func (_gffee *TextRegion )decodeRdw ()(int64 ,error ){const _edba ="\u0064e\u0063\u006f\u0064\u0065\u0052\u0064w";if _gffee .IsHuffmanEncoded {if _gffee .SbHuffRDWidth ==3{if _gffee ._fdcbg ==nil {var (_ccdg int ;
_cdag error ;);if _gffee .SbHuffFS ==3{_ccdg ++;};if _gffee .SbHuffDS ==3{_ccdg ++;};if _gffee .SbHuffDT ==3{_ccdg ++;};_gffee ._fdcbg ,_cdag =_gffee .getUserTable (_ccdg );if _cdag !=nil {return 0,_bg .Wrap (_cdag ,_edba ,"");};};return _gffee ._fdcbg .Decode (_gffee ._ecga );
};_aegfda ,_aage :=_bb .GetStandardTable (14+int (_gffee .SbHuffRDWidth ));if _aage !=nil {return 0,_bg .Wrap (_aage ,_edba ,"");};return _aegfda .Decode (_gffee ._ecga );};_fcace ,_abdf :=_gffee ._bafa .DecodeInt (_gffee ._bcbe );if _abdf !=nil {return 0,_bg .Wrap (_abdf ,_edba ,"");
};return int64 (_fcace ),nil ;};func (_egfa *PageInformationSegment )Encode (w _be .BinaryWriter )(_ecda int ,_agdf error ){const _begbc ="\u0050\u0061g\u0065\u0049\u006e\u0066\u006f\u0072\u006d\u0061\u0074\u0069\u006f\u006e\u0053\u0065\u0067\u006d\u0065\u006e\u0074\u002e\u0045\u006eco\u0064\u0065";
_cfd :=make ([]byte ,4);_b .BigEndian .PutUint32 (_cfd ,uint32 (_egfa .PageBMWidth ));_ecda ,_agdf =w .Write (_cfd );if _agdf !=nil {return _ecda ,_bg .Wrap (_agdf ,_begbc ,"\u0077\u0069\u0064t\u0068");};_b .BigEndian .PutUint32 (_cfd ,uint32 (_egfa .PageBMHeight ));
var _fdff int ;_fdff ,_agdf =w .Write (_cfd );if _agdf !=nil {return _fdff +_ecda ,_bg .Wrap (_agdf ,_begbc ,"\u0068\u0065\u0069\u0067\u0068\u0074");};_ecda +=_fdff ;_b .BigEndian .PutUint32 (_cfd ,uint32 (_egfa .ResolutionX ));_fdff ,_agdf =w .Write (_cfd );
if _agdf !=nil {return _fdff +_ecda ,_bg .Wrap (_agdf ,_begbc ,"\u0078\u0020\u0072e\u0073\u006f\u006c\u0075\u0074\u0069\u006f\u006e");};_ecda +=_fdff ;_b .BigEndian .PutUint32 (_cfd ,uint32 (_egfa .ResolutionY ));if _fdff ,_agdf =w .Write (_cfd );_agdf !=nil {return _fdff +_ecda ,_bg .Wrap (_agdf ,_begbc ,"\u0079\u0020\u0072e\u0073\u006f\u006c\u0075\u0074\u0069\u006f\u006e");
};_ecda +=_fdff ;if _agdf =_egfa .encodeFlags (w );_agdf !=nil {return _ecda ,_bg .Wrap (_agdf ,_begbc ,"");};_ecda ++;if _fdff ,_agdf =_egfa .encodeStripingInformation (w );_agdf !=nil {return _ecda ,_bg .Wrap (_agdf ,_begbc ,"");};_ecda +=_fdff ;return _ecda ,nil ;
};var _ templater =&template1 {};func _ecaf (_def *_be .Reader ,_fefe *Header )*GenericRefinementRegion {return &GenericRefinementRegion {_bba :_def ,RegionInfo :NewRegionSegment (_def ),_ag :_fefe ,_ecb :&template0 {},_cff :&template1 {}};};func (_dae *HalftoneRegion )computeX (_ddab ,_dcc int )int {return _dae .shiftAndFill (int (_dae .HGridX )+_ddab *int (_dae .HRegionY )+_dcc *int (_dae .HRegionX ));
};func (_daca *GenericRegion )overrideAtTemplate2 (_ggdb ,_ffcfd ,_aae ,_dgfb ,_cggb int )int {_ggdb &=0x3FB;if _daca .GBAtY [0]==0&&_daca .GBAtX [0]>=-int8 (_cggb ){_ggdb |=(_dgfb >>uint (7-(int8 (_cggb )+_daca .GBAtX [0]))&0x1)<<2;}else {_ggdb |=int (_daca .getPixel (_ffcfd +int (_daca .GBAtX [0]),_aae +int (_daca .GBAtY [0])))<<2;
};return _ggdb ;};func (_ceacf *Header )referenceSize ()uint {switch {case _ceacf .SegmentNumber <=255:return 1;case _ceacf .SegmentNumber <=65535:return 2;default:return 4;};};func (_cffb Type )String ()string {switch _cffb {case TSymbolDictionary :return "\u0053\u0079\u006d\u0062\u006f\u006c\u0020\u0044\u0069\u0063\u0074\u0069o\u006e\u0061\u0072\u0079";
case TIntermediateTextRegion :return "\u0049n\u0074\u0065\u0072\u006d\u0065\u0064\u0069\u0061\u0074\u0065\u0020T\u0065\u0078\u0074\u0020\u0052\u0065\u0067\u0069\u006f\u006e";case TImmediateTextRegion :return "I\u006d\u006d\u0065\u0064ia\u0074e\u0020\u0054\u0065\u0078\u0074 \u0052\u0065\u0067\u0069\u006f\u006e";
case TImmediateLosslessTextRegion :return "\u0049\u006d\u006d\u0065\u0064\u0069\u0061\u0074\u0065\u0020L\u006f\u0073\u0073\u006c\u0065\u0073\u0073 \u0054\u0065\u0078\u0074\u0020\u0052\u0065\u0067\u0069\u006f\u006e";case TPatternDictionary :return "\u0050a\u0074t\u0065\u0072\u006e\u0020\u0044i\u0063\u0074i\u006f\u006e\u0061\u0072\u0079";
case TIntermediateHalftoneRegion :return "\u0049\u006e\u0074\u0065r\u006d\u0065\u0064\u0069\u0061\u0074\u0065\u0020\u0048\u0061l\u0066t\u006f\u006e\u0065\u0020\u0052\u0065\u0067i\u006f\u006e";case TImmediateHalftoneRegion :return "\u0049m\u006d\u0065\u0064\u0069a\u0074\u0065\u0020\u0048\u0061l\u0066t\u006fn\u0065\u0020\u0052\u0065\u0067\u0069\u006fn";
case TImmediateLosslessHalftoneRegion :return "\u0049\u006d\u006ded\u0069\u0061\u0074\u0065\u0020\u004c\u006f\u0073\u0073l\u0065s\u0073 \u0048a\u006c\u0066\u0074\u006f\u006e\u0065\u0020\u0052\u0065\u0067\u0069\u006f\u006e";case TIntermediateGenericRegion :return "I\u006e\u0074\u0065\u0072\u006d\u0065d\u0069\u0061\u0074\u0065\u0020\u0047\u0065\u006e\u0065r\u0069\u0063\u0020R\u0065g\u0069\u006f\u006e";
case TImmediateGenericRegion :return "\u0049m\u006d\u0065\u0064\u0069\u0061\u0074\u0065\u0020\u0047\u0065\u006ee\u0072\u0069\u0063\u0020\u0052\u0065\u0067\u0069\u006f\u006e";case TImmediateLosslessGenericRegion :return "\u0049\u006d\u006d\u0065\u0064\u0069a\u0074\u0065\u0020\u004c\u006f\u0073\u0073\u006c\u0065\u0073\u0073\u0020\u0047e\u006e\u0065\u0072\u0069\u0063\u0020\u0052e\u0067\u0069\u006f\u006e";
case TIntermediateGenericRefinementRegion :return "\u0049\u006e\u0074\u0065\u0072\u006d\u0065\u0064\u0069\u0061\u0074\u0065\u0020\u0047\u0065\u006e\u0065\u0072\u0069\u0063\u0020\u0052\u0065\u0066i\u006e\u0065\u006d\u0065\u006et\u0020\u0052e\u0067\u0069\u006f\u006e";
case TImmediateGenericRefinementRegion :return "I\u006d\u006d\u0065\u0064\u0069\u0061t\u0065\u0020\u0047\u0065\u006e\u0065r\u0069\u0063\u0020\u0052\u0065\u0066\u0069n\u0065\u006d\u0065\u006e\u0074\u0020\u0052\u0065\u0067\u0069o\u006e";case TImmediateLosslessGenericRefinementRegion :return "\u0049m\u006d\u0065d\u0069\u0061\u0074\u0065 \u004c\u006f\u0073s\u006c\u0065\u0073\u0073\u0020\u0047\u0065\u006e\u0065ri\u0063\u0020\u0052e\u0066\u0069n\u0065\u006d\u0065\u006e\u0074\u0020R\u0065\u0067i\u006f\u006e";
case TPageInformation :return "\u0050\u0061g\u0065\u0020\u0049n\u0066\u006f\u0072\u006d\u0061\u0074\u0069\u006f\u006e";case TEndOfPage :return "E\u006e\u0064\u0020\u004f\u0066\u0020\u0050\u0061\u0067\u0065";case TEndOfStrip :return "\u0045\u006e\u0064 \u004f\u0066\u0020\u0053\u0074\u0072\u0069\u0070";
case TEndOfFile :return "E\u006e\u0064\u0020\u004f\u0066\u0020\u0046\u0069\u006c\u0065";case TProfiles :return "\u0050\u0072\u006f\u0066\u0069\u006c\u0065\u0073";case TTables :return "\u0054\u0061\u0062\u006c\u0065\u0073";case TExtension :return "\u0045x\u0074\u0065\u006e\u0073\u0069\u006fn";
case TBitmap :return "\u0042\u0069\u0074\u006d\u0061\u0070";};return "I\u006ev\u0061\u006c\u0069\u0064\u0020\u0053\u0065\u0067m\u0065\u006e\u0074\u0020Ki\u006e\u0064";};func (_bcegg *TextRegion )setContexts (_bded *_g .DecoderStats ,_cbdg *_g .DecoderStats ,_bcdc *_g .DecoderStats ,_dddg *_g .DecoderStats ,_befbe *_g .DecoderStats ,_bfffc *_g .DecoderStats ,_deeb *_g .DecoderStats ,_aff *_g .DecoderStats ,_gfff *_g .DecoderStats ,_gbeg *_g .DecoderStats ){_bcegg ._aaga =_cbdg ;
_bcegg ._fdaf =_bcdc ;_bcegg ._afdef =_dddg ;_bcegg ._bbbad =_befbe ;_bcegg ._bcbe =_deeb ;_bcegg ._cccca =_aff ;_bcegg ._gegaed =_bfffc ;_bcegg ._dcfef =_gfff ;_bcegg ._cage =_gbeg ;_bcegg ._fgadd =_bded ;};func (_ggec *GenericRegion )computeSegmentDataStructure ()error {_ggec .DataOffset =_ggec ._fb .AbsolutePosition ();
_ggec .DataHeaderLength =_ggec .DataOffset -_ggec .DataHeaderOffset ;_ggec .DataLength =int64 (_ggec ._fb .AbsoluteLength ())-_ggec .DataHeaderLength ;return nil ;};func (_degfe *SymbolDictionary )encodeRefinementATFlags (_efbag _be .BinaryWriter )(_ccfde int ,_fdad error ){const _dfae ="\u0065\u006e\u0063od\u0065\u0052\u0065\u0066\u0069\u006e\u0065\u006d\u0065\u006e\u0074\u0041\u0054\u0046\u006c\u0061\u0067\u0073";
if !_degfe .UseRefinementAggregation ||_degfe .SdrTemplate !=0{return 0,nil ;};for _eacc :=0;_eacc < 2;_eacc ++{if _fdad =_efbag .WriteByte (byte (_degfe .SdrATX [_eacc ]));_fdad !=nil {return _ccfde ,_bg .Wrapf (_fdad ,_dfae ,"\u0053\u0064\u0072\u0041\u0054\u0058\u005b\u0025\u0064\u005d",_eacc );
};_ccfde ++;if _fdad =_efbag .WriteByte (byte (_degfe .SdrATY [_eacc ]));_fdad !=nil {return _ccfde ,_bg .Wrapf (_fdad ,_dfae ,"\u0053\u0064\u0072\u0041\u0054\u0059\u005b\u0025\u0064\u005d",_eacc );};_ccfde ++;};return _ccfde ,nil ;};func (_aac *GenericRefinementRegion )updateOverride ()error {if _aac .GrAtX ==nil ||_aac .GrAtY ==nil {return _cf .New ("\u0041\u0054\u0020\u0070\u0069\u0078\u0065\u006c\u0073\u0020\u006e\u006ft\u0020\u0073\u0065\u0074");
};if len (_aac .GrAtX )!=len (_aac .GrAtY ){return _cf .New ("A\u0054\u0020\u0070\u0069xe\u006c \u0069\u006e\u0063\u006f\u006es\u0069\u0073\u0074\u0065\u006e\u0074");};_aac ._ge =make ([]bool ,len (_aac .GrAtX ));switch _aac .TemplateID {case 0:if _aac .GrAtX [0]!=-1&&_aac .GrAtY [0]!=-1{_aac ._ge [0]=true ;
_aac ._fd =true ;};if _aac .GrAtX [1]!=-1&&_aac .GrAtY [1]!=-1{_aac ._ge [1]=true ;_aac ._fd =true ;};case 1:_aac ._fd =false ;};return nil ;};func (_dbee *Header )writeReferredToSegments (_edgeb _be .BinaryWriter )(_dgcf int ,_cge error ){const _gef ="\u0077\u0072\u0069te\u0052\u0065\u0066\u0065\u0072\u0072\u0065\u0064\u0054\u006f\u0053\u0065\u0067\u006d\u0065\u006e\u0074\u0073";
var (_eeda uint16 ;_fcce uint32 ;);_eadd :=_dbee .referenceSize ();_eegc :=1;_efbd :=make ([]byte ,_eadd );for _ ,_dabe :=range _dbee .RTSNumbers {switch _eadd {case 4:_fcce =uint32 (_dabe );_b .BigEndian .PutUint32 (_efbd ,_fcce );_eegc ,_cge =_edgeb .Write (_efbd );
if _cge !=nil {return 0,_bg .Wrap (_cge ,_gef ,"u\u0069\u006e\u0074\u0033\u0032\u0020\u0073\u0069\u007a\u0065");};case 2:_eeda =uint16 (_dabe );_b .BigEndian .PutUint16 (_efbd ,_eeda );_eegc ,_cge =_edgeb .Write (_efbd );if _cge !=nil {return 0,_bg .Wrap (_cge ,_gef ,"\u0075\u0069\u006e\u0074\u0031\u0036");
};default:if _cge =_edgeb .WriteByte (byte (_dabe ));_cge !=nil {return 0,_bg .Wrap (_cge ,_gef ,"\u0075\u0069\u006et\u0038");};};_dgcf +=_eegc ;};return _dgcf ,nil ;};func (_cbee *SymbolDictionary )InitEncode (symbols *_eag .Bitmaps ,symbolList []int ,symbolMap map[int ]int ,unborderSymbols bool )error {const _daeg ="S\u0079\u006d\u0062\u006f\u006c\u0044i\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u002eI\u006e\u0069\u0074E\u006ec\u006f\u0064\u0065";
_cbee .SdATX =[]int8 {3,-3,2,-2};_cbee .SdATY =[]int8 {-1,-1,-2,-2};_cbee ._dbgf =symbols ;_cbee ._ffef =make ([]int ,len (symbolList ));copy (_cbee ._ffef ,symbolList );if len (_cbee ._ffef )!=_cbee ._dbgf .Size (){return _bg .Error (_daeg ,"s\u0079\u006d\u0062\u006f\u006c\u0073\u0020\u0061\u006e\u0064\u0020\u0073\u0079\u006d\u0062\u006f\u006c\u004ci\u0073\u0074\u0020\u006f\u0066\u0020\u0064\u0069\u0066\u0066er\u0065\u006e\u0074 \u0073i\u007a\u0065");
};_cbee .NumberOfNewSymbols =uint32 (symbols .Size ());_cbee .NumberOfExportedSymbols =uint32 (symbols .Size ());_cbee ._ffa =symbolMap ;_cbee ._adbc =unborderSymbols ;return nil ;};func (_edbee *TextRegion )Encode (w _be .BinaryWriter )(_ecdac int ,_gegf error ){const _bfe ="\u0054\u0065\u0078\u0074\u0052\u0065\u0067\u0069\u006f\u006e\u002e\u0045n\u0063\u006f\u0064\u0065";
if _ecdac ,_gegf =_edbee .RegionInfo .Encode (w );_gegf !=nil {return _ecdac ,_bg .Wrap (_gegf ,_bfe ,"");};var _babbd int ;if _babbd ,_gegf =_edbee .encodeFlags (w );_gegf !=nil {return _ecdac ,_bg .Wrap (_gegf ,_bfe ,"");};_ecdac +=_babbd ;if _babbd ,_gegf =_edbee .encodeSymbols (w );
_gegf !=nil {return _ecdac ,_bg .Wrap (_gegf ,_bfe ,"");};_ecdac +=_babbd ;return _ecdac ,nil ;};func (_bcec *SymbolDictionary )checkInput ()error {if _bcec .SdHuffDecodeHeightSelection ==2{_ecc .Log .Debug ("\u0053\u0079\u006d\u0062\u006fl\u0020\u0044\u0069\u0063\u0074i\u006fn\u0061\u0072\u0079\u0020\u0044\u0065\u0063\u006f\u0064\u0065\u0020\u0048\u0065\u0069\u0067\u0068\u0074\u0020\u0053e\u006c\u0065\u0063\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0064\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006e\u006f\u0074\u0020\u0070\u0065r\u006d\u0069\u0074\u0074\u0065\u0064",_bcec .SdHuffDecodeHeightSelection );
};if _bcec .SdHuffDecodeWidthSelection ==2{_ecc .Log .Debug ("\u0053\u0079\u006d\u0062\u006f\u006c\u0020\u0044\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079 \u0044\u0065\u0063\u006f\u0064\u0065\u0020\u0057\u0069\u0064t\u0068\u0020\u0053\u0065\u006c\u0065\u0063\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0064\u0020\u0076\u0061l\u0075\u0065\u0020\u006e\u006f\u0074 \u0070\u0065r\u006d\u0069t\u0074e\u0064",_bcec .SdHuffDecodeWidthSelection );
};if _bcec .IsHuffmanEncoded {if _bcec .SdTemplate !=0{_ecc .Log .Debug ("\u0053\u0044T\u0065\u006d\u0070\u006c\u0061\u0074\u0065\u0020\u003d\u0020\u0025\u0064\u0020\u0028\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062e \u0030\u0029",_bcec .SdTemplate );
};if !_bcec .UseRefinementAggregation {if !_bcec .UseRefinementAggregation {if _bcec ._ecgg {_ecc .Log .Debug ("\u0049\u0073\u0043\u006f\u0064\u0069\u006e\u0067C\u006f\u006e\u0074ex\u0074\u0052\u0065\u0074\u0061\u0069n\u0065\u0064\u0020\u003d\u0020\u0074\u0072\u0075\u0065\u0020\u0028\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u0066\u0061\u006cs\u0065\u0029");
_bcec ._ecgg =false ;};if _bcec ._feecg {_ecc .Log .Debug ("\u0069s\u0043\u006fd\u0069\u006e\u0067\u0043o\u006e\u0074\u0065x\u0074\u0055\u0073\u0065\u0064\u0020\u003d\u0020\u0074ru\u0065\u0020\u0028s\u0068\u006fu\u006c\u0064\u0020\u0062\u0065\u0020f\u0061\u006cs\u0065\u0029");
_bcec ._feecg =false ;};};};}else {if _bcec .SdHuffBMSizeSelection !=0{_ecc .Log .Debug ("\u0053\u0064\u0048\u0075\u0066\u0066B\u004d\u0053\u0069\u007a\u0065\u0053\u0065\u006c\u0065\u0063\u0074\u0069\u006fn\u0020\u0073\u0068\u006f\u0075\u006c\u0064 \u0062\u0065\u0020\u0030");
_bcec .SdHuffBMSizeSelection =0;};if _bcec .SdHuffDecodeWidthSelection !=0{_ecc .Log .Debug ("\u0053\u0064\u0048\u0075\u0066\u0066\u0044\u0065\u0063\u006f\u0064\u0065\u0057\u0069\u0064\u0074\u0068\u0053\u0065\u006c\u0065\u0063\u0074\u0069o\u006e\u0020\u0073\u0068\u006fu\u006c\u0064 \u0062\u0065\u0020\u0030");
_bcec .SdHuffDecodeWidthSelection =0;};if _bcec .SdHuffDecodeHeightSelection !=0{_ecc .Log .Debug ("\u0053\u0064\u0048\u0075\u0066\u0066\u0044\u0065\u0063\u006f\u0064\u0065\u0048e\u0069\u0067\u0068\u0074\u0053\u0065l\u0065\u0063\u0074\u0069\u006f\u006e\u0020\u0073\u0068\u006f\u0075\u006c\u0064 \u0062\u0065\u0020\u0030");
_bcec .SdHuffDecodeHeightSelection =0;};};if !_bcec .UseRefinementAggregation {if _bcec .SdrTemplate !=0{_ecc .Log .Debug ("\u0053\u0044\u0052\u0054\u0065\u006d\u0070\u006c\u0061\u0074e\u0020\u003d\u0020\u0025\u0064\u0020\u0028s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0030\u0029",_bcec .SdrTemplate );
_bcec .SdrTemplate =0;};};if !_bcec .IsHuffmanEncoded ||!_bcec .UseRefinementAggregation {if _bcec .SdHuffAggInstanceSelection {_ecc .Log .Debug ("\u0053d\u0048\u0075f\u0066\u0041\u0067g\u0049\u006e\u0073\u0074\u0061\u006e\u0063e\u0053\u0065\u006c\u0065\u0063\u0074i\u006f\u006e\u0020\u003d\u0020\u0025\u0064\u0020\u0028\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0030\u0029",_bcec .SdHuffAggInstanceSelection );
};};return nil ;};func (_ecgec *TextRegion )GetRegionInfo ()*RegionSegment {return _ecgec .RegionInfo };func (_abgd *TextRegion )decodeRdx ()(int64 ,error ){const _bcgf ="\u0064e\u0063\u006f\u0064\u0065\u0052\u0064x";if _abgd .IsHuffmanEncoded {if _abgd .SbHuffRDX ==3{if _abgd ._fbgc ==nil {var (_agcbe int ;
_cefg error ;);if _abgd .SbHuffFS ==3{_agcbe ++;};if _abgd .SbHuffDS ==3{_agcbe ++;};if _abgd .SbHuffDT ==3{_agcbe ++;};if _abgd .SbHuffRDWidth ==3{_agcbe ++;};if _abgd .SbHuffRDHeight ==3{_agcbe ++;};_abgd ._fbgc ,_cefg =_abgd .getUserTable (_agcbe );
if _cefg !=nil {return 0,_bg .Wrap (_cefg ,_bcgf ,"");};};return _abgd ._fbgc .Decode (_abgd ._ecga );};_faaa ,_adfb :=_bb .GetStandardTable (14+int (_abgd .SbHuffRDX ));if _adfb !=nil {return 0,_bg .Wrap (_adfb ,_bcgf ,"");};return _faaa .Decode (_abgd ._ecga );
};_fgae ,_cdfa :=_abgd ._bafa .DecodeInt (_abgd ._dcfef );if _cdfa !=nil {return 0,_bg .Wrap (_cdfa ,_bcgf ,"");};return int64 (_fgae ),nil ;};func (_cfge *Header )writeSegmentNumber (_cce _be .BinaryWriter )(_dad int ,_age error ){_bcac :=make ([]byte ,4);
_b .BigEndian .PutUint32 (_bcac ,_cfge .SegmentNumber );if _dad ,_age =_cce .Write (_bcac );_age !=nil {return 0,_bg .Wrap (_age ,"\u0048e\u0061\u0064\u0065\u0072.\u0077\u0072\u0069\u0074\u0065S\u0065g\u006de\u006e\u0074\u004e\u0075\u006d\u0062\u0065r","");
};return _dad ,nil ;};func (_accg *SymbolDictionary )readRefinementAtPixels (_cfcec int )error {_accg .SdrATX =make ([]int8 ,_cfcec );_accg .SdrATY =make ([]int8 ,_cfcec );var (_abab byte ;_cdfee error ;);for _cfdg :=0;_cfdg < _cfcec ;_cfdg ++{_abab ,_cdfee =_accg ._cecgc .ReadByte ();
if _cdfee !=nil {return _cdfee ;};_accg .SdrATX [_cfdg ]=int8 (_abab );_abab ,_cdfee =_accg ._cecgc .ReadByte ();if _cdfee !=nil {return _cdfee ;};_accg .SdrATY [_cfdg ]=int8 (_abab );};return nil ;};var _ SegmentEncoder =&GenericRegion {};func (_eggg *SymbolDictionary )setRetainedCodingContexts (_fcgg *SymbolDictionary ){_eggg ._bbgf =_fcgg ._bbgf ;
_eggg .IsHuffmanEncoded =_fcgg .IsHuffmanEncoded ;_eggg .UseRefinementAggregation =_fcgg .UseRefinementAggregation ;_eggg .SdTemplate =_fcgg .SdTemplate ;_eggg .SdrTemplate =_fcgg .SdrTemplate ;_eggg .SdATX =_fcgg .SdATX ;_eggg .SdATY =_fcgg .SdATY ;_eggg .SdrATX =_fcgg .SdrATX ;
_eggg .SdrATY =_fcgg .SdrATY ;_eggg ._edeb =_fcgg ._edeb ;};func (_ga *EndOfStripe )Init (h *Header ,r *_be .Reader )error {_ga ._cb =r ;return _ga .parseHeader ()};type template0 struct{};func (_agdd *TextRegion )decodeSymInRefSize ()(int64 ,error ){const _ccfdc ="\u0064e\u0063o\u0064\u0065\u0053\u0079\u006dI\u006e\u0052e\u0066\u0053\u0069\u007a\u0065";
if _agdd .SbHuffRSize ==0{_gagd ,_fgeb :=_bb .GetStandardTable (1);if _fgeb !=nil {return 0,_bg .Wrap (_fgeb ,_ccfdc ,"");};return _gagd .Decode (_agdd ._ecga );};if _agdd ._bdbe ==nil {var (_eagb int ;_cgdg error ;);if _agdd .SbHuffFS ==3{_eagb ++;};if _agdd .SbHuffDS ==3{_eagb ++;
};if _agdd .SbHuffDT ==3{_eagb ++;};if _agdd .SbHuffRDWidth ==3{_eagb ++;};if _agdd .SbHuffRDHeight ==3{_eagb ++;};if _agdd .SbHuffRDX ==3{_eagb ++;};if _agdd .SbHuffRDY ==3{_eagb ++;};_agdd ._bdbe ,_cgdg =_agdd .getUserTable (_eagb );if _cgdg !=nil {return 0,_bg .Wrap (_cgdg ,_ccfdc ,"");
};};_bbfg ,_bdcg :=_agdd ._bdbe .Decode (_agdd ._ecga );if _bdcg !=nil {return 0,_bg .Wrap (_bdcg ,_ccfdc ,"");};return _bbfg ,nil ;};func (_gfed *SymbolDictionary )getToExportFlags ()([]int ,error ){var (_cded int ;_edbe int32 ;_cbgd error ;_fbad =int32 (_gfed ._ggdcg +_gfed .NumberOfNewSymbols );
_efede =make ([]int ,_fbad ););for _aeeeb :=int32 (0);_aeeeb < _fbad ;_aeeeb +=_edbe {if _gfed .IsHuffmanEncoded {_adfa ,_fcaa :=_bb .GetStandardTable (1);if _fcaa !=nil {return nil ,_fcaa ;};_cgcd ,_fcaa :=_adfa .Decode (_gfed ._cecgc );if _fcaa !=nil {return nil ,_fcaa ;
};_edbe =int32 (_cgcd );}else {_edbe ,_cbgd =_gfed ._bbgf .DecodeInt (_gfed ._caf );if _cbgd !=nil {return nil ,_cbgd ;};};if _edbe !=0{if _aeeeb +_edbe > _fbad {return nil ,_bg .Error ("\u0053\u0079\u006d\u0062\u006f\u006cD\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079\u002e\u0067\u0065\u0074T\u006f\u0045\u0078\u0070\u006f\u0072\u0074F\u006c\u0061\u0067\u0073","\u006d\u0061\u006c\u0066\u006f\u0072m\u0065\u0064\u0020\u0069\u006e\u0070\u0075\u0074\u0020\u0064\u0061\u0074\u0061\u0020\u0070\u0072\u006f\u0076\u0069\u0064e\u0064\u002e\u0020\u0069\u006e\u0064\u0065\u0078\u0020\u006f\u0075\u0074\u0020\u006ff\u0020r\u0061\u006e\u0067\u0065");
};for _gfcd :=_aeeeb ;_gfcd < _aeeeb +_edbe ;_gfcd ++{_efede [_gfcd ]=_cded ;};};if _cded ==0{_cded =1;}else {_cded =0;};};return _efede ,nil ;};func (_efaa *PageInformationSegment )CombinationOperatorOverrideAllowed ()bool {return _efaa ._bad };func (_gbg *HalftoneRegion )GetRegionInfo ()*RegionSegment {return _gbg .RegionSegment };
func (_egf *HalftoneRegion )Init (hd *Header ,r *_be .Reader )error {_egf ._cae =r ;_egf ._abge =hd ;_egf .RegionSegment =NewRegionSegment (r );return _egf .parseHeader ();};func (_fgge *TextRegion )initSymbols ()error {const _bceg ="i\u006e\u0069\u0074\u0053\u0079\u006d\u0062\u006f\u006c\u0073";
for _ ,_cace :=range _fgge .Header .RTSegments {if _cace ==nil {return _bg .Error (_bceg ,"\u006e\u0069\u006c\u0020\u0073\u0065\u0067\u006de\u006e\u0074\u0020pr\u006f\u0076\u0069\u0064\u0065\u0064 \u0066\u006f\u0072\u0020\u0074\u0068\u0065\u0020\u0074\u0065\u0078\u0074\u0020\u0072\u0065g\u0069\u006f\u006e\u0020\u0053\u0079\u006d\u0062o\u006c\u0073");
};if _cace .Type ==0{_agcaf ,_caefd :=_cace .GetSegmentData ();if _caefd !=nil {return _bg .Wrap (_caefd ,_bceg ,"");};_fgea ,_fbfe :=_agcaf .(*SymbolDictionary );if !_fbfe {return _bg .Error (_bceg ,"\u0072e\u0066\u0065r\u0072\u0065\u0064 \u0054\u006f\u0020\u0053\u0065\u0067\u006de\u006e\u0074\u0020\u0069\u0073\u0020n\u006f\u0074\u0020\u0061\u0020\u0053\u0079\u006d\u0062\u006f\u006cD\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079");
};_fgea ._gagf =_fgge ._gegaed ;_afgb ,_caefd :=_fgea .GetDictionary ();if _caefd !=nil {return _bg .Wrap (_caefd ,_bceg ,"");};_fgge .Symbols =append (_fgge .Symbols ,_afgb ...);};};_fgge .NumberOfSymbols =uint32 (len (_fgge .Symbols ));return nil ;};
func (_ffg *GenericRegion )Encode (w _be .BinaryWriter )(_cec int ,_cga error ){const _geec ="G\u0065n\u0065\u0072\u0069\u0063\u0052\u0065\u0067\u0069o\u006e\u002e\u0045\u006eco\u0064\u0065";if _ffg .Bitmap ==nil {return 0,_bg .Error (_geec ,"\u0070\u0072\u006f\u0076id\u0065\u0064\u0020\u006e\u0069\u006c\u0020\u0062\u0069\u0074\u006d\u0061\u0070");
};_gegg ,_cga :=_ffg .RegionSegment .Encode (w );if _cga !=nil {return 0,_bg .Wrap (_cga ,_geec ,"\u0052\u0065\u0067\u0069\u006f\u006e\u0053\u0065\u0067\u006d\u0065\u006e\u0074");};_cec +=_gegg ;if _cga =w .SkipBits (4);_cga !=nil {return _cec ,_bg .Wrap (_cga ,_geec ,"\u0073k\u0069p\u0020\u0072\u0065\u0073\u0065r\u0076\u0065d\u0020\u0062\u0069\u0074\u0073");
};var _ege int ;if _ffg .IsTPGDon {_ege =1;};if _cga =w .WriteBit (_ege );_cga !=nil {return _cec ,_bg .Wrap (_cga ,_geec ,"\u0074\u0070\u0067\u0064\u006f\u006e");};_ege =0;if _cga =w .WriteBit (int (_ffg .GBTemplate >>1)&0x01);_cga !=nil {return _cec ,_bg .Wrap (_cga ,_geec ,"f\u0069r\u0073\u0074\u0020\u0067\u0062\u0074\u0065\u006dp\u006c\u0061\u0074\u0065 b\u0069\u0074");
};if _cga =w .WriteBit (int (_ffg .GBTemplate )&0x01);_cga !=nil {return _cec ,_bg .Wrap (_cga ,_geec ,"s\u0065\u0063\u006f\u006ed \u0067b\u0074\u0065\u006d\u0070\u006ca\u0074\u0065\u0020\u0062\u0069\u0074");};if _ffg .UseMMR {_ege =1;};if _cga =w .WriteBit (_ege );
_cga !=nil {return _cec ,_bg .Wrap (_cga ,_geec ,"u\u0073\u0065\u0020\u004d\u004d\u0052\u0020\u0062\u0069\u0074");};_cec ++;if _gegg ,_cga =_ffg .writeGBAtPixels (w );_cga !=nil {return _cec ,_bg .Wrap (_cga ,_geec ,"");};_cec +=_gegg ;_ddb :=_bd .New ();
if _cga =_ddb .EncodeBitmap (_ffg .Bitmap ,_ffg .IsTPGDon );_cga !=nil {return _cec ,_bg .Wrap (_cga ,_geec ,"");};_ddb .Final ();var _cfce int64 ;if _cfce ,_cga =_ddb .WriteTo (w );_cga !=nil {return _cec ,_bg .Wrap (_cga ,_geec ,"");};_cec +=int (_cfce );
return _cec ,nil ;};var _ _bb .BasicTabler =&TableSegment {};func NewGenericRegion (r *_be .Reader )*GenericRegion {return &GenericRegion {RegionSegment :NewRegionSegment (r ),_fb :r };};func (_acbe *TextRegion )decodeIb (_afe ,_cddb int64 )(*_eag .Bitmap ,error ){const _fgggg ="\u0064\u0065\u0063\u006f\u0064\u0065\u0049\u0062";
var (_fgce error ;_fdgd *_eag .Bitmap ;);if _afe ==0{if int (_cddb )> len (_acbe .Symbols )-1{return nil ,_bg .Error (_fgggg ,"\u0064\u0065\u0063\u006f\u0064\u0069\u006e\u0067\u0020\u0049\u0042\u0020\u0062\u0069\u0074\u006d\u0061\u0070\u002e\u0020\u0069\u006e\u0064\u0065x\u0020\u006f\u0075\u0074\u0020o\u0066\u0020r\u0061\u006e\u0067\u0065");
};return _acbe .Symbols [int (_cddb )],nil ;};var _ceef ,_gfeg ,_gbgb ,_bdfcf int64 ;_ceef ,_fgce =_acbe .decodeRdw ();if _fgce !=nil {return nil ,_bg .Wrap (_fgce ,_fgggg ,"");};_gfeg ,_fgce =_acbe .decodeRdh ();if _fgce !=nil {return nil ,_bg .Wrap (_fgce ,_fgggg ,"");
};_gbgb ,_fgce =_acbe .decodeRdx ();if _fgce !=nil {return nil ,_bg .Wrap (_fgce ,_fgggg ,"");};_bdfcf ,_fgce =_acbe .decodeRdy ();if _fgce !=nil {return nil ,_bg .Wrap (_fgce ,_fgggg ,"");};if _acbe .IsHuffmanEncoded {if _ ,_fgce =_acbe .decodeSymInRefSize ();
_fgce !=nil {return nil ,_bg .Wrap (_fgce ,_fgggg ,"");};_acbe ._ecga .Align ();};_daccc :=_acbe .Symbols [_cddb ];_efae :=uint32 (_daccc .Width );_bcfg :=uint32 (_daccc .Height );_cgadc :=int32 (uint32 (_ceef )>>1)+int32 (_gbgb );_fcae :=int32 (uint32 (_gfeg )>>1)+int32 (_bdfcf );
if _acbe ._cab ==nil {_acbe ._cab =_ecaf (_acbe ._ecga ,nil );};_acbe ._cab .setParameters (_acbe ._fgadd ,_acbe ._bafa ,_acbe .SbrTemplate ,_efae +uint32 (_ceef ),_bcfg +uint32 (_gfeg ),_daccc ,_cgadc ,_fcae ,false ,_acbe .SbrATX ,_acbe .SbrATY );_fdgd ,_fgce =_acbe ._cab .GetRegionBitmap ();
if _fgce !=nil {return nil ,_bg .Wrap (_fgce ,_fgggg ,"\u0067\u0072\u0066");};if _acbe .IsHuffmanEncoded {_acbe ._ecga .Align ();};return _fdgd ,nil ;};func (_dged *Header )readSegmentPageAssociation (_caaf Documenter ,_ffbcg *_be .Reader ,_fgab uint64 ,_gfcf ...int )(_ecag error ){const _cag ="\u0072\u0065\u0061\u0064\u0053\u0065\u0067\u006d\u0065\u006e\u0074P\u0061\u0067\u0065\u0041\u0073\u0073\u006f\u0063\u0069\u0061t\u0069\u006f\u006e";
if !_dged .PageAssociationFieldSize {_gca ,_dga :=_ffbcg .ReadBits (8);if _dga !=nil {return _bg .Wrap (_dga ,_cag ,"\u0073\u0068\u006fr\u0074\u0020\u0066\u006f\u0072\u006d\u0061\u0074");};_dged .PageAssociation =int (_gca &0xFF);}else {_fbc ,_deca :=_ffbcg .ReadBits (32);
if _deca !=nil {return _bg .Wrap (_deca ,_cag ,"l\u006f\u006e\u0067\u0020\u0066\u006f\u0072\u006d\u0061\u0074");};_dged .PageAssociation =int (_fbc &_d .MaxInt32 );};if _fgab ==0{return nil ;};if _dged .PageAssociation !=0{_gega ,_ecbb :=_caaf .GetPage (_dged .PageAssociation );
if _ecbb !=nil {return _bg .Wrap (_ecbb ,_cag ,"\u0061s\u0073\u006f\u0063\u0069a\u0074\u0065\u0064\u0020\u0070a\u0067e\u0020n\u006f\u0074\u0020\u0066\u006f\u0075\u006ed");};var _bbade int ;for _egcf :=uint64 (0);_egcf < _fgab ;_egcf ++{_bbade =_gfcf [_egcf ];
_dged .RTSegments [_egcf ],_ecbb =_gega .GetSegment (_bbade );if _ecbb !=nil {var _ffcd error ;_dged .RTSegments [_egcf ],_ffcd =_caaf .GetGlobalSegment (_bbade );if _ffcd !=nil {return _bg .Wrapf (_ecbb ,_cag ,"\u0072\u0065\u0066\u0065\u0072\u0065n\u0063\u0065\u0020s\u0065\u0067\u006de\u006e\u0074\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075n\u0064\u0020\u0061\u0074\u0020pa\u0067\u0065\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006e\u006f\u0072\u0020\u0069\u006e\u0020\u0067\u006c\u006f\u0062\u0061\u006c\u0073",_dged .PageAssociation );
};};};return nil ;};for _cbag :=uint64 (0);_cbag < _fgab ;_cbag ++{_dged .RTSegments [_cbag ],_ecag =_caaf .GetGlobalSegment (_gfcf [_cbag ]);if _ecag !=nil {return _bg .Wrapf (_ecag ,_cag ,"\u0067\u006c\u006f\u0062\u0061\u006c\u0020\u0073\u0065\u0067m\u0065\u006e\u0074\u003a\u0020\u0027\u0025d\u0027\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064",_gfcf [_cbag ]);
};};return nil ;};func (_dagb *SymbolDictionary )setExportedSymbols (_edcg []int ){for _bdaf :=uint32 (0);_bdaf < _dagb ._ggdcg +_dagb .NumberOfNewSymbols ;_bdaf ++{if _edcg [_bdaf ]==1{var _dfde *_eag .Bitmap ;if _bdaf < _dagb ._ggdcg {_dfde =_dagb ._fddb [_bdaf ];
}else {_dfde =_dagb ._fagf [_bdaf -_dagb ._ggdcg ];};_ecc .Log .Trace ("\u005bS\u0059\u004dB\u004f\u004c\u002d\u0044I\u0043\u0054\u0049O\u004e\u0041\u0052\u0059\u005d\u0020\u0041\u0064\u0064 E\u0078\u0070\u006fr\u0074\u0065d\u0053\u0079\u006d\u0062\u006f\u006c:\u0020\u0027%\u0073\u0027",_dfde );
_dagb ._abef =append (_dagb ._abef ,_dfde );};};};func (_abec *SymbolDictionary )decodeDirectlyThroughGenericRegion (_bddg ,_gaac uint32 )error {if _abec ._fcfe ==nil {_abec ._fcfe =NewGenericRegion (_abec ._cecgc );};_abec ._fcfe .setParametersWithAt (false ,byte (_abec .SdTemplate ),false ,false ,_abec .SdATX ,_abec .SdATY ,_bddg ,_gaac ,_abec ._edeb ,_abec ._bbgf );
return _abec .addSymbol (_abec ._fcfe );};func (_fadg *TextRegion )readUseRefinement ()error {if !_fadg .UseRefinement ||_fadg .SbrTemplate !=0{return nil ;};var (_ffbd byte ;_agec error ;);_fadg .SbrATX =make ([]int8 ,2);_fadg .SbrATY =make ([]int8 ,2);
_ffbd ,_agec =_fadg ._ecga .ReadByte ();if _agec !=nil {return _agec ;};_fadg .SbrATX [0]=int8 (_ffbd );_ffbd ,_agec =_fadg ._ecga .ReadByte ();if _agec !=nil {return _agec ;};_fadg .SbrATY [0]=int8 (_ffbd );_ffbd ,_agec =_fadg ._ecga .ReadByte ();if _agec !=nil {return _agec ;
};_fadg .SbrATX [1]=int8 (_ffbd );_ffbd ,_agec =_fadg ._ecga .ReadByte ();if _agec !=nil {return _agec ;};_fadg .SbrATY [1]=int8 (_ffbd );return nil ;};func (_gecf *PatternDictionary )checkInput ()error {if _gecf .HdpHeight < 1||_gecf .HdpWidth < 1{return _cf .New ("in\u0076\u0061l\u0069\u0064\u0020\u0048\u0065\u0061\u0064\u0065\u0072 \u0056\u0061\u006c\u0075\u0065\u003a\u0020\u0057\u0069\u0064\u0074\u0068\u002f\u0048\u0065\u0069\u0067\u0068\u0074\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020g\u0072e\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061n\u0020z\u0065\u0072o");
};if _gecf .IsMMREncoded {if _gecf .HDTemplate !=0{_ecc .Log .Debug ("\u0076\u0061\u0072\u0069\u0061\u0062\u006c\u0065\u0020\u0048\u0044\u0054\u0065\u006d\u0070\u006c\u0061\u0074e\u0020\u0073\u0068\u006f\u0075\u006c\u0064 \u006e\u006f\u0074\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e \u0074\u0068\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0030");
};};return nil ;};func (_gbee *TextRegion )decodeRdy ()(int64 ,error ){const _eeed ="\u0064e\u0063\u006f\u0064\u0065\u0052\u0064y";if _gbee .IsHuffmanEncoded {if _gbee .SbHuffRDY ==3{if _gbee ._cgcgf ==nil {var (_dada int ;_bebe error ;);if _gbee .SbHuffFS ==3{_dada ++;
};if _gbee .SbHuffDS ==3{_dada ++;};if _gbee .SbHuffDT ==3{_dada ++;};if _gbee .SbHuffRDWidth ==3{_dada ++;};if _gbee .SbHuffRDHeight ==3{_dada ++;};if _gbee .SbHuffRDX ==3{_dada ++;};_gbee ._cgcgf ,_bebe =_gbee .getUserTable (_dada );if _bebe !=nil {return 0,_bg .Wrap (_bebe ,_eeed ,"");
};};return _gbee ._cgcgf .Decode (_gbee ._ecga );};_ccda ,_fgcag :=_bb .GetStandardTable (14+int (_gbee .SbHuffRDY ));if _fgcag !=nil {return 0,_fgcag ;};return _ccda .Decode (_gbee ._ecga );};_gbfbc ,_ccab :=_gbee ._bafa .DecodeInt (_gbee ._cage );if _ccab !=nil {return 0,_bg .Wrap (_ccab ,_eeed ,"");
};return int64 (_gbfbc ),nil ;};func (_befa *TableSegment )HtHigh ()int32 {return _befa ._egbfb };type RegionSegment struct{_ecfa *_be .Reader ;BitmapWidth uint32 ;BitmapHeight uint32 ;XLocation uint32 ;YLocation uint32 ;CombinaionOperator _eag .CombinationOperator ;
};func (_aaeb *PatternDictionary )readTemplate ()error {_dgbb ,_gaag :=_aaeb ._agcg .ReadBits (2);if _gaag !=nil {return _gaag ;};_aaeb .HDTemplate =byte (_dgbb );return nil ;};func (_dgfg *GenericRefinementRegion )readAtPixels ()error {_dgfg .GrAtX =make ([]int8 ,2);
_dgfg .GrAtY =make ([]int8 ,2);_ggf ,_agac :=_dgfg ._bba .ReadByte ();if _agac !=nil {return _agac ;};_dgfg .GrAtX [0]=int8 (_ggf );_ggf ,_agac =_dgfg ._bba .ReadByte ();if _agac !=nil {return _agac ;};_dgfg .GrAtY [0]=int8 (_ggf );_ggf ,_agac =_dgfg ._bba .ReadByte ();
if _agac !=nil {return _agac ;};_dgfg .GrAtX [1]=int8 (_ggf );_ggf ,_agac =_dgfg ._bba .ReadByte ();if _agac !=nil {return _agac ;};_dgfg .GrAtY [1]=int8 (_ggf );return nil ;};func (_dbac *SymbolDictionary )setRefinementAtPixels ()error {if !_dbac .UseRefinementAggregation ||_dbac .SdrTemplate !=0{return nil ;
};if _gfef :=_dbac .readRefinementAtPixels (2);_gfef !=nil {return _gfef ;};return nil ;};type HalftoneRegion struct{_cae *_be .Reader ;_abge *Header ;DataHeaderOffset int64 ;DataHeaderLength int64 ;DataOffset int64 ;DataLength int64 ;RegionSegment *RegionSegment ;
HDefaultPixel int8 ;CombinationOperator _eag .CombinationOperator ;HSkipEnabled bool ;HTemplate byte ;IsMMREncoded bool ;HGridWidth uint32 ;HGridHeight uint32 ;HGridX int32 ;HGridY int32 ;HRegionX uint16 ;HRegionY uint16 ;HalftoneRegionBitmap *_eag .Bitmap ;
Patterns []*_eag .Bitmap ;};func (_acbg *HalftoneRegion )computeGrayScalePlanes (_gbb []*_eag .Bitmap ,_ggfe int )([][]int ,error ){_acf :=make ([][]int ,_acbg .HGridHeight );for _gfa :=0;_gfa < len (_acf );_gfa ++{_acf [_gfa ]=make ([]int ,_acbg .HGridWidth );
};for _ffec :=0;_ffec < int (_acbg .HGridHeight );_ffec ++{for _ecd :=0;_ecd < int (_acbg .HGridWidth );_ecd +=8{var _dgeg int ;if _fgdc :=int (_acbg .HGridWidth )-_ecd ;_fgdc > 8{_dgeg =8;}else {_dgeg =_fgdc ;};_bag :=_gbb [0].GetByteIndex (_ecd ,_ffec );
for _ffga :=0;_ffga < _dgeg ;_ffga ++{_bbbb :=_ffga +_ecd ;_acf [_ffec ][_bbbb ]=0;for _fbaf :=0;_fbaf < _ggfe ;_fbaf ++{_ceda ,_agbb :=_gbb [_fbaf ].GetByte (_bag );if _agbb !=nil {return nil ,_agbb ;};_edbg :=_ceda >>uint (7-_bbbb &7);_bdabd :=_edbg &1;
_egeg :=1<<uint (_fbaf );_gbad :=int (_bdabd )*_egeg ;_acf [_ffec ][_bbbb ]+=_gbad ;};};};};return _acf ,nil ;};func (_cdafg *SymbolDictionary )addSymbol (_adeg Regioner )error {_gfgb ,_bff :=_adeg .GetRegionBitmap ();if _bff !=nil {return _bff ;};_cdafg ._fagf [_cdafg ._abde ]=_gfgb ;
_cdafg ._gfea =append (_cdafg ._gfea ,_gfgb );_ecc .Log .Trace ("\u005b\u0053YM\u0042\u004f\u004c \u0044\u0049\u0043\u0054ION\u0041RY\u005d\u0020\u0041\u0064\u0064\u0065\u0064 s\u0079\u006d\u0062\u006f\u006c\u003a\u0020%\u0073",_gfgb );return nil ;};