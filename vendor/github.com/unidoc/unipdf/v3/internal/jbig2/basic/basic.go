//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package basic ;import _c "github.com/unidoc/unipdf/v3/internal/jbig2/errors";func Min (x ,y int )int {if x < y {return x ;};return y ;};func Abs (v int )int {if v > 0{return v ;};return -v ;};func (_dd *Stack )Peek ()(_ece interface{},_gf bool ){return _dd .peek ()};
func (_db *Stack )Pop ()(_ee interface{},_adf bool ){_ee ,_adf =_db .peek ();if !_adf {return nil ,_adf ;};_db .Data =_db .Data [:_db .top ()];return _ee ,true ;};type NumSlice []float32 ;func NewNumSlice (i int )*NumSlice {_bb :=NumSlice (make ([]float32 ,i ));
return &_bb };func NewIntSlice (i int )*IntSlice {_g :=IntSlice (make ([]int ,i ));return &_g };func Ceil (numerator ,denominator int )int {if numerator %denominator ==0{return numerator /denominator ;};return (numerator /denominator )+1;};func (_a *NumSlice )AddInt (v int ){*_a =append (*_a ,float32 (v ))};
func (_fb NumSlice )GetInt (i int )(int ,error ){const _fcf ="\u0047\u0065\u0074\u0049\u006e\u0074";if i < 0||i > len (_fb )-1{return 0,_c .Errorf (_fcf ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};_ad :=_fb [i ];return int (_ad +Sign (_ad )*0.5),nil ;};func Max (x ,y int )int {if x > y {return x ;};return y ;};type IntSlice []int ;func (_ag *Stack )peek ()(interface{},bool ){_ga :=_ag .top ();if _ga ==-1{return nil ,false ;};return _ag .Data [_ga ],true ;
};func (_dac NumSlice )GetIntSlice ()[]int {_fce :=make ([]int ,len (_dac ));for _cf ,_aa :=range _dac {_fce [_cf ]=int (_aa );};return _fce ;};func (_ed *NumSlice )Add (v float32 ){*_ed =append (*_ed ,v )};func (_fc IntsMap )Delete (key uint64 ){delete (_fc ,key )};
func (_afd *Stack )top ()int {return len (_afd .Data )-1};func (_be IntsMap )Get (key uint64 )(int ,bool ){_e ,_f :=_be [key ];if !_f {return 0,false ;};if len (_e )==0{return 0,false ;};return _e [0],true ;};func (_bf *IntSlice )Add (v int )error {if _bf ==nil {return _c .Error ("\u0049\u006e\u0074S\u006c\u0069\u0063\u0065\u002e\u0041\u0064\u0064","\u0073\u006c\u0069\u0063\u0065\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");
};*_bf =append (*_bf ,v );return nil ;};type Stack struct{Data []interface{};Aux *Stack ;};func (_eb *IntSlice )Copy ()*IntSlice {_da :=IntSlice (make ([]int ,len (*_eb )));copy (_da ,*_eb );return &_da ;};func (_d IntsMap )GetSlice (key uint64 )([]int ,bool ){_ec ,_cd :=_d [key ];
if !_cd {return nil ,false ;};return _ec ,true ;};func (_bd IntSlice )Get (index int )(int ,error ){if index > len (_bd )-1{return 0,_c .Errorf ("\u0049\u006e\u0074S\u006c\u0069\u0063\u0065\u002e\u0047\u0065\u0074","\u0069\u006e\u0064\u0065x:\u0020\u0025\u0064\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006eg\u0065",index );
};return _bd [index ],nil ;};func (_af NumSlice )Get (i int )(float32 ,error ){if i < 0||i > len (_af )-1{return 0,_c .Errorf ("\u004e\u0075\u006dS\u006c\u0069\u0063\u0065\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _af [i ],nil ;};func Sign (v float32 )float32 {if v >=0.0{return 1.0;};return -1.0;};func (_fa *Stack )Push (v interface{}){_fa .Data =append (_fa .Data ,v )};func (_fcb IntSlice )Size ()int {return len (_fcb )};type IntsMap map[uint64 ][]int ;
func (_fe *Stack )Len ()int {return len (_fe .Data )};func (_ca IntsMap )Add (key uint64 ,value int ){_ca [key ]=append (_ca [key ],value )};