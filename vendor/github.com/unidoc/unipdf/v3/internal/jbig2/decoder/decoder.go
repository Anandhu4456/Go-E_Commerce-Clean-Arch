//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package decoder ;import (_a "github.com/unidoc/unipdf/v3/internal/bitwise";_eg "github.com/unidoc/unipdf/v3/internal/jbig2/bitmap";_b "github.com/unidoc/unipdf/v3/internal/jbig2/document";_ac "github.com/unidoc/unipdf/v3/internal/jbig2/errors";_e "image";
);func (_bdc *Decoder )PageNumber ()(int ,error ){const _de ="\u0044e\u0063o\u0064\u0065\u0072\u002e\u0050a\u0067\u0065N\u0075\u006d\u0062\u0065\u0072";if _bdc ._gc ==nil {return 0,_ac .Error (_de ,"d\u0065\u0063\u006f\u0064\u0065\u0072 \u006e\u006f\u0074\u0020\u0069\u006e\u0069\u0074\u0069a\u006c\u0069\u007ae\u0064 \u0079\u0065\u0074");
};return int (_bdc ._gc .NumberOfPages ),nil ;};func (_c *Decoder )DecodePageImage (pageNumber int )(_e .Image ,error ){const _dc ="\u0064\u0065\u0063od\u0065\u0072\u002e\u0044\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0067\u0065\u0049\u006d\u0061\u0067\u0065";
_bc ,_ad :=_c .decodePageImage (pageNumber );if _ad !=nil {return nil ,_ac .Wrap (_ad ,_dc ,"");};return _bc ,nil ;};func (_bd *Decoder )DecodeNextPage ()([]byte ,error ){_bd ._d ++;_ga :=_bd ._d ;return _bd .decodePage (_ga );};func Decode (input []byte ,parameters Parameters ,globals *_b .Globals )(*Decoder ,error ){_cg :=_a .NewReader (input );
_adg ,_gaf :=_b .DecodeDocument (_cg ,globals );if _gaf !=nil {return nil ,_gaf ;};return &Decoder {_ed :_cg ,_gc :_adg ,_bg :parameters },nil ;};func (_ec *Decoder )DecodePage (pageNumber int )([]byte ,error ){return _ec .decodePage (pageNumber )};func (_gd *Decoder )decodePageImage (_db int )(_e .Image ,error ){const _gg ="\u0064e\u0063o\u0064\u0065\u0050\u0061\u0067\u0065\u0049\u006d\u0061\u0067\u0065";
if _db < 0{return nil ,_ac .Errorf (_gg ,"\u0069n\u0076\u0061\u006c\u0069d\u0020\u0070\u0061\u0067\u0065 \u006eu\u006db\u0065\u0072\u003a\u0020\u0027\u0025\u0064'",_db );};if _db > int (_gd ._gc .NumberOfPages ){return nil ,_ac .Errorf (_gg ,"p\u0061\u0067\u0065\u003a\u0020\u0027%\u0064\u0027\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0064\u0065\u0063\u006f\u0064e\u0072",_db );
};_abg ,_dbg :=_gd ._gc .GetPage (_db );if _dbg !=nil {return nil ,_ac .Wrap (_dbg ,_gg ,"");};_gb ,_dbg :=_abg .GetBitmap ();if _dbg !=nil {return nil ,_ac .Wrap (_dbg ,_gg ,"");};_gb .InverseData ();return _gb .ToImage (),nil ;};type Decoder struct{_ed *_a .Reader ;
_gc *_b .Document ;_d int ;_bg Parameters ;};func (_bdb *Decoder )decodePage (_ab int )([]byte ,error ){const _be ="\u0064\u0065\u0063\u006f\u0064\u0065\u0050\u0061\u0067\u0065";if _ab < 0{return nil ,_ac .Errorf (_be ,"\u0069n\u0076\u0061\u006c\u0069d\u0020\u0070\u0061\u0067\u0065 \u006eu\u006db\u0065\u0072\u003a\u0020\u0027\u0025\u0064'",_ab );
};if _ab > int (_bdb ._gc .NumberOfPages ){return nil ,_ac .Errorf (_be ,"p\u0061\u0067\u0065\u003a\u0020\u0027%\u0064\u0027\u0020\u006e\u006f\u0074 \u0066\u006f\u0075\u006e\u0064\u0020\u0069n\u0020\u0074\u0068\u0065\u0020\u0064\u0065\u0063\u006f\u0064e\u0072",_ab );
};_aca ,_eca :=_bdb ._gc .GetPage (_ab );if _eca !=nil {return nil ,_ac .Wrap (_eca ,_be ,"");};_acf ,_eca :=_aca .GetBitmap ();if _eca !=nil {return nil ,_ac .Wrap (_eca ,_be ,"");};_acf .InverseData ();if !_bdb ._bg .UnpaddedData {return _acf .Data ,nil ;
};return _acf .GetUnpaddedData ();};type Parameters struct{UnpaddedData bool ;Color _eg .Color ;};