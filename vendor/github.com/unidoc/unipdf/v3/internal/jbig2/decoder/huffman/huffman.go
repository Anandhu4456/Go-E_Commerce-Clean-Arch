//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package huffman ;import (_de "errors";_d "fmt";_a "github.com/unidoc/unipdf/v3/internal/bitwise";_e "github.com/unidoc/unipdf/v3/internal/jbig2/internal";_ad "math";_g "strings";);type Node interface{Decode (_eda *_a .Reader )(int64 ,error );String ()string ;
};func (_aec *StandardTable )RootNode ()*InternalNode {return _aec ._gec };func (_cea *InternalNode )Decode (r *_a .Reader )(int64 ,error ){_ge ,_gga :=r .ReadBit ();if _gga !=nil {return 0,_gga ;};if _ge ==0{return _cea ._gce .Decode (r );};return _cea ._ga .Decode (r );
};func GetStandardTable (number int )(Tabler ,error ){if number <=0||number > len (_cg ){return nil ,_de .New ("\u0049n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");};_feg :=_cg [number -1];if _feg ==nil {var _aa error ;
_feg ,_aa =_cec (_gaf [number -1]);if _aa !=nil {return nil ,_aa ;};_cg [number -1]=_feg ;};return _feg ,nil ;};func (_gd *FixedSizeTable )String ()string {return _gd ._cb .String ()+"\u000a"};type ValueNode struct{_ae int32 ;_bg int32 ;_fa bool ;};func _dd (_fff ,_fbf int32 )string {var _bcb int32 ;
_cdf :=make ([]rune ,_fbf );for _dfg :=int32 (1);_dfg <=_fbf ;_dfg ++{_bcb =_fff >>uint (_fbf -_dfg )&1;if _bcb !=0{_cdf [_dfg -1]='1';}else {_cdf [_dfg -1]='0';};};return string (_cdf );};func (_ag *InternalNode )pad (_ba *_g .Builder ){for _bag :=int32 (0);
_bag < _ag ._dbd ;_bag ++{_ba .WriteString ("\u0020\u0020\u0020");};};func (_bbb *InternalNode )String ()string {_afg :=&_g .Builder {};_afg .WriteString ("\u000a");_bbb .pad (_afg );_afg .WriteString ("\u0030\u003a\u0020");_afg .WriteString (_bbb ._gce .String ()+"\u000a");
_bbb .pad (_afg );_afg .WriteString ("\u0031\u003a\u0020");_afg .WriteString (_bbb ._ga .String ()+"\u000a");return _afg .String ();};func _dfb (_bbf int32 )*InternalNode {return &InternalNode {_dbd :_bbf }};type EncodedTable struct{BasicTabler ;_ce *InternalNode ;
};func (_bb *FixedSizeTable )Decode (r *_a .Reader )(int64 ,error ){return _bb ._cb .Decode (r )};func _bcg (_cfa *Code )*ValueNode {return &ValueNode {_ae :_cfa ._bce ,_bg :_cfa ._cff ,_fa :_cfa ._adg }};func _gfa (_be *Code )*OutOfBandNode {return &OutOfBandNode {}};
func (_bc *EncodedTable )RootNode ()*InternalNode {return _bc ._ce };func (_cdg *InternalNode )append (_fbe *Code )(_bdbb error ){if _fbe ._ced ==0{return nil ;};_bbc :=_fbe ._ced -1-_cdg ._dbd ;if _bbc < 0{return _de .New ("\u004e\u0065\u0067\u0061\u0074\u0069\u0076\u0065\u0020\u0073\u0068\u0069\u0066\u0074\u0069n\u0067 \u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u006c\u006c\u006f\u0077\u0065\u0064");
};_cead :=(_fbe ._gb >>uint (_bbc ))&0x1;if _bbc ==0{if _fbe ._bce ==-1{if _cead ==1{if _cdg ._ga !=nil {return _d .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_fbe );
};_cdg ._ga =_gfa (_fbe );}else {if _cdg ._gce !=nil {return _d .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_fbe );};_cdg ._gce =_gfa (_fbe );};}else {if _cead ==1{if _cdg ._ga !=nil {return _d .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_fbe );
};_cdg ._ga =_bcg (_fbe );}else {if _cdg ._gce !=nil {return _d .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_fbe );
};_cdg ._gce =_bcg (_fbe );};};}else {if _cead ==1{if _cdg ._ga ==nil {_cdg ._ga =_dfb (_cdg ._dbd +1);};if _bdbb =_cdg ._ga .(*InternalNode ).append (_fbe );_bdbb !=nil {return _bdbb ;};}else {if _cdg ._gce ==nil {_cdg ._gce =_dfb (_cdg ._dbd +1);};if _bdbb =_cdg ._gce .(*InternalNode ).append (_fbe );
_bdbb !=nil {return _bdbb ;};};};return nil ;};func (_fed *StandardTable )String ()string {return _fed ._gec .String ()+"\u000a"};func _cec (_eg [][]int32 )(*StandardTable ,error ){var _ece []*Code ;for _aecb :=0;_aecb < len (_eg );_aecb ++{_dgb :=_eg [_aecb ][0];
_aad :=_eg [_aecb ][1];_dc :=_eg [_aecb ][2];var _gea bool ;if len (_eg [_aecb ])> 3{_gea =true ;};_ece =append (_ece ,NewCode (_dgb ,_aad ,_dc ,_gea ));};_bfa :=&StandardTable {_gec :_dfb (0)};if _gge :=_bfa .InitTree (_ece );_gge !=nil {return nil ,_gge ;
};return _bfa ,nil ;};type FixedSizeTable struct{_cb *InternalNode };type BasicTabler interface{HtHigh ()int32 ;HtLow ()int32 ;StreamReader ()*_a .Reader ;HtPS ()int32 ;HtRS ()int32 ;HtOOB ()int32 ;};type Code struct{_ced int32 ;_bce int32 ;_cff int32 ;
_adg bool ;_gb int32 ;};func _cga (_bba ,_caa int32 )int32 {if _bba > _caa {return _bba ;};return _caa ;};func (_ff *ValueNode )Decode (r *_a .Reader )(int64 ,error ){_bdb ,_fg :=r .ReadBits (byte (_ff ._ae ));if _fg !=nil {return 0,_fg ;};if _ff ._fa {_bdb =-_bdb ;
};return int64 (_ff ._bg )+int64 (_bdb ),nil ;};type Tabler interface{Decode (_dbc *_a .Reader )(int64 ,error );InitTree (_baf []*Code )error ;String ()string ;RootNode ()*InternalNode ;};var _ Node =&ValueNode {};func (_ed *EncodedTable )InitTree (codeTable []*Code )error {_ecg (codeTable );
for _ ,_bf :=range codeTable {if _f :=_ed ._ce .append (_bf );_f !=nil {return _f ;};};return nil ;};func _ecg (_da []*Code ){var _dba int32 ;for _ ,_ca :=range _da {_dba =_cga (_dba ,_ca ._ced );};_bee :=make ([]int32 ,_dba +1);for _ ,_aadf :=range _da {_bee [_aadf ._ced ]++;
};var _gcb int32 ;_bdf :=make ([]int32 ,len (_bee )+1);_bee [0]=0;for _ccd :=int32 (1);_ccd <=int32 (len (_bee ));_ccd ++{_bdf [_ccd ]=(_bdf [_ccd -1]+(_bee [_ccd -1]))<<1;_gcb =_bdf [_ccd ];for _ ,_edc :=range _da {if _edc ._ced ==_ccd {_edc ._gb =_gcb ;
_gcb ++;};};};};func NewEncodedTable (table BasicTabler )(*EncodedTable ,error ){_gc :=&EncodedTable {_ce :&InternalNode {},BasicTabler :table };if _df :=_gc .parseTable ();_df !=nil {return nil ,_df ;};return _gc ,nil ;};func (_fd *StandardTable )InitTree (codeTable []*Code )error {_ecg (codeTable );
for _ ,_eba :=range codeTable {if _fcc :=_fd ._gec .append (_eba );_fcc !=nil {return _fcc ;};};return nil ;};var _cg =make ([]Tabler ,len (_gaf ));func (_dcf *Code )String ()string {var _abe string ;if _dcf ._gb !=-1{_abe =_dd (_dcf ._gb ,_dcf ._ced );
}else {_abe ="\u003f";};return _d .Sprintf ("%\u0073\u002f\u0025\u0064\u002f\u0025\u0064\u002f\u0025\u0064",_abe ,_dcf ._ced ,_dcf ._bce ,_dcf ._cff );};func NewFixedSizeTable (codeTable []*Code )(*FixedSizeTable ,error ){_af :=&FixedSizeTable {_cb :&InternalNode {}};
if _bd :=_af .InitTree (codeTable );_bd !=nil {return nil ,_bd ;};return _af ,nil ;};type InternalNode struct{_dbd int32 ;_gce Node ;_ga Node ;};func (_cde *ValueNode )String ()string {return _d .Sprintf ("\u0025\u0064\u002f%\u0064",_cde ._ae ,_cde ._bg );
};func (_fc *StandardTable )Decode (r *_a .Reader )(int64 ,error ){return _fc ._gec .Decode (r )};type StandardTable struct{_gec *InternalNode };func (_ab *OutOfBandNode )String ()string {return _d .Sprintf ("\u0025\u0030\u00364\u0062",int64 (_ad .MaxInt64 ));
};func (_db *EncodedTable )parseTable ()error {var (_gg []*Code ;_ada ,_fb ,_cee int32 ;_efa uint64 ;_eb error ;);_fe :=_db .StreamReader ();_bfd :=_db .HtLow ();for _bfd < _db .HtHigh (){_efa ,_eb =_fe .ReadBits (byte (_db .HtPS ()));if _eb !=nil {return _eb ;
};_ada =int32 (_efa );_efa ,_eb =_fe .ReadBits (byte (_db .HtRS ()));if _eb !=nil {return _eb ;};_fb =int32 (_efa );_gg =append (_gg ,NewCode (_ada ,_fb ,_cee ,false ));_bfd +=1<<uint (_fb );};_efa ,_eb =_fe .ReadBits (byte (_db .HtPS ()));if _eb !=nil {return _eb ;
};_ada =int32 (_efa );_fb =32;_cee =_db .HtLow ()-1;_gg =append (_gg ,NewCode (_ada ,_fb ,_cee ,true ));_efa ,_eb =_fe .ReadBits (byte (_db .HtPS ()));if _eb !=nil {return _eb ;};_ada =int32 (_efa );_fb =32;_cee =_db .HtHigh ();_gg =append (_gg ,NewCode (_ada ,_fb ,_cee ,false ));
if _db .HtOOB ()==1{_efa ,_eb =_fe .ReadBits (byte (_db .HtPS ()));if _eb !=nil {return _eb ;};_ada =int32 (_efa );_gg =append (_gg ,NewCode (_ada ,-1,-1,false ));};if _eb =_db .InitTree (_gg );_eb !=nil {return _eb ;};return nil ;};func NewCode (prefixLength ,rangeLength ,rangeLow int32 ,isLowerRange bool )*Code {return &Code {_ced :prefixLength ,_bce :rangeLength ,_cff :rangeLow ,_adg :isLowerRange ,_gb :-1};
};var _ Node =&OutOfBandNode {};var _ Tabler =&EncodedTable {};func (_ef *EncodedTable )Decode (r *_a .Reader )(int64 ,error ){return _ef ._ce .Decode (r )};func (_efc *FixedSizeTable )InitTree (codeTable []*Code )error {_ecg (codeTable );for _ ,_dg :=range codeTable {_cd :=_efc ._cb .append (_dg );
if _cd !=nil {return _cd ;};};return nil ;};var _gaf =[][][]int32 {{{1,4,0},{2,8,16},{3,16,272},{3,32,65808}},{{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{6,32,75},{6,-1,0}},{{8,8,-256},{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{8,32,-257,999},{7,32,75},{6,-1,0}},{{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{5,32,76}},{{7,8,-255},{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{7,32,-256,999},{6,32,76}},{{5,10,-2048},{4,9,-1024},{4,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{2,7,0},{3,7,128},{3,8,256},{4,9,512},{4,10,1024},{6,32,-2049,999},{6,32,2048}},{{4,9,-1024},{3,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{4,5,0},{5,5,32},{5,6,64},{4,7,128},{3,8,256},{3,9,512},{3,10,1024},{5,32,-1025,999},{5,32,2048}},{{8,3,-15},{9,1,-7},{8,1,-5},{9,0,-3},{7,0,-2},{4,0,-1},{2,1,0},{5,0,2},{6,0,3},{3,4,4},{6,1,20},{4,4,22},{4,5,38},{5,6,70},{5,7,134},{6,7,262},{7,8,390},{6,10,646},{9,32,-16,999},{9,32,1670},{2,-1,0}},{{8,4,-31},{9,2,-15},{8,2,-11},{9,1,-7},{7,1,-5},{4,1,-3},{3,1,-1},{3,1,1},{5,1,3},{6,1,5},{3,5,7},{6,2,39},{4,5,43},{4,6,75},{5,7,139},{5,8,267},{6,8,523},{7,9,779},{6,11,1291},{9,32,-32,999},{9,32,3339},{2,-1,0}},{{7,4,-21},{8,0,-5},{7,0,-4},{5,0,-3},{2,2,-2},{5,0,2},{6,0,3},{7,0,4},{8,0,5},{2,6,6},{5,5,70},{6,5,102},{6,6,134},{6,7,198},{6,8,326},{6,9,582},{6,10,1094},{7,11,2118},{8,32,-22,999},{8,32,4166},{2,-1,0}},{{1,0,1},{2,1,2},{4,0,4},{4,1,5},{5,1,7},{5,2,9},{6,2,13},{7,2,17},{7,3,21},{7,4,29},{7,5,45},{7,6,77},{7,32,141}},{{1,0,1},{2,0,2},{3,1,3},{5,0,5},{5,1,6},{6,1,8},{7,0,10},{7,1,11},{7,2,13},{7,3,17},{7,4,25},{8,5,41},{8,32,73}},{{1,0,1},{3,0,2},{4,0,3},{5,0,4},{4,1,5},{3,3,7},{6,1,15},{6,2,17},{6,3,21},{6,4,29},{6,5,45},{7,6,77},{7,32,141}},{{3,0,-2},{3,0,-1},{1,0,0},{3,0,1},{3,0,2}},{{7,4,-24},{6,2,-8},{5,1,-4},{4,0,-2},{3,0,-1},{1,0,0},{3,0,1},{4,0,2},{5,1,3},{6,2,5},{7,4,9},{7,32,-25,999},{7,32,25}}};
func (_ec *FixedSizeTable )RootNode ()*InternalNode {return _ec ._cb };var _ Node =&InternalNode {};func (_gf *EncodedTable )String ()string {return _gf ._ce .String ()+"\u000a"};func (_eff *OutOfBandNode )Decode (r *_a .Reader )(int64 ,error ){return 0,_e .ErrOOB };
type OutOfBandNode struct{};