//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package ccittfax ;import (_dc "errors";_ce "github.com/unidoc/unipdf/v3/internal/bitwise";_f "io";_c "math";);func _fdf (_afd []byte ,_afab int ,_cca int ,_cfab bool )([]byte ,int ){var (_gbae code ;_bgg bool ;);for !_bgg {_gbae ,_cca ,_bgg =_ecfde (_cca ,_cfab );
_afd ,_afab =_gbg (_afd ,_afab ,_gbae );};return _afd ,_afab ;};func init (){_b =&treeNode {_gbbc :true ,_cegg :_df };_be =&treeNode {_cegg :_fg ,_cbdg :_b };_be ._fdab =_be ;_e =&tree {_fdg :&treeNode {}};if _ced :=_e .fillWithNode (12,0,_be );_ced !=nil {panic (_ced .Error ());
};if _gb :=_e .fillWithNode (12,1,_b );_gb !=nil {panic (_gb .Error ());};_g =&tree {_fdg :&treeNode {}};for _cdd :=0;_cdd < len (_cec );_cdd ++{for _feb :=0;_feb < len (_cec [_cdd ]);_feb ++{if _bb :=_g .fill (_cdd +2,int (_cec [_cdd ][_feb ]),int (_db [_cdd ][_feb ]));
_bb !=nil {panic (_bb .Error ());};};};if _ac :=_g .fillWithNode (12,0,_be );_ac !=nil {panic (_ac .Error ());};if _da :=_g .fillWithNode (12,1,_b );_da !=nil {panic (_da .Error ());};_bf =&tree {_fdg :&treeNode {}};for _bfc :=0;_bfc < len (_ga );_bfc ++{for _ee :=0;
_ee < len (_ga [_bfc ]);_ee ++{if _bd :=_bf .fill (_bfc +4,int (_ga [_bfc ][_ee ]),int (_feg [_bfc ][_ee ]));_bd !=nil {panic (_bd .Error ());};};};if _ff :=_bf .fillWithNode (12,0,_be );_ff !=nil {panic (_ff .Error ());};if _ea :=_bf .fillWithNode (12,1,_b );
_ea !=nil {panic (_ea .Error ());};_cd =&tree {_fdg :&treeNode {}};if _cf :=_cd .fill (4,1,_fe );_cf !=nil {panic (_cf .Error ());};if _ffa :=_cd .fill (3,1,_a );_ffa !=nil {panic (_ffa .Error ());};if _gg :=_cd .fill (1,1,0);_gg !=nil {panic (_gg .Error ());
};if _gf :=_cd .fill (3,3,1);_gf !=nil {panic (_gf .Error ());};if _ae :=_cd .fill (6,3,2);_ae !=nil {panic (_ae .Error ());};if _cdb :=_cd .fill (7,3,3);_cdb !=nil {panic (_cdb .Error ());};if _ec :=_cd .fill (3,2,-1);_ec !=nil {panic (_ec .Error ());
};if _eb :=_cd .fill (6,2,-2);_eb !=nil {panic (_eb .Error ());};if _eaf :=_cd .fill (7,2,-3);_eaf !=nil {panic (_eaf .Error ());};};func (_dad *tree )fill (_bed ,_fca ,_abeg int )error {_fbf :=_dad ._fdg ;for _dfa :=0;_dfa < _bed ;_dfa ++{_dfe :=_bed -1-_dfa ;
_fff :=((_fca >>uint (_dfe ))&1)!=0;_dbcb :=_fbf .walk (_fff );if _dbcb !=nil {if _dbcb ._gbbc {return _dc .New ("\u006e\u006f\u0064\u0065\u0020\u0069\u0073\u0020\u006c\u0065\u0061\u0066\u002c\u0020\u006eo\u0020o\u0074\u0068\u0065\u0072\u0020\u0066\u006f\u006c\u006c\u006f\u0077\u0069\u006e\u0067");
};_fbf =_dbcb ;continue ;};_dbcb =&treeNode {};if _dfa ==_bed -1{_dbcb ._cegg =_abeg ;_dbcb ._gbbc =true ;};if _fca ==0{_dbcb ._ceef =true ;};_fbf .set (_fff ,_dbcb );_fbf =_dbcb ;};return nil ;};func NewDecoder (data []byte ,options DecodeOptions )(*Decoder ,error ){_ef :=&Decoder {_gae :_ce .NewReader (data ),_ecf :options .Columns ,_eg :options .Rows ,_dccb :options .DamagedRowsBeforeError ,_ccb :make ([]byte ,(options .Columns +7)/8),_dd :make ([]int ,options .Columns +2),_af :make ([]int ,options .Columns +2),_ed :options .EncodedByteAligned ,_ggg :options .BlackIsOne ,_gbf :options .EndOfLine ,_ccbd :options .EndOfBlock };
switch {case options .K ==0:_ef ._eda =_gc ;if len (data )< 20{return nil ,_dc .New ("\u0074o\u006f\u0020\u0073\u0068o\u0072\u0074\u0020\u0063\u0063i\u0074t\u0066a\u0078\u0020\u0073\u0074\u0072\u0065\u0061m");};_gbc :=data [:20];if _gbc [0]!=0||(_gbc [1]>>4!=1&&_gbc [1]!=1){_ef ._eda =_cc ;
_eff :=(uint16 (_gbc [0])<<8+uint16 (_gbc [1]&0xff))>>4;for _ebab :=12;_ebab < 160;_ebab ++{_eff =(_eff <<1)+uint16 ((_gbc [_ebab /8]>>uint16 (7-(_ebab %8)))&0x01);if _eff &0xfff==1{_ef ._eda =_gc ;break ;};};};case options .K < 0:_ef ._eda =_cfc ;case options .K > 0:_ef ._eda =_gc ;
_ef ._bfag =true ;};switch _ef ._eda {case _cc ,_gc ,_cfc :default:return nil ,_dc .New ("\u0075\u006ek\u006e\u006f\u0077\u006e\u0020\u0063\u0063\u0069\u0074\u0074\u0066\u0061\u0078\u002e\u0044\u0065\u0063\u006f\u0064\u0065\u0072\u0020ty\u0070\u0065");
};return _ef ,nil ;};func _bfcf (_afbf ,_cecb []byte ,_cccb int )int {_fgg :=_bgec (_cecb ,_cccb );if _fgg < len (_cecb )&&(_cccb ==-1&&_cecb [_fgg ]==_cebg ||_cccb >=0&&_cccb < len (_afbf )&&_afbf [_cccb ]==_cecb [_fgg ]||_cccb >=len (_afbf )&&_afbf [_cccb -1]!=_cecb [_fgg ]){_fgg =_bgec (_cecb ,_fgg );
};return _fgg ;};type DecodeOptions struct{Columns int ;Rows int ;K int ;EncodedByteAligned bool ;BlackIsOne bool ;EndOfBlock bool ;EndOfLine bool ;DamagedRowsBeforeError int ;};type tiffType int ;var _db =[...][]uint16 {{3,2},{1,4},{6,5},{7},{9,8},{10,11,12},{13,14},{15},{16,17,0,18,64},{24,25,23,22,19,20,21,1792,1856,1920},{1984,2048,2112,2176,2240,2304,2368,2432,2496,2560,52,55,56,59,60,320,384,448,53,54,50,51,44,45,46,47,57,58,61,256,48,49,62,63,30,31,32,33,40,41,128,192,26,27,28,29,34,35,36,37,38,39,42,43},{640,704,768,832,1280,1344,1408,1472,1536,1600,1664,1728,512,576,896,960,1024,1088,1152,1216}};
func init (){_aa =make (map[int ]code );_aa [0]=code {Code :13<<8|3<<6,BitsWritten :10};_aa [1]=code {Code :2<<(5+8),BitsWritten :3};_aa [2]=code {Code :3<<(6+8),BitsWritten :2};_aa [3]=code {Code :2<<(6+8),BitsWritten :2};_aa [4]=code {Code :3<<(5+8),BitsWritten :3};
_aa [5]=code {Code :3<<(4+8),BitsWritten :4};_aa [6]=code {Code :2<<(4+8),BitsWritten :4};_aa [7]=code {Code :3<<(3+8),BitsWritten :5};_aa [8]=code {Code :5<<(2+8),BitsWritten :6};_aa [9]=code {Code :4<<(2+8),BitsWritten :6};_aa [10]=code {Code :4<<(1+8),BitsWritten :7};
_aa [11]=code {Code :5<<(1+8),BitsWritten :7};_aa [12]=code {Code :7<<(1+8),BitsWritten :7};_aa [13]=code {Code :4<<8,BitsWritten :8};_aa [14]=code {Code :7<<8,BitsWritten :8};_aa [15]=code {Code :12<<8,BitsWritten :9};_aa [16]=code {Code :5<<8|3<<6,BitsWritten :10};
_aa [17]=code {Code :6<<8,BitsWritten :10};_aa [18]=code {Code :2<<8,BitsWritten :10};_aa [19]=code {Code :12<<8|7<<5,BitsWritten :11};_aa [20]=code {Code :13<<8,BitsWritten :11};_aa [21]=code {Code :13<<8|4<<5,BitsWritten :11};_aa [22]=code {Code :6<<8|7<<5,BitsWritten :11};
_aa [23]=code {Code :5<<8,BitsWritten :11};_aa [24]=code {Code :2<<8|7<<5,BitsWritten :11};_aa [25]=code {Code :3<<8,BitsWritten :11};_aa [26]=code {Code :12<<8|10<<4,BitsWritten :12};_aa [27]=code {Code :12<<8|11<<4,BitsWritten :12};_aa [28]=code {Code :12<<8|12<<4,BitsWritten :12};
_aa [29]=code {Code :12<<8|13<<4,BitsWritten :12};_aa [30]=code {Code :6<<8|8<<4,BitsWritten :12};_aa [31]=code {Code :6<<8|9<<4,BitsWritten :12};_aa [32]=code {Code :6<<8|10<<4,BitsWritten :12};_aa [33]=code {Code :6<<8|11<<4,BitsWritten :12};_aa [34]=code {Code :13<<8|2<<4,BitsWritten :12};
_aa [35]=code {Code :13<<8|3<<4,BitsWritten :12};_aa [36]=code {Code :13<<8|4<<4,BitsWritten :12};_aa [37]=code {Code :13<<8|5<<4,BitsWritten :12};_aa [38]=code {Code :13<<8|6<<4,BitsWritten :12};_aa [39]=code {Code :13<<8|7<<4,BitsWritten :12};_aa [40]=code {Code :6<<8|12<<4,BitsWritten :12};
_aa [41]=code {Code :6<<8|13<<4,BitsWritten :12};_aa [42]=code {Code :13<<8|10<<4,BitsWritten :12};_aa [43]=code {Code :13<<8|11<<4,BitsWritten :12};_aa [44]=code {Code :5<<8|4<<4,BitsWritten :12};_aa [45]=code {Code :5<<8|5<<4,BitsWritten :12};_aa [46]=code {Code :5<<8|6<<4,BitsWritten :12};
_aa [47]=code {Code :5<<8|7<<4,BitsWritten :12};_aa [48]=code {Code :6<<8|4<<4,BitsWritten :12};_aa [49]=code {Code :6<<8|5<<4,BitsWritten :12};_aa [50]=code {Code :5<<8|2<<4,BitsWritten :12};_aa [51]=code {Code :5<<8|3<<4,BitsWritten :12};_aa [52]=code {Code :2<<8|4<<4,BitsWritten :12};
_aa [53]=code {Code :3<<8|7<<4,BitsWritten :12};_aa [54]=code {Code :3<<8|8<<4,BitsWritten :12};_aa [55]=code {Code :2<<8|7<<4,BitsWritten :12};_aa [56]=code {Code :2<<8|8<<4,BitsWritten :12};_aa [57]=code {Code :5<<8|8<<4,BitsWritten :12};_aa [58]=code {Code :5<<8|9<<4,BitsWritten :12};
_aa [59]=code {Code :2<<8|11<<4,BitsWritten :12};_aa [60]=code {Code :2<<8|12<<4,BitsWritten :12};_aa [61]=code {Code :5<<8|10<<4,BitsWritten :12};_aa [62]=code {Code :6<<8|6<<4,BitsWritten :12};_aa [63]=code {Code :6<<8|7<<4,BitsWritten :12};_aec =make (map[int ]code );
_aec [0]=code {Code :53<<8,BitsWritten :8};_aec [1]=code {Code :7<<(2+8),BitsWritten :6};_aec [2]=code {Code :7<<(4+8),BitsWritten :4};_aec [3]=code {Code :8<<(4+8),BitsWritten :4};_aec [4]=code {Code :11<<(4+8),BitsWritten :4};_aec [5]=code {Code :12<<(4+8),BitsWritten :4};
_aec [6]=code {Code :14<<(4+8),BitsWritten :4};_aec [7]=code {Code :15<<(4+8),BitsWritten :4};_aec [8]=code {Code :19<<(3+8),BitsWritten :5};_aec [9]=code {Code :20<<(3+8),BitsWritten :5};_aec [10]=code {Code :7<<(3+8),BitsWritten :5};_aec [11]=code {Code :8<<(3+8),BitsWritten :5};
_aec [12]=code {Code :8<<(2+8),BitsWritten :6};_aec [13]=code {Code :3<<(2+8),BitsWritten :6};_aec [14]=code {Code :52<<(2+8),BitsWritten :6};_aec [15]=code {Code :53<<(2+8),BitsWritten :6};_aec [16]=code {Code :42<<(2+8),BitsWritten :6};_aec [17]=code {Code :43<<(2+8),BitsWritten :6};
_aec [18]=code {Code :39<<(1+8),BitsWritten :7};_aec [19]=code {Code :12<<(1+8),BitsWritten :7};_aec [20]=code {Code :8<<(1+8),BitsWritten :7};_aec [21]=code {Code :23<<(1+8),BitsWritten :7};_aec [22]=code {Code :3<<(1+8),BitsWritten :7};_aec [23]=code {Code :4<<(1+8),BitsWritten :7};
_aec [24]=code {Code :40<<(1+8),BitsWritten :7};_aec [25]=code {Code :43<<(1+8),BitsWritten :7};_aec [26]=code {Code :19<<(1+8),BitsWritten :7};_aec [27]=code {Code :36<<(1+8),BitsWritten :7};_aec [28]=code {Code :24<<(1+8),BitsWritten :7};_aec [29]=code {Code :2<<8,BitsWritten :8};
_aec [30]=code {Code :3<<8,BitsWritten :8};_aec [31]=code {Code :26<<8,BitsWritten :8};_aec [32]=code {Code :27<<8,BitsWritten :8};_aec [33]=code {Code :18<<8,BitsWritten :8};_aec [34]=code {Code :19<<8,BitsWritten :8};_aec [35]=code {Code :20<<8,BitsWritten :8};
_aec [36]=code {Code :21<<8,BitsWritten :8};_aec [37]=code {Code :22<<8,BitsWritten :8};_aec [38]=code {Code :23<<8,BitsWritten :8};_aec [39]=code {Code :40<<8,BitsWritten :8};_aec [40]=code {Code :41<<8,BitsWritten :8};_aec [41]=code {Code :42<<8,BitsWritten :8};
_aec [42]=code {Code :43<<8,BitsWritten :8};_aec [43]=code {Code :44<<8,BitsWritten :8};_aec [44]=code {Code :45<<8,BitsWritten :8};_aec [45]=code {Code :4<<8,BitsWritten :8};_aec [46]=code {Code :5<<8,BitsWritten :8};_aec [47]=code {Code :10<<8,BitsWritten :8};
_aec [48]=code {Code :11<<8,BitsWritten :8};_aec [49]=code {Code :82<<8,BitsWritten :8};_aec [50]=code {Code :83<<8,BitsWritten :8};_aec [51]=code {Code :84<<8,BitsWritten :8};_aec [52]=code {Code :85<<8,BitsWritten :8};_aec [53]=code {Code :36<<8,BitsWritten :8};
_aec [54]=code {Code :37<<8,BitsWritten :8};_aec [55]=code {Code :88<<8,BitsWritten :8};_aec [56]=code {Code :89<<8,BitsWritten :8};_aec [57]=code {Code :90<<8,BitsWritten :8};_aec [58]=code {Code :91<<8,BitsWritten :8};_aec [59]=code {Code :74<<8,BitsWritten :8};
_aec [60]=code {Code :75<<8,BitsWritten :8};_aec [61]=code {Code :50<<8,BitsWritten :8};_aec [62]=code {Code :51<<8,BitsWritten :8};_aec [63]=code {Code :52<<8,BitsWritten :8};_dcf =make (map[int ]code );_dcf [64]=code {Code :3<<8|3<<6,BitsWritten :10};
_dcf [128]=code {Code :12<<8|8<<4,BitsWritten :12};_dcf [192]=code {Code :12<<8|9<<4,BitsWritten :12};_dcf [256]=code {Code :5<<8|11<<4,BitsWritten :12};_dcf [320]=code {Code :3<<8|3<<4,BitsWritten :12};_dcf [384]=code {Code :3<<8|4<<4,BitsWritten :12};
_dcf [448]=code {Code :3<<8|5<<4,BitsWritten :12};_dcf [512]=code {Code :3<<8|12<<3,BitsWritten :13};_dcf [576]=code {Code :3<<8|13<<3,BitsWritten :13};_dcf [640]=code {Code :2<<8|10<<3,BitsWritten :13};_dcf [704]=code {Code :2<<8|11<<3,BitsWritten :13};
_dcf [768]=code {Code :2<<8|12<<3,BitsWritten :13};_dcf [832]=code {Code :2<<8|13<<3,BitsWritten :13};_dcf [896]=code {Code :3<<8|18<<3,BitsWritten :13};_dcf [960]=code {Code :3<<8|19<<3,BitsWritten :13};_dcf [1024]=code {Code :3<<8|20<<3,BitsWritten :13};
_dcf [1088]=code {Code :3<<8|21<<3,BitsWritten :13};_dcf [1152]=code {Code :3<<8|22<<3,BitsWritten :13};_dcf [1216]=code {Code :119<<3,BitsWritten :13};_dcf [1280]=code {Code :2<<8|18<<3,BitsWritten :13};_dcf [1344]=code {Code :2<<8|19<<3,BitsWritten :13};
_dcf [1408]=code {Code :2<<8|20<<3,BitsWritten :13};_dcf [1472]=code {Code :2<<8|21<<3,BitsWritten :13};_dcf [1536]=code {Code :2<<8|26<<3,BitsWritten :13};_dcf [1600]=code {Code :2<<8|27<<3,BitsWritten :13};_dcf [1664]=code {Code :3<<8|4<<3,BitsWritten :13};
_dcf [1728]=code {Code :3<<8|5<<3,BitsWritten :13};_fa =make (map[int ]code );_fa [64]=code {Code :27<<(3+8),BitsWritten :5};_fa [128]=code {Code :18<<(3+8),BitsWritten :5};_fa [192]=code {Code :23<<(2+8),BitsWritten :6};_fa [256]=code {Code :55<<(1+8),BitsWritten :7};
_fa [320]=code {Code :54<<8,BitsWritten :8};_fa [384]=code {Code :55<<8,BitsWritten :8};_fa [448]=code {Code :100<<8,BitsWritten :8};_fa [512]=code {Code :101<<8,BitsWritten :8};_fa [576]=code {Code :104<<8,BitsWritten :8};_fa [640]=code {Code :103<<8,BitsWritten :8};
_fa [704]=code {Code :102<<8,BitsWritten :9};_fa [768]=code {Code :102<<8|1<<7,BitsWritten :9};_fa [832]=code {Code :105<<8,BitsWritten :9};_fa [896]=code {Code :105<<8|1<<7,BitsWritten :9};_fa [960]=code {Code :106<<8,BitsWritten :9};_fa [1024]=code {Code :106<<8|1<<7,BitsWritten :9};
_fa [1088]=code {Code :107<<8,BitsWritten :9};_fa [1152]=code {Code :107<<8|1<<7,BitsWritten :9};_fa [1216]=code {Code :108<<8,BitsWritten :9};_fa [1280]=code {Code :108<<8|1<<7,BitsWritten :9};_fa [1344]=code {Code :109<<8,BitsWritten :9};_fa [1408]=code {Code :109<<8|1<<7,BitsWritten :9};
_fa [1472]=code {Code :76<<8,BitsWritten :9};_fa [1536]=code {Code :76<<8|1<<7,BitsWritten :9};_fa [1600]=code {Code :77<<8,BitsWritten :9};_fa [1664]=code {Code :24<<(2+8),BitsWritten :6};_fa [1728]=code {Code :77<<8|1<<7,BitsWritten :9};_bc =make (map[int ]code );
_bc [1792]=code {Code :1<<8,BitsWritten :11};_bc [1856]=code {Code :1<<8|4<<5,BitsWritten :11};_bc [1920]=code {Code :1<<8|5<<5,BitsWritten :11};_bc [1984]=code {Code :1<<8|2<<4,BitsWritten :12};_bc [2048]=code {Code :1<<8|3<<4,BitsWritten :12};_bc [2112]=code {Code :1<<8|4<<4,BitsWritten :12};
_bc [2176]=code {Code :1<<8|5<<4,BitsWritten :12};_bc [2240]=code {Code :1<<8|6<<4,BitsWritten :12};_bc [2304]=code {Code :1<<8|7<<4,BitsWritten :12};_bc [2368]=code {Code :1<<8|12<<4,BitsWritten :12};_bc [2432]=code {Code :1<<8|13<<4,BitsWritten :12};
_bc [2496]=code {Code :1<<8|14<<4,BitsWritten :12};_bc [2560]=code {Code :1<<8|15<<4,BitsWritten :12};_fb =make (map[int ]byte );_fb [0]=0xFF;_fb [1]=0xFE;_fb [2]=0xFC;_fb [3]=0xF8;_fb [4]=0xF0;_fb [5]=0xE0;_fb [6]=0xC0;_fb [7]=0x80;_fb [8]=0x00;};func (_bad *Decoder )tryFetchEOL ()(bool ,error ){_bde ,_dgc :=_bad ._gae .ReadBits (12);
if _dgc !=nil {return false ,_dgc ;};return _bde ==0x1,nil ;};func (_egd *Decoder )decodeG32D ()error {_egd ._adf =_egd ._dcag ;_egd ._af ,_egd ._dd =_egd ._dd ,_egd ._af ;_cfd :=true ;var (_fc bool ;_beb int ;_cdc error ;);_egd ._dcag =0;_febg :for _beb < _egd ._ecf {_ggb :=_cd ._fdg ;
for {_fc ,_cdc =_egd ._gae .ReadBool ();if _cdc !=nil {return _cdc ;};_ggb =_ggb .walk (_fc );if _ggb ==nil {continue _febg ;};if !_ggb ._gbbc {continue ;};switch _ggb ._cegg {case _a :var _aac int ;if _cfd {_aac ,_cdc =_egd .decodeRun (_bf );}else {_aac ,_cdc =_egd .decodeRun (_g );
};if _cdc !=nil {return _cdc ;};_beb +=_aac ;_egd ._af [_egd ._dcag ]=_beb ;_egd ._dcag ++;if _cfd {_aac ,_cdc =_egd .decodeRun (_g );}else {_aac ,_cdc =_egd .decodeRun (_bf );};if _cdc !=nil {return _cdc ;};_beb +=_aac ;_egd ._af [_egd ._dcag ]=_beb ;
_egd ._dcag ++;case _fe :_fafb :=_egd .getNextChangingElement (_beb ,_cfd )+1;if _fafb >=_egd ._adf {_beb =_egd ._ecf ;}else {_beb =_egd ._dd [_fafb ];};default:_beg :=_egd .getNextChangingElement (_beb ,_cfd );if _beg >=_egd ._adf ||_beg ==-1{_beb =_egd ._ecf +_ggb ._cegg ;
}else {_beb =_egd ._dd [_beg ]+_ggb ._cegg ;};_egd ._af [_egd ._dcag ]=_beb ;_egd ._dcag ++;_cfd =!_cfd ;};continue _febg ;};};return nil ;};type code struct{Code uint16 ;BitsWritten int ;};func (_cbd *Decoder )decodeRowType6 ()error {if _cbd ._ed {_cbd ._gae .Align ();
};if _cbd ._ccbd {_cbd ._gae .Mark ();_ace ,_afb :=_cbd .tryFetchEOL ();if _afb !=nil {return _afb ;};if _ace {_ace ,_afb =_cbd .tryFetchEOL ();if _afb !=nil {return _afb ;};if _ace {return _f .EOF ;};};_cbd ._gae .Reset ();};return _cbd .decode2D ();};
var (_aa map[int ]code ;_aec map[int ]code ;_dcf map[int ]code ;_fa map[int ]code ;_bc map[int ]code ;_fb map[int ]byte ;_cedf =code {Code :1<<4,BitsWritten :12};_fge =code {Code :3<<3,BitsWritten :13};_de =code {Code :2<<3,BitsWritten :13};_cdde =code {Code :1<<12,BitsWritten :4};
_dbe =code {Code :1<<13,BitsWritten :3};_ffg =code {Code :1<<15,BitsWritten :1};_dcg =code {Code :3<<13,BitsWritten :3};_ba =code {Code :3<<10,BitsWritten :6};_ceb =code {Code :3<<9,BitsWritten :7};_bfa =code {Code :2<<13,BitsWritten :3};_faf =code {Code :2<<10,BitsWritten :6};
_dcc =code {Code :2<<9,BitsWritten :7};);var (_cg =_dc .New ("\u0063\u0063\u0069\u0074tf\u0061\u0078\u0020\u0063\u006f\u0072\u0072\u0075\u0070\u0074\u0065\u0064\u0020\u0052T\u0043");_dca =_dc .New ("\u0063\u0063\u0069\u0074tf\u0061\u0078\u0020\u0045\u004f\u004c\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075n\u0064");
);func (_efaf *Encoder )encodeG31D (_faab [][]byte )[]byte {var _ceg []byte ;_aaf :=0;for _ddc :=range _faab {if _efaf .Rows > 0&&!_efaf .EndOfBlock &&_ddc ==_efaf .Rows {break ;};_bff ,_ddba :=_eccg (_faab [_ddc ],_aaf ,_cedf );_ceg =_efaf .appendEncodedRow (_ceg ,_bff ,_aaf );
if _efaf .EncodedByteAlign {_ddba =0;};_aaf =_ddba ;};if _efaf .EndOfBlock {_aag ,_ :=_ceea (_aaf );_ceg =_efaf .appendEncodedRow (_ceg ,_aag ,_aaf );};return _ceg ;};func (_acac *treeNode )walk (_gde bool )*treeNode {if _gde {return _acac ._cbdg ;};return _acac ._fdab ;
};func (_fbd *Decoder )getNextChangingElement (_bfb int ,_ddb bool )int {_gcg :=0;if !_ddb {_gcg =1;};_bge :=int (uint32 (_fbd ._dccf )&0xFFFFFFFE)+_gcg ;if _bge > 2{_bge -=2;};if _bfb ==0{return _bge ;};for _fbdb :=_bge ;_fbdb < _fbd ._adf ;_fbdb +=2{if _bfb < _fbd ._dd [_fbdb ]{_fbd ._dccf =_fbdb ;
return _fbdb ;};};return -1;};func _ggf (_cebf int )([]byte ,int ){var _dbf []byte ;for _cga :=0;_cga < 6;_cga ++{_dbf ,_cebf =_gbg (_dbf ,_cebf ,_fge );};return _dbf ,_cebf %8;};func _fgfd (_fdb []byte ,_ddbc int )([]byte ,int ){return _gbg (_fdb ,_ddbc ,_cdde )};
var _feg =[...][]uint16 {{2,3,4,5,6,7},{128,8,9,64,10,11},{192,1664,16,17,13,14,15,1,12},{26,21,28,27,18,24,25,22,256,23,20,19},{33,34,35,36,37,38,31,32,29,53,54,39,40,41,42,43,44,30,61,62,63,0,320,384,45,59,60,46,49,50,51,52,55,56,57,58,448,512,640,576,47,48},{1472,1536,1600,1728,704,768,832,896,960,1024,1088,1152,1216,1280,1344,1408},{},{1792,1856,1920},{1984,2048,2112,2176,2240,2304,2368,2432,2496,2560}};
func _dbc (_ddcb []byte ,_ege ,_dcgf ,_aaeg int )([]byte ,int ){_gbff :=_bbad (_dcgf ,_aaeg );_ddcb ,_ege =_gbg (_ddcb ,_ege ,_gbff );return _ddcb ,_ege ;};func (_bef *Decoder )decode2D ()error {_bef ._adf =_bef ._dcag ;_bef ._af ,_bef ._dd =_bef ._dd ,_bef ._af ;
_faa :=true ;var (_acd bool ;_cea int ;_bcc error ;);_bef ._dcag =0;_bab :for _cea < _bef ._ecf {_aad :=_cd ._fdg ;for {_acd ,_bcc =_bef ._gae .ReadBool ();if _bcc !=nil {return _bcc ;};_aad =_aad .walk (_acd );if _aad ==nil {continue _bab ;};if !_aad ._gbbc {continue ;
};switch _aad ._cegg {case _a :var _egg int ;if _faa {_egg ,_bcc =_bef .decodeRun (_bf );}else {_egg ,_bcc =_bef .decodeRun (_g );};if _bcc !=nil {return _bcc ;};_cea +=_egg ;_bef ._af [_bef ._dcag ]=_cea ;_bef ._dcag ++;if _faa {_egg ,_bcc =_bef .decodeRun (_g );
}else {_egg ,_bcc =_bef .decodeRun (_bf );};if _bcc !=nil {return _bcc ;};_cea +=_egg ;_bef ._af [_bef ._dcag ]=_cea ;_bef ._dcag ++;case _fe :_cee :=_bef .getNextChangingElement (_cea ,_faa )+1;if _cee >=_bef ._adf {_cea =_bef ._ecf ;}else {_cea =_bef ._dd [_cee ];
};default:_dae :=_bef .getNextChangingElement (_cea ,_faa );if _dae >=_bef ._adf ||_dae ==-1{_cea =_bef ._ecf +_aad ._cegg ;}else {_cea =_bef ._dd [_dae ]+_aad ._cegg ;};_bef ._af [_bef ._dcag ]=_cea ;_bef ._dcag ++;_faa =!_faa ;};continue _bab ;};};return nil ;
};func (_cfa tiffType )String ()string {switch _cfa {case _cc :return "\u0074\u0069\u0066\u0066\u0054\u0079\u0070\u0065\u004d\u006f\u0064i\u0066\u0069\u0065\u0064\u0048\u0075\u0066\u0066\u006d\u0061n\u0052\u006c\u0065";case _gc :return "\u0074\u0069\u0066\u0066\u0054\u0079\u0070\u0065\u0054\u0034";
case _cfc :return "\u0074\u0069\u0066\u0066\u0054\u0079\u0070\u0065\u0054\u0036";default:return "\u0075n\u0064\u0065\u0066\u0069\u006e\u0065d";};};var (_cebg byte =1;_bdg byte =0;);type treeNode struct{_fdab *treeNode ;_cbdg *treeNode ;_cegg int ;_ceef bool ;
_gbbc bool ;};func _gcf (_fbac ,_ccba []byte ,_ddfa int ,_faaa bool )int {_cag :=_bgec (_ccba ,_ddfa );if _cag < len (_ccba )&&(_ddfa ==-1&&_ccba [_cag ]==_cebg ||_ddfa >=0&&_ddfa < len (_fbac )&&_fbac [_ddfa ]==_ccba [_cag ]||_ddfa >=len (_fbac )&&_faaa &&_ccba [_cag ]==_cebg ||_ddfa >=len (_fbac )&&!_faaa &&_ccba [_cag ]==_bdg ){_cag =_bgec (_ccba ,_cag );
};return _cag ;};func _dfc (_edd [][]byte )[][]byte {_bbb :=make ([]byte ,len (_edd [0]));for _gge :=range _bbb {_bbb [_gge ]=_cebg ;};_edd =append (_edd ,[]byte {});for _ggbc :=len (_edd )-1;_ggbc > 0;_ggbc --{_edd [_ggbc ]=_edd [_ggbc -1];};_edd [0]=_bbb ;
return _edd ;};func (_efd *Decoder )looseFetchEOL ()(bool ,error ){_ceca ,_abb :=_efd ._gae .ReadBits (12);if _abb !=nil {return false ,_abb ;};switch _ceca {case 0x1:return true ,nil ;case 0x0:for {_agea ,_faae :=_efd ._gae .ReadBool ();if _faae !=nil {return false ,_faae ;
};if _agea {return true ,nil ;};};default:return false ,nil ;};};func (_gef *Decoder )tryFetchRTC2D ()(_eef error ){_gef ._gae .Mark ();var _bbg bool ;for _dda :=0;_dda < 5;_dda ++{_bbg ,_eef =_gef .tryFetchEOL1 ();if _eef !=nil {if _dc .Is (_eef ,_f .EOF ){if _dda ==0{break ;
};return _cg ;};};if _bbg {continue ;};if _dda > 0{return _cg ;};break ;};if _bbg {return _f .EOF ;};_gef ._gae .Reset ();return _eef ;};var _cec =[...][]uint16 {{0x2,0x3},{0x2,0x3},{0x2,0x3},{0x3},{0x4,0x5},{0x4,0x5,0x7},{0x4,0x7},{0x18},{0x17,0x18,0x37,0x8,0xf},{0x17,0x18,0x28,0x37,0x67,0x68,0x6c,0x8,0xc,0xd},{0x12,0x13,0x14,0x15,0x16,0x17,0x1c,0x1d,0x1e,0x1f,0x24,0x27,0x28,0x2b,0x2c,0x33,0x34,0x35,0x37,0x38,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x5b,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0xc8,0xc9,0xca,0xcb,0xcc,0xcd,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xda,0xdb},{0x4a,0x4b,0x4c,0x4d,0x52,0x53,0x54,0x55,0x5a,0x5b,0x64,0x65,0x6c,0x6d,0x72,0x73,0x74,0x75,0x76,0x77}};
func (_fag *Encoder )encodeG32D (_bdb [][]byte )[]byte {var _fbab []byte ;var _ded int ;for _aef :=0;_aef < len (_bdb );_aef +=_fag .K {if _fag .Rows > 0&&!_fag .EndOfBlock &&_aef ==_fag .Rows {break ;};_aca ,_babd :=_eccg (_bdb [_aef ],_ded ,_fge );_fbab =_fag .appendEncodedRow (_fbab ,_aca ,_ded );
if _fag .EncodedByteAlign {_babd =0;};_ded =_babd ;for _ebae :=_aef +1;_ebae < (_aef +_fag .K )&&_ebae < len (_bdb );_ebae ++{if _fag .Rows > 0&&!_fag .EndOfBlock &&_ebae ==_fag .Rows {break ;};_bba ,_cbb :=_gbg (nil ,_ded ,_de );var _acdd ,_efc ,_def int ;
_bcb :=-1;for _bcb < len (_bdb [_ebae ]){_acdd =_bgec (_bdb [_ebae ],_bcb );_efc =_bfcf (_bdb [_ebae ],_bdb [_ebae -1],_bcb );_def =_bgec (_bdb [_ebae -1],_efc );if _def < _acdd {_bba ,_cbb =_fgfd (_bba ,_cbb );_bcb =_def ;}else {if _c .Abs (float64 (_efc -_acdd ))> 3{_bba ,_cbb ,_bcb =_adbg (_bdb [_ebae ],_bba ,_cbb ,_bcb ,_acdd );
}else {_bba ,_cbb =_dbc (_bba ,_cbb ,_acdd ,_efc );_bcb =_acdd ;};};};_fbab =_fag .appendEncodedRow (_fbab ,_bba ,_ded );if _fag .EncodedByteAlign {_cbb =0;};_ded =_cbb %8;};};if _fag .EndOfBlock {_edbb ,_ :=_ggf (_ded );_fbab =_fag .appendEncodedRow (_fbab ,_edbb ,_ded );
};return _fbab ;};func (_acbeb *Encoder )appendEncodedRow (_baa ,_eag []byte ,_gaeb int )[]byte {if len (_baa )> 0&&_gaeb !=0&&!_acbeb .EncodedByteAlign {_baa [len (_baa )-1]=_baa [len (_baa )-1]|_eag [0];_baa =append (_baa ,_eag [1:]...);}else {_baa =append (_baa ,_eag ...);
};return _baa ;};func _ecfde (_dccd int ,_adb bool )(code ,int ,bool ){if _dccd < 64{if _adb {return _aec [_dccd ],0,true ;};return _aa [_dccd ],0,true ;};_eac :=_dccd /64;if _eac > 40{return _bc [2560],_dccd -2560,false ;};if _eac > 27{return _bc [_eac *64],_dccd -_eac *64,false ;
};if _adb {return _fa [_eac *64],_dccd -_eac *64,false ;};return _dcf [_eac *64],_dccd -_eac *64,false ;};func _ecfd (_fcg int )([]byte ,int ){var _accd []byte ;for _adg :=0;_adg < 2;_adg ++{_accd ,_fcg =_gbg (_accd ,_fcg ,_cedf );};return _accd ,_fcg %8;
};var (_b *treeNode ;_be *treeNode ;_g *tree ;_bf *tree ;_e *tree ;_cd *tree ;_df =-2000;_fg =-1000;_fe =-3000;_a =-4000;);func (_dfg *Encoder )encodeG4 (_acg [][]byte )[]byte {_bdaa :=make ([][]byte ,len (_acg ));copy (_bdaa ,_acg );_bdaa =_dfc (_bdaa );
var _acc []byte ;var _dgf int ;for _gege :=1;_gege < len (_bdaa );_gege ++{if _dfg .Rows > 0&&!_dfg .EndOfBlock &&_gege ==(_dfg .Rows +1){break ;};var _ddbb []byte ;var _fec ,_cgf ,_acbb int ;_ccc :=_dgf ;_gcgf :=-1;for _gcgf < len (_bdaa [_gege ]){_fec =_bgec (_bdaa [_gege ],_gcgf );
_cgf =_bfcf (_bdaa [_gege ],_bdaa [_gege -1],_gcgf );_acbb =_bgec (_bdaa [_gege -1],_cgf );if _acbb < _fec {_ddbb ,_ccc =_gbg (_ddbb ,_ccc ,_cdde );_gcgf =_acbb ;}else {if _c .Abs (float64 (_cgf -_fec ))> 3{_ddbb ,_ccc ,_gcgf =_adbg (_bdaa [_gege ],_ddbb ,_ccc ,_gcgf ,_fec );
}else {_ddbb ,_ccc =_dbc (_ddbb ,_ccc ,_fec ,_cgf );_gcgf =_fec ;};};};_acc =_dfg .appendEncodedRow (_acc ,_ddbb ,_dgf );if _dfg .EncodedByteAlign {_ccc =0;};_dgf =_ccc %8;};if _dfg .EndOfBlock {_eab ,_ :=_ecfd (_dgf );_acc =_dfg .appendEncodedRow (_acc ,_eab ,_dgf );
};return _acc ;};func (_aaa *Decoder )Read (in []byte )(int ,error ){if _aaa ._cdg !=nil {return 0,_aaa ._cdg ;};_efa :=len (in );var (_afg int ;_ge int ;);for _efa !=0{if _aaa ._eae >=_aaa ._fba {if _edc :=_aaa .fetch ();_edc !=nil {_aaa ._cdg =_edc ;
return 0,_edc ;};};if _aaa ._fba ==-1{return _afg ,_f .EOF ;};switch {case _efa <=_aaa ._fba -_aaa ._eae :_ffe :=_aaa ._ccb [_aaa ._eae :_aaa ._eae +_efa ];for _ ,_cb :=range _ffe {if !_aaa ._ggg {_cb =^_cb ;};in [_ge ]=_cb ;_ge ++;};_afg +=len (_ffe );
_aaa ._eae +=len (_ffe );return _afg ,nil ;default:_dg :=_aaa ._ccb [_aaa ._eae :];for _ ,_bg :=range _dg {if !_aaa ._ggg {_bg =^_bg ;};in [_ge ]=_bg ;_ge ++;};_afg +=len (_dg );_aaa ._eae +=len (_dg );_efa -=len (_dg );};};return _afg ,nil ;};func (_gfd *Decoder )decodeRun (_gdf *tree )(int ,error ){var _aae int ;
_fgf :=_gdf ._fdg ;for {_edb ,_gag :=_gfd ._gae .ReadBool ();if _gag !=nil {return 0,_gag ;};_fgf =_fgf .walk (_edb );if _fgf ==nil {return 0,_dc .New ("\u0075\u006e\u006bno\u0077\u006e\u0020\u0063\u006f\u0064\u0065\u0020\u0069n\u0020H\u0075f\u0066m\u0061\u006e\u0020\u0052\u004c\u0045\u0020\u0073\u0074\u0072\u0065\u0061\u006d");
};if _fgf ._gbbc {_aae +=_fgf ._cegg ;switch {case _fgf ._cegg >=64:_fgf =_gdf ._fdg ;case _fgf ._cegg >=0:return _aae ,nil ;default:return _gfd ._ecf ,nil ;};};};};func _ceea (_ecc int )([]byte ,int ){var _ddaa []byte ;for _cbc :=0;_cbc < 6;_cbc ++{_ddaa ,_ecc =_gbg (_ddaa ,_ecc ,_cedf );
};return _ddaa ,_ecc %8;};func (_ebb *Decoder )tryFetchEOL1 ()(bool ,error ){_gegd ,_cgg :=_ebb ._gae .ReadBits (13);if _cgg !=nil {return false ,_cgg ;};return _gegd ==0x3,nil ;};func (_aadc *treeNode )set (_bfaf bool ,_bede *treeNode ){if !_bfaf {_aadc ._fdab =_bede ;
}else {_aadc ._cbdg =_bede ;};};func (_fac *tree )fillWithNode (_cac ,_gbfd int ,_cede *treeNode )error {_bgee :=_fac ._fdg ;for _cbbg :=0;_cbbg < _cac ;_cbbg ++{_ccf :=uint (_cac -1-_cbbg );_afbfb :=((_gbfd >>_ccf )&1)!=0;_egc :=_bgee .walk (_afbfb );
if _egc !=nil {if _egc ._gbbc {return _dc .New ("\u006e\u006f\u0064\u0065\u0020\u0069\u0073\u0020\u006c\u0065\u0061\u0066\u002c\u0020\u006eo\u0020o\u0074\u0068\u0065\u0072\u0020\u0066\u006f\u006c\u006c\u006f\u0077\u0069\u006e\u0067");};_bgee =_egc ;continue ;
};if _cbbg ==_cac -1{_egc =_cede ;}else {_egc =&treeNode {};};if _gbfd ==0{_egc ._ceef =true ;};_bgee .set (_afbfb ,_egc );_bgee =_egc ;};return nil ;};type Decoder struct{_ecf int ;_eg int ;_ad int ;_ccb []byte ;_dccb int ;_bfag bool ;_gd bool ;_ebgf bool ;
_ggg bool ;_gbf bool ;_ccbd bool ;_ed bool ;_fba int ;_eae int ;_dd []int ;_af []int ;_adf int ;_dcag int ;_dab int ;_dccf int ;_gae *_ce .Reader ;_eda tiffType ;_cdg error ;};func _gbg (_acbe []byte ,_caa int ,_dac code )([]byte ,int ){_eede :=0;for _eede < _dac .BitsWritten {_gdc :=_caa /8;
_dba :=_caa %8;if _gdc >=len (_acbe ){_acbe =append (_acbe ,0);};_egdc :=8-_dba ;_gdce :=_dac .BitsWritten -_eede ;if _egdc > _gdce {_egdc =_gdce ;};if _eede < 8{_acbe [_gdc ]=_acbe [_gdc ]|byte (_dac .Code >>uint (8+_dba -_eede ))&_fb [8-_egdc -_dba ];
}else {_acbe [_gdc ]=_acbe [_gdc ]|(byte (_dac .Code <<uint (_eede -8))&_fb [8-_egdc ])>>uint (_dba );};_caa +=_egdc ;_eede +=_egdc ;};return _acbe ,_caa ;};func _bbad (_ceaf ,_gggf int )code {var _baae code ;switch _gggf -_ceaf {case -1:_baae =_dcg ;case -2:_baae =_ba ;
case -3:_baae =_ceb ;case 0:_baae =_ffg ;case 1:_baae =_bfa ;case 2:_baae =_faf ;case 3:_baae =_dcc ;};return _baae ;};func _bga (_ebcg []byte ,_eed bool ,_bca int )(int ,int ){_bce :=0;for _bca < len (_ebcg ){if _eed {if _ebcg [_bca ]!=_cebg {break ;};
}else {if _ebcg [_bca ]!=_bdg {break ;};};_bce ++;_bca ++;};return _bce ,_bca ;};func (_bcga *Decoder )decodeRowType4 ()error {if !_bcga ._bfag {return _bcga .decoderRowType41D ();};if _bcga ._ed {_bcga ._gae .Align ();};_bcga ._gae .Mark ();_gba ,_ebc :=_bcga .tryFetchEOL ();
if _ebc !=nil {return _ebc ;};if !_gba &&_bcga ._gbf {_bcga ._dab ++;if _bcga ._dab > _bcga ._dccb {return _dca ;};_bcga ._gae .Reset ();};if !_gba {_bcga ._gae .Reset ();};_gab ,_ebc :=_bcga ._gae .ReadBool ();if _ebc !=nil {return _ebc ;};if _gab {if _gba &&_bcga ._ccbd {if _ebc =_bcga .tryFetchRTC2D ();
_ebc !=nil {return _ebc ;};};_ebc =_bcga .decode1D ();}else {_ebc =_bcga .decode2D ();};if _ebc !=nil {return _ebc ;};return nil ;};func _bgec (_dga []byte ,_ggd int )int {if _ggd >=len (_dga ){return _ggd ;};if _ggd < -1{_ggd =-1;};var _gbb byte ;if _ggd > -1{_gbb =_dga [_ggd ];
}else {_gbb =_cebg ;};_baaa :=_ggd +1;for _baaa < len (_dga ){if _dga [_baaa ]!=_gbb {break ;};_baaa ++;};return _baaa ;};func (_fafd *Decoder )decoderRowType41D ()error {if _fafd ._ed {_fafd ._gae .Align ();};_fafd ._gae .Mark ();var (_geg bool ;_agb error ;
);if _fafd ._gbf {_geg ,_agb =_fafd .tryFetchEOL ();if _agb !=nil {return _agb ;};if !_geg {return _dca ;};}else {_geg ,_agb =_fafd .looseFetchEOL ();if _agb !=nil {return _agb ;};};if !_geg {_fafd ._gae .Reset ();};if _geg &&_fafd ._ccbd {_fafd ._gae .Mark ();
for _ddfg :=0;_ddfg < 5;_ddfg ++{_geg ,_agb =_fafd .tryFetchEOL ();if _agb !=nil {if _dc .Is (_agb ,_f .EOF ){if _ddfg ==0{break ;};return _cg ;};};if _geg {continue ;};if _ddfg > 0{return _cg ;};break ;};if _geg {return _f .EOF ;};_fafd ._gae .Reset ();
};if _agb =_fafd .decode1D ();_agb !=nil {return _agb ;};return nil ;};func _eccg (_ca []byte ,_ddg int ,_dccfg code )([]byte ,int ){_fde :=true ;var _fed []byte ;_fed ,_ddg =_gbg (nil ,_ddg ,_dccfg );_cff :=0;var _eca int ;for _cff < len (_ca ){_eca ,_cff =_bga (_ca ,_fde ,_cff );
_fed ,_ddg =_fdf (_fed ,_ddg ,_eca ,_fde );_fde =!_fde ;};return _fed ,_ddg %8;};func (_gca *Decoder )decodeRowType2 ()error {if _gca ._ed {_gca ._gae .Align ();};if _ece :=_gca .decode1D ();_ece !=nil {return _ece ;};return nil ;};func (_bda *Decoder )decodeRow ()(_edcb error ){if !_bda ._ccbd &&_bda ._eg > 0&&_bda ._eg ==_bda ._ad {return _f .EOF ;
};switch _bda ._eda {case _cc :_edcb =_bda .decodeRowType2 ();case _gc :_edcb =_bda .decodeRowType4 ();case _cfc :_edcb =_bda .decodeRowType6 ();};if _edcb !=nil {return _edcb ;};_ecb :=0;_afa :=true ;_bda ._dccf =0;for _ffeb :=0;_ffeb < _bda ._dcag ;_ffeb ++{_fda :=_bda ._ecf ;
if _ffeb !=_bda ._dcag {_fda =_bda ._af [_ffeb ];};if _fda > _bda ._ecf {_fda =_bda ._ecf ;};_ddf :=_ecb /8;for _ecb %8!=0&&_fda -_ecb > 0{var _bcg byte ;if !_afa {_bcg =1<<uint (7-(_ecb %8));};_bda ._ccb [_ddf ]|=_bcg ;_ecb ++;};if _ecb %8==0{_ddf =_ecb /8;
var _deb byte ;if !_afa {_deb =0xff;};for _fda -_ecb > 7{_bda ._ccb [_ddf ]=_deb ;_ecb +=8;_ddf ++;};};for _fda -_ecb > 0{if _ecb %8==0{_bda ._ccb [_ddf ]=0;};var _ag byte ;if !_afa {_ag =1<<uint (7-(_ecb %8));};_bda ._ccb [_ddf ]|=_ag ;_ecb ++;};_afa =!_afa ;
};if _ecb !=_bda ._ecf {return _dc .New ("\u0073\u0075\u006d\u0020\u006f\u0066 \u0072\u0075\u006e\u002d\u006c\u0065\u006e\u0067\u0074\u0068\u0073\u0020\u0064\u006f\u0065\u0073\u0020\u006e\u006f\u0074 \u0065\u0071\u0075\u0061\u006c\u0020\u0073\u0063\u0061\u006e\u0020\u006c\u0069\u006ee\u0020w\u0069\u0064\u0074\u0068");
};_bda ._fba =(_ecb +7)/8;_bda ._ad ++;return nil ;};func (_aecc *Decoder )fetch ()error {if _aecc ._fba ==-1{return nil ;};if _aecc ._eae < _aecc ._fba {return nil ;};_aecc ._fba =0;_fd :=_aecc .decodeRow ();if _fd !=nil {if !_dc .Is (_fd ,_f .EOF ){return _fd ;
};if _aecc ._fba !=0{return _fd ;};_aecc ._fba =-1;};_aecc ._eae =0;return nil ;};func _adbg (_ffc ,_dbfa []byte ,_eea ,_gaba ,_ggfd int )([]byte ,int ,int ){_dgg :=_bgec (_ffc ,_ggfd );_bdd :=_gaba >=0&&_ffc [_gaba ]==_cebg ||_gaba ==-1;_dbfa ,_eea =_gbg (_dbfa ,_eea ,_dbe );
var _bcbd int ;if _gaba > -1{_bcbd =_ggfd -_gaba ;}else {_bcbd =_ggfd -_gaba -1;};_dbfa ,_eea =_fdf (_dbfa ,_eea ,_bcbd ,_bdd );_bdd =!_bdd ;_cba :=_dgg -_ggfd ;_dbfa ,_eea =_fdf (_dbfa ,_eea ,_cba ,_bdd );_gaba =_dgg ;return _dbfa ,_eea ,_gaba ;};func (_abe *Decoder )decode1D ()error {var (_dgb int ;
_gegc error ;);_age :=true ;_abe ._dcag =0;for {var _ecg int ;if _age {_ecg ,_gegc =_abe .decodeRun (_bf );}else {_ecg ,_gegc =_abe .decodeRun (_g );};if _gegc !=nil {return _gegc ;};_dgb +=_ecg ;_abe ._af [_abe ._dcag ]=_dgb ;_abe ._dcag ++;_age =!_age ;
if _dgb >=_abe ._ecf {break ;};};return nil ;};var _ga =[...][]uint16 {{0x7,0x8,0xb,0xc,0xe,0xf},{0x12,0x13,0x14,0x1b,0x7,0x8},{0x17,0x18,0x2a,0x2b,0x3,0x34,0x35,0x7,0x8},{0x13,0x17,0x18,0x24,0x27,0x28,0x2b,0x3,0x37,0x4,0x8,0xc},{0x12,0x13,0x14,0x15,0x16,0x17,0x1a,0x1b,0x2,0x24,0x25,0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x3,0x32,0x33,0x34,0x35,0x36,0x37,0x4,0x4a,0x4b,0x5,0x52,0x53,0x54,0x55,0x58,0x59,0x5a,0x5b,0x64,0x65,0x67,0x68,0xa,0xb},{0x98,0x99,0x9a,0x9b,0xcc,0xcd,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8,0xd9,0xda,0xdb},{},{0x8,0xc,0xd},{0x12,0x13,0x14,0x15,0x16,0x17,0x1c,0x1d,0x1e,0x1f}};
const (_ tiffType =iota ;_cc ;_gc ;_cfc ;);type Encoder struct{K int ;EndOfLine bool ;EncodedByteAlign bool ;Columns int ;Rows int ;EndOfBlock bool ;BlackIs1 bool ;DamagedRowsBeforeError int ;};func (_aed *Encoder )Encode (pixels [][]byte )[]byte {if _aed .BlackIs1 {_cebg =0;
_bdg =1;}else {_cebg =1;_bdg =0;};if _aed .K ==0{return _aed .encodeG31D (pixels );};if _aed .K > 0{return _aed .encodeG32D (pixels );};if _aed .K < 0{return _aed .encodeG4 (pixels );};return nil ;};type tree struct{_fdg *treeNode };