//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package cmap ;import (_gc "bufio";_e "bytes";_g "encoding/hex";_f "errors";_b "fmt";_df "github.com/unidoc/unipdf/v3/common";_ge "github.com/unidoc/unipdf/v3/core";_fb "github.com/unidoc/unipdf/v3/internal/cmap/bcmaps";_c "io";_af "sort";_bd "strconv";
_gf "strings";_a "unicode/utf16";);type CIDSystemInfo struct{Registry string ;Ordering string ;Supplement int ;};func (_gaad *cMapParser )parseOperand ()(cmapOperand ,error ){_bfba :=cmapOperand {};_bgc :=_e .Buffer {};for {_fba ,_eccb :=_gaad ._cfg .Peek (1);
if _eccb !=nil {if _eccb ==_c .EOF {break ;};return _bfba ,_eccb ;};if _ge .IsDelimiter (_fba [0]){break ;};if _ge .IsWhiteSpace (_fba [0]){break ;};_baac ,_ :=_gaad ._cfg .ReadByte ();_bgc .WriteByte (_baac );};if _bgc .Len ()==0{return _bfba ,_b .Errorf ("\u0069\u006e\u0076al\u0069\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064\u0020\u0028\u0065\u006d\u0070\u0074\u0079\u0029");
};_bfba .Operand =_bgc .String ();return _bfba ,nil ;};type charRange struct{_gfc CharCode ;_gd CharCode ;};func (cmap *CMap )Bytes ()[]byte {_df .Log .Trace ("\u0063\u006d\u0061\u0070.B\u0079\u0074\u0065\u0073\u003a\u0020\u0063\u006d\u0061\u0070\u003d\u0025\u0073",cmap .String ());
if len (cmap ._ad )> 0{return cmap ._ad ;};cmap ._ad =[]byte (_gf .Join ([]string {_dged ,cmap .toBfData (),_gdca },"\u000a"));return cmap ._ad ;};func (cmap *CMap )matchCode (_dae []byte )(_bga CharCode ,_bade int ,_dge bool ){for _gcga :=0;_gcga < _bb ;
_gcga ++{if _gcga < len (_dae ){_bga =_bga <<8|CharCode (_dae [_gcga ]);_bade ++;};_dge =cmap .inCodespace (_bga ,_gcga +1);if _dge {return _bga ,_bade ,true ;};};_df .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063o\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0020m\u0061t\u0063\u0068\u0065\u0073\u0020\u0062\u0079\u0074\u0065\u0073\u003d\u005b\u0025\u0020\u0030\u0032\u0078\u005d=\u0025\u0023\u0071\u0020\u0063\u006d\u0061\u0070\u003d\u0025\u0073",_dae ,string (_dae ),cmap );
return 0,0,false ;};func (cmap *CMap )parseType ()error {_gdcb :=0;_fgg :=false ;for _fcd :=0;_fcd < 3&&!_fgg ;_fcd ++{_gda ,_dcg :=cmap .parseObject ();if _dcg !=nil {return _dcg ;};switch _fec :=_gda .(type ){case cmapOperand :switch _fec .Operand {case "\u0064\u0065\u0066":_fgg =true ;
default:_df .Log .Error ("\u0070\u0061r\u0073\u0065\u0054\u0079\u0070\u0065\u003a\u0020\u0073\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020\u006f=%\u0023\u0076",_gda );return ErrBadCMap ;};case cmapInt :_gdcb =int (_fec ._gggd );
};};cmap ._gba =_gdcb ;return nil ;};func _abc (_ga string )string {_cfa :=[]rune (_ga );_bbd :=make ([]string ,len (_cfa ));for _gaa ,_aab :=range _cfa {_bbd [_gaa ]=_b .Sprintf ("\u0025\u0030\u0034\u0078",_aab );};return _b .Sprintf ("\u003c\u0025\u0073\u003e",_gf .Join (_bbd ,""));
};func (cmap *CMap )parseSystemInfo ()error {_gfa :=false ;_aed :=false ;_aag :="";_bgf :=false ;_cde :=CIDSystemInfo {};for _addc :=0;_addc < 50&&!_bgf ;_addc ++{_fbe ,_dfd :=cmap .parseObject ();if _dfd !=nil {return _dfd ;};switch _gfe :=_fbe .(type ){case cmapDict :_baf :=_gfe .Dict ;
_ced ,_fbcc :=_baf ["\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079"];if !_fbcc {_df .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_gfad ,_fbcc :=_ced .(cmapString );
if !_fbcc {_df .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_cde .Registry =_gfad .String ;_ced ,_fbcc =_baf ["\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067"];
if !_fbcc {_df .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_gfad ,_fbcc =_ced .(cmapString );if !_fbcc {_df .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");
return ErrBadCMap ;};_cde .Ordering =_gfad .String ;_adc ,_fbcc :=_baf ["\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074"];if !_fbcc {_df .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");
return ErrBadCMap ;};_agfg ,_fbcc :=_adc .(cmapInt );if !_fbcc {_df .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_cde .Supplement =int (_agfg ._gggd );
_bgf =true ;case cmapOperand :switch _gfe .Operand {case "\u0062\u0065\u0067i\u006e":_gfa =true ;case "\u0065\u006e\u0064":_bgf =true ;case "\u0064\u0065\u0066":_aed =false ;};case cmapName :if _gfa {_aag =_gfe .Name ;_aed =true ;};case cmapString :if _aed {switch _aag {case "\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079":_cde .Registry =_gfe .String ;
case "\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067":_cde .Ordering =_gfe .String ;};};case cmapInt :if _aed {switch _aag {case "\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074":_cde .Supplement =int (_gfe ._gggd );};};};};if !_bgf {_df .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0050\u0061\u0072\u0073\u0065\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006e\u0066\u006f\u0020\u0064\u0069\u0063\u0074\u0020\u0069\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u006c\u0079");
return ErrBadCMap ;};cmap ._bf =_cde ;return nil ;};func (cmap *CMap )CharcodeToCID (code CharCode )(CharCode ,bool ){_cdb ,_dea :=cmap ._dc [code ];return _cdb ,_dea ;};func (cmap *CMap )computeInverseMappings (){for _ed ,_gbd :=range cmap ._dc {if _ec ,_gga :=cmap ._fbg [_gbd ];
!_gga ||(_gga &&_ec > _ed ){cmap ._fbg [_gbd ]=_ed ;};};for _dgb ,_cb :=range cmap ._bad {if _dca ,_bea :=cmap ._bff [_cb ];!_bea ||(_bea &&_dca > _dgb ){cmap ._bff [_cb ]=_dgb ;};};_af .Slice (cmap ._gfg ,func (_fc ,_cbb int )bool {return cmap ._gfg [_fc ].Low < cmap ._gfg [_cbb ].Low });
};func (cmap *CMap )CIDSystemInfo ()CIDSystemInfo {return cmap ._bf };const (_fdaa ="\u0043\u0049\u0044\u0053\u0079\u0073\u0074\u0065\u006d\u0049\u006e\u0066\u006f";_gcd ="\u0062e\u0067\u0069\u006e\u0063\u006d\u0061p";_gdeb ="\u0065n\u0064\u0063\u006d\u0061\u0070";
_ccg ="\u0062\u0065\u0067\u0069nc\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0072\u0061\u006e\u0067\u0065";_acbg ="\u0065\u006e\u0064\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065r\u0061\u006e\u0067\u0065";_gfcc ="b\u0065\u0067\u0069\u006e\u0062\u0066\u0063\u0068\u0061\u0072";
_bcb ="\u0065n\u0064\u0062\u0066\u0063\u0068\u0061r";_ecc ="\u0062\u0065\u0067i\u006e\u0062\u0066\u0072\u0061\u006e\u0067\u0065";_gdf ="\u0065\u006e\u0064\u0062\u0066\u0072\u0061\u006e\u0067\u0065";_cfaf ="\u0062\u0065\u0067\u0069\u006e\u0063\u0069\u0064\u0072\u0061\u006e\u0067\u0065";
_cdg ="e\u006e\u0064\u0063\u0069\u0064\u0072\u0061\u006e\u0067\u0065";_bfb ="\u0075s\u0065\u0063\u006d\u0061\u0070";_dba ="\u0057\u004d\u006fd\u0065";_aaf ="\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065";_aeed ="\u0043\u004d\u0061\u0070\u0054\u0079\u0070\u0065";
_cfdc ="C\u004d\u0061\u0070\u0056\u0065\u0072\u0073\u0069\u006f\u006e";);func (cmap *CMap )parseVersion ()error {_dagd :="";_cge :=false ;for _efg :=0;_efg < 3&&!_cge ;_efg ++{_cea ,_agd :=cmap .parseObject ();if _agd !=nil {return _agd ;};switch _cgc :=_cea .(type ){case cmapOperand :switch _cgc .Operand {case "\u0064\u0065\u0066":_cge =true ;
default:_df .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0070\u0061\u0072\u0073\u0065\u0056e\u0072\u0073\u0069\u006f\u006e\u003a \u0073\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020o\u003d\u0025\u0023\u0076",_cea );
return ErrBadCMap ;};case cmapInt :_dagd =_b .Sprintf ("\u0025\u0064",_cgc ._gggd );case cmapFloat :_dagd =_b .Sprintf ("\u0025\u0066",_cgc ._afea );case cmapString :_dagd =_cgc .String ;default:_df .Log .Debug ("\u0045\u0052RO\u0052\u003a\u0020p\u0061\u0072\u0073\u0065Ver\u0073io\u006e\u003a\u0020\u0042\u0061\u0064\u0020ty\u0070\u0065\u002e\u0020\u006f\u003d\u0025#\u0076",_cea );
};};cmap ._gcgc =_dagd ;return nil ;};type cmapOperand struct{Operand string ;};func (_ddc *cMapParser )skipSpaces ()(int ,error ){_egc :=0;for {_ffg ,_cbbfa :=_ddc ._cfg .Peek (1);if _cbbfa !=nil {return 0,_cbbfa ;};if _ge .IsWhiteSpace (_ffg [0]){_ddc ._cfg .ReadByte ();
_egc ++;}else {break ;};};return _egc ,nil ;};type integer struct{_gada bool ;_fee int ;};func (cmap *CMap )CharcodeToUnicode (code CharCode )(string ,bool ){if _fge ,_afb :=cmap ._bad [code ];_afb {return _fge ,true ;};return MissingCodeString ,false ;
};func (_gea *cMapParser )parseNumber ()(cmapObject ,error ){_agagf ,_gbf :=_ge .ParseNumber (_gea ._cfg );if _gbf !=nil {return nil ,_gbf ;};switch _dcga :=_agagf .(type ){case *_ge .PdfObjectFloat :return cmapFloat {float64 (*_dcga )},nil ;case *_ge .PdfObjectInteger :return cmapInt {int64 (*_dcga )},nil ;
};return nil ,_b .Errorf ("\u0075n\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0054",_agagf );};func NewCIDSystemInfo (obj _ge .PdfObject )(_cg CIDSystemInfo ,_dg error ){_bg ,_gb :=_ge .GetDict (obj );
if !_gb {return CIDSystemInfo {},_ge .ErrTypeError ;};_cd ,_gb :=_ge .GetStringVal (_bg .Get ("\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079"));if !_gb {return CIDSystemInfo {},_ge .ErrTypeError ;};_be ,_gb :=_ge .GetStringVal (_bg .Get ("\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067"));
if !_gb {return CIDSystemInfo {},_ge .ErrTypeError ;};_ab ,_gb :=_ge .GetIntVal (_bg .Get ("\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074"));if !_gb {return CIDSystemInfo {},_ge .ErrTypeError ;};return CIDSystemInfo {Registry :_cd ,Ordering :_be ,Supplement :_ab },nil ;
};func LoadPredefinedCMap (name string )(*CMap ,error ){cmap ,_ac :=_fd (name );if _ac !=nil {return nil ,_ac ;};if cmap ._gee ==""{cmap .computeInverseMappings ();return cmap ,nil ;};_cc ,_ac :=_fd (cmap ._gee );if _ac !=nil {return nil ,_ac ;};for _ag ,_ce :=range _cc ._dc {if _ ,_afc :=cmap ._dc [_ag ];
!_afc {cmap ._dc [_ag ]=_ce ;};};cmap ._gfg =append (cmap ._gfg ,_cc ._gfg ...);cmap .computeInverseMappings ();return cmap ,nil ;};func (cmap *CMap )StringToCID (s string )(CharCode ,bool ){_aa ,_de :=cmap ._bff [s ];return _aa ,_de };type CMap struct{*cMapParser ;
_bde string ;_eg int ;_gba int ;_gcgc string ;_gee string ;_bf CIDSystemInfo ;_gfg []Codespace ;_dc map[CharCode ]CharCode ;_fbg map[CharCode ]CharCode ;_bad map[CharCode ]string ;_bff map[string ]CharCode ;_ad []byte ;_egf *_ge .PdfObjectStream ;_cdd integer ;
};func (_cabg *cMapParser )parseDict ()(cmapDict ,error ){_df .Log .Trace ("\u0052\u0065\u0061\u0064\u0069\u006e\u0067\u0020\u0050\u0044\u0046\u0020D\u0069\u0063\u0074\u0021");_aegd :=_aafe ();_bafg ,_ :=_cabg ._cfg .ReadByte ();if _bafg !='<'{return _aegd ,ErrBadCMapDict ;
};_bafg ,_ =_cabg ._cfg .ReadByte ();if _bafg !='<'{return _aegd ,ErrBadCMapDict ;};for {_cabg .skipSpaces ();_gfag ,_fgd :=_cabg ._cfg .Peek (2);if _fgd !=nil {return _aegd ,_fgd ;};if (_gfag [0]=='>')&&(_gfag [1]=='>'){_cabg ._cfg .ReadByte ();_cabg ._cfg .ReadByte ();
break ;};_ddd ,_fgd :=_cabg .parseName ();_df .Log .Trace ("\u004be\u0079\u003a\u0020\u0025\u0073",_ddd .Name );if _fgd !=nil {_df .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u0052\u0065\u0074\u0075\u0072\u006e\u0069\u006e\u0067\u0020\u006e\u0061\u006d\u0065\u002e\u0020\u0065\u0072r=\u0025\u0076",_fgd );
return _aegd ,_fgd ;};_cabg .skipSpaces ();_ebd ,_fgd :=_cabg .parseObject ();if _fgd !=nil {return _aegd ,_fgd ;};_aegd .Dict [_ddd .Name ]=_ebd ;_cabg .skipSpaces ();_gfag ,_fgd =_cabg ._cfg .Peek (3);if _fgd !=nil {return _aegd ,_fgd ;};if string (_gfag )=="\u0064\u0065\u0066"{_cabg ._cfg .Discard (3);
};};return _aegd ,nil ;};func (cmap *CMap )BytesToCharcodes (data []byte )([]CharCode ,bool ){var _cgd []CharCode ;if cmap ._eg ==8{for _ ,_fbdc :=range data {_cgd =append (_cgd ,CharCode (_fbdc ));};return _cgd ,true ;};for _ee :=0;_ee < len (data );{_bac ,_aca ,_acb :=cmap .matchCode (data [_ee :]);
if !_acb {_df .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0074\u0020\u0069\u003d\u0025\u0064\u0020\u0062\u0079\u0074\u0065\u0073\u003d\u005b\u0025\u0020\u0030\u0032\u0078\u005d\u003d\u0025\u0023\u0071",_ee ,data ,string (data ));
return _cgd ,false ;};_cgd =append (_cgd ,_bac );_ee +=_aca ;};return _cgd ,true ;};func (_cfae *cMapParser )parseArray ()(cmapArray ,error ){_cbg :=cmapArray {};_cbg .Array =[]cmapObject {};_cfae ._cfg .ReadByte ();for {_cfae .skipSpaces ();_dbdc ,_ggca :=_cfae ._cfg .Peek (1);
if _ggca !=nil {return _cbg ,_ggca ;};if _dbdc [0]==']'{_cfae ._cfg .ReadByte ();break ;};_bbe ,_ggca :=_cfae .parseObject ();if _ggca !=nil {return _cbg ,_ggca ;};_cbg .Array =append (_cbg .Array ,_bbe );};return _cbg ,nil ;};func (cmap *CMap )parseCodespaceRange ()error {for {_fbccc ,_cgf :=cmap .parseObject ();
if _cgf !=nil {if _cgf ==_c .EOF {break ;};return _cgf ;};_cca ,_gaag :=_fbccc .(cmapHexString );if !_gaag {if _fad ,_fcda :=_fbccc .(cmapOperand );_fcda {if _fad .Operand ==_acbg {return nil ;};return _f .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");
};};_fbccc ,_cgf =cmap .parseObject ();if _cgf !=nil {if _cgf ==_c .EOF {break ;};return _cgf ;};_ggb ,_gaag :=_fbccc .(cmapHexString );if !_gaag {return _f .New ("\u006e\u006f\u006e-\u0068\u0065\u0078\u0020\u0068\u0069\u0067\u0068");};if len (_cca ._addb )!=len (_ggb ._addb ){return _f .New ("\u0075\u006e\u0065\u0071\u0075\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0062\u0079\u0074\u0065\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065");
};_fca :=_ceeb (_cca );_ggbb :=_ceeb (_ggb );if _ggbb < _fca {_df .Log .Debug ("\u0045R\u0052\u004fR\u003a\u0020\u0042\u0061d\u0020\u0063\u006fd\u0065\u0073\u0070\u0061\u0063\u0065\u002e\u0020\u006cow\u003d\u0030\u0078%\u0030\u0032x\u0020\u0068\u0069\u0067\u0068\u003d0\u0078\u00250\u0032\u0078",_fca ,_ggbb );
return ErrBadCMap ;};_cabd :=_ggb ._gbg ;_fdgd :=Codespace {NumBytes :_cabd ,Low :_fca ,High :_ggbb };cmap ._gfg =append (cmap ._gfg ,_fdgd );_df .Log .Trace ("\u0043\u006f\u0064e\u0073\u0070\u0061\u0063e\u0020\u006c\u006f\u0077\u003a\u0020\u0030x\u0025\u0058\u002c\u0020\u0068\u0069\u0067\u0068\u003a\u0020\u0030\u0078\u0025\u0058",_fca ,_ggbb );
};if len (cmap ._gfg )==0{_df .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u0020\u0069\u006e\u0020\u0063ma\u0070\u002e");return ErrBadCMap ;};return nil ;};func _acae (_bdea ,_dcgd int )int {if _bdea < _dcgd {return _bdea ;
};return _dcgd ;};func (cmap *CMap )WMode ()(int ,bool ){return cmap ._cdd ._fee ,cmap ._cdd ._gada };type cMapParser struct{_cfg *_gc .Reader };func (cmap *CMap )CIDToCharcode (cid CharCode )(CharCode ,bool ){_bfa ,_bae :=cmap ._fbg [cid ];return _bfa ,_bae ;
};type cmapName struct{Name string ;};func (cmap *CMap )Name ()string {return cmap ._bde };func _gcdf (_dcda cmapHexString )[]rune {if len (_dcda ._addb )==1{return []rune {rune (_dcda ._addb [0])};};_ffed :=_dcda ._addb ;if len (_ffed )%2!=0{_ffed =append (_ffed ,0);
_df .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0068\u0065\u0078\u0054\u006f\u0052\u0075\u006e\u0065\u0073\u002e\u0020\u0050\u0061\u0064\u0064\u0069\u006e\u0067\u0020\u0073\u0068\u0065\u0078\u003d\u0025#\u0076\u0020\u0074\u006f\u0020\u0025\u002b\u0076",_dcda ,_ffed );
};_daac :=len (_ffed )>>1;_cgb :=make ([]uint16 ,_daac );for _ddbf :=0;_ddbf < _daac ;_ddbf ++{_cgb [_ddbf ]=uint16 (_ffed [_ddbf <<1])<<8+uint16 (_ffed [_ddbf <<1+1]);};_eefe :=_a .Decode (_cgb );return _eefe ;};func NewToUnicodeCMap (codeToRune map[CharCode ]rune )*CMap {_ae :=make (map[CharCode ]string ,len (codeToRune ));
for _bec ,_gcb :=range codeToRune {_ae [_bec ]=string (_gcb );};cmap :=&CMap {_bde :"\u0041d\u006fb\u0065\u002d\u0049\u0064\u0065n\u0074\u0069t\u0079\u002d\u0055\u0043\u0053",_gba :2,_eg :16,_bf :CIDSystemInfo {Registry :"\u0041\u0064\u006fb\u0065",Ordering :"\u0055\u0043\u0053",Supplement :0},_gfg :[]Codespace {{Low :0,High :0xffff}},_bad :_ae ,_bff :make (map[string ]CharCode ,len (codeToRune )),_dc :make (map[CharCode ]CharCode ,len (codeToRune )),_fbg :make (map[CharCode ]CharCode ,len (codeToRune ))};
cmap .computeInverseMappings ();return cmap ;};func LoadCmapFromData (data []byte ,isSimple bool )(*CMap ,error ){_df .Log .Trace ("\u004c\u006fa\u0064\u0043\u006d\u0061\u0070\u0046\u0072\u006f\u006d\u0044\u0061\u0074\u0061\u003a\u0020\u0069\u0073\u0053\u0069\u006d\u0070\u006ce=\u0025\u0074",isSimple );
cmap :=_bba (isSimple );cmap .cMapParser =_fdc (data );_ff :=cmap .parse ();if _ff !=nil {return nil ,_ff ;};if len (cmap ._gfg )==0{if cmap ._gee !=""{return cmap ,nil ;};_df .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u002e\u0020\u0063\u006d\u0061p=\u0025\u0073",cmap );
};cmap .computeInverseMappings ();return cmap ,nil ;};func _bba (_gdd bool )*CMap {_bbc :=16;if _gdd {_bbc =8;};return &CMap {_eg :_bbc ,_dc :make (map[CharCode ]CharCode ),_fbg :make (map[CharCode ]CharCode ),_bad :make (map[CharCode ]string ),_bff :make (map[string ]CharCode )};
};func _dgba (_baa string )rune {_gdc :=[]rune (_baa );return _gdc [len (_gdc )-1]};type CharCode uint32 ;func (cmap *CMap )parseCIDRange ()error {for {_deag ,_gdae :=cmap .parseObject ();if _gdae !=nil {if _gdae ==_c .EOF {break ;};return _gdae ;};_cae ,_dfbe :=_deag .(cmapHexString );
if !_dfbe {if _aea ,_aedc :=_deag .(cmapOperand );_aedc {if _aea .Operand ==_cdg {return nil ;};return _f .New ("\u0063\u0069\u0064\u0020\u0069\u006e\u0074\u0065\u0072\u0076\u0061\u006c\u0020s\u0074\u0061\u0072\u0074\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u0068\u0065\u0078\u0020\u0073t\u0072\u0069\u006e\u0067");
};};_gdce :=_ceeb (_cae );_deag ,_gdae =cmap .parseObject ();if _gdae !=nil {if _gdae ==_c .EOF {break ;};return _gdae ;};_egfc ,_dfbe :=_deag .(cmapHexString );if !_dfbe {return _f .New ("\u0063\u0069d\u0020\u0069\u006e\u0074e\u0072\u0076a\u006c\u0020\u0065\u006e\u0064\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u0068\u0065\u0078\u0020\u0073t\u0072\u0069\u006e\u0067");
};if len (_cae ._addb )!=len (_egfc ._addb ){return _f .New ("\u0075\u006e\u0065\u0071\u0075\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0062\u0079\u0074\u0065\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065");};_dad :=_ceeb (_egfc );
if _gdce > _dad {_df .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0043\u0049\u0044\u0020\u0072\u0061\u006e\u0067\u0065\u002e\u0020\u0073t\u0061\u0072\u0074\u003d\u0030\u0078\u0025\u0030\u0032\u0078\u0020\u0065\u006e\u0064=\u0030x\u0025\u0030\u0032\u0078",_gdce ,_dad );
return ErrBadCMap ;};_deag ,_gdae =cmap .parseObject ();if _gdae !=nil {if _gdae ==_c .EOF {break ;};return _gdae ;};_bag ,_dfbe :=_deag .(cmapInt );if !_dfbe {return _f .New ("\u0063\u0069\u0064\u0020\u0073t\u0061\u0072\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006d\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u006e\u0020\u0064\u0065\u0063\u0069\u006d\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};if _bag ._gggd < 0{return _f .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u0063\u0069\u0064\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0076\u0061\u006c\u0075\u0065");};_afcb :=_bag ._gggd ;for _cebf :=_gdce ;_cebf <=_dad ;_cebf ++{cmap ._dc [_cebf ]=CharCode (_afcb );
_afcb ++;};_df .Log .Trace ("C\u0049\u0044\u0020\u0072\u0061\u006eg\u0065\u003a\u0020\u003c\u0030\u0078\u0025\u0058\u003e \u003c\u0030\u0078%\u0058>\u0020\u0025\u0064",_gdce ,_dad ,_bag ._gggd );};return nil ;};func (cmap *CMap )parseBfchar ()error {for {_ecda ,_edeg :=cmap .parseObject ();
if _edeg !=nil {if _edeg ==_c .EOF {break ;};return _edeg ;};var _cbe CharCode ;switch _feb :=_ecda .(type ){case cmapOperand :if _feb .Operand ==_bcb {return nil ;};return _f .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");
case cmapHexString :_cbe =_ceeb (_feb );default:return _f .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065");};_ecda ,_edeg =cmap .parseObject ();if _edeg !=nil {if _edeg ==_c .EOF {break ;};return _edeg ;};var _dfa []rune ;
switch _dffe :=_ecda .(type ){case cmapOperand :if _dffe .Operand ==_bcb {return nil ;};_df .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0055\u006e\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020o\u0070\u0065\u0072\u0061\u006e\u0064\u002e\u0020\u0025\u0023\u0076",_dffe );
return ErrBadCMap ;case cmapHexString :_dfa =_gcdf (_dffe );case cmapName :_df .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020U\u006e\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064 \u006e\u0061\u006de\u002e \u0025\u0023\u0076",_dffe );_dfa =[]rune {MissingCodeRune };
default:_df .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020U\u006e\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064 \u0074\u0079\u0070e\u002e \u0025\u0023\u0076",_ecda );return ErrBadCMap ;};cmap ._bad [_cbe ]=string (_dfa );};return nil ;};type cmapHexString struct{_gbg int ;
_addb []byte ;};func (cmap *CMap )inCodespace (_gde CharCode ,_aeg int )bool {for _ ,_agf :=range cmap ._gfg {if _agf .Low <=_gde &&_gde <=_agf .High &&_aeg ==_agf .NumBytes {return true ;};};return false ;};var (ErrBadCMap =_f .New ("\u0062\u0061\u0064\u0020\u0063\u006d\u0061\u0070");
ErrBadCMapComment =_f .New ("c\u006f\u006d\u006d\u0065\u006e\u0074 \u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0073\u0074a\u0072\u0074\u0020w\u0069t\u0068\u0020\u0025");ErrBadCMapDict =_f .New ("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0064\u0069\u0063\u0074");
);func _fd (_aga string )(*CMap ,error ){_agag ,_ged :=_fb .Asset (_aga );if _ged !=nil {return nil ,_ged ;};return LoadCmapFromDataCID (_agag );};func (cmap *CMap )parseName ()error {_def :="";_gbb :=false ;for _edea :=0;_edea < 20&&!_gbb ;_edea ++{_fde ,_geef :=cmap .parseObject ();
if _geef !=nil {return _geef ;};switch _dff :=_fde .(type ){case cmapOperand :switch _dff .Operand {case "\u0064\u0065\u0066":_gbb =true ;default:_df .Log .Debug ("\u0070\u0061\u0072\u0073\u0065\u004e\u0061\u006d\u0065\u003a\u0020\u0053\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020o\u003d\u0025\u0023\u0076\u0020n\u0061\u006de\u003d\u0025\u0023\u0071",_fde ,_def );
if _def !=""{_def =_b .Sprintf ("\u0025\u0073\u0020%\u0073",_def ,_dff .Operand );};_df .Log .Debug ("\u0070\u0061\u0072\u0073\u0065\u004e\u0061\u006d\u0065\u003a \u0052\u0065\u0063\u006f\u0076\u0065\u0072e\u0064\u002e\u0020\u006e\u0061\u006d\u0065\u003d\u0025\u0023\u0071",_def );
};case cmapName :_def =_dff .Name ;};};if !_gbb {_df .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0070\u0061\u0072\u0073\u0065N\u0061m\u0065:\u0020\u004e\u006f\u0020\u0064\u0065\u0066 ");return ErrBadCMap ;};cmap ._bde =_def ;return nil ;};func LoadCmapFromDataCID (data []byte )(*CMap ,error ){return LoadCmapFromData (data ,false )};
func (_ba *CIDSystemInfo )String ()string {return _b .Sprintf ("\u0025\u0073\u002d\u0025\u0073\u002d\u0025\u0030\u0033\u0064",_ba .Registry ,_ba .Ordering ,_ba .Supplement );};type cmapDict struct{Dict map[string ]cmapObject ;};const (_cgdc =100;_dged ="\u000a\u002f\u0043\u0049\u0044\u0049\u006e\u0069\u0074\u0020\u002f\u0050\u0072\u006fc\u0053\u0065\u0074\u0020\u0066\u0069\u006e\u0064\u0072es\u006fu\u0072c\u0065 \u0062\u0065\u0067\u0069\u006e\u000a\u0031\u0032\u0020\u0064\u0069\u0063\u0074\u0020\u0062\u0065\u0067\u0069n\u000a\u0062\u0065\u0067\u0069\u006e\u0063\u006d\u0061\u0070\n\u002f\u0043\u0049\u0044\u0053\u0079\u0073\u0074\u0065m\u0049\u006e\u0066\u006f\u0020\u003c\u003c\u0020\u002f\u0052\u0065\u0067\u0069\u0073t\u0072\u0079\u0020\u0028\u0041\u0064\u006f\u0062\u0065\u0029\u0020\u002f\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067\u0020\u0028\u0055\u0043\u0053)\u0020\u002f\u0053\u0075\u0070p\u006c\u0065\u006d\u0065\u006et\u0020\u0030\u0020\u003e\u003e\u0020\u0064\u0065\u0066\u000a\u002f\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065\u0020\u002f\u0041\u0064\u006f\u0062\u0065-\u0049\u0064\u0065\u006e\u0074\u0069\u0074\u0079\u002d\u0055\u0043\u0053\u0020\u0064\u0065\u0066\u000a\u002fC\u004d\u0061\u0070\u0054\u0079\u0070\u0065\u0020\u0032\u0020\u0064\u0065\u0066\u000a\u0031\u0020\u0062\u0065\u0067\u0069\u006e\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063e\u0072\u0061n\u0067\u0065\n\u003c\u0030\u0030\u0030\u0030\u003e\u0020<\u0046\u0046\u0046\u0046\u003e\u000a\u0065\u006e\u0064\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065r\u0061\u006e\u0067\u0065\u000a";
_gdca ="\u0065\u006e\u0064\u0063\u006d\u0061\u0070\u000a\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065\u0020\u0063ur\u0072e\u006e\u0074\u0064\u0069\u0063\u0074\u0020\u002f\u0043\u004d\u0061\u0070 \u0064\u0065\u0066\u0069\u006e\u0065\u0072\u0065\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0070\u006fp\u000a\u0065\u006e\u0064\u000a\u0065\u006e\u0064\u000a";
);func (cmap *CMap )parseWMode ()error {var _aee int ;_cbbd :=false ;for _ceb :=0;_ceb < 3&&!_cbbd ;_ceb ++{_efd ,_cfc :=cmap .parseObject ();if _cfc !=nil {return _cfc ;};switch _gag :=_efd .(type ){case cmapOperand :switch _gag .Operand {case "\u0064\u0065\u0066":_cbbd =true ;
default:_df .Log .Error ("\u0070\u0061\u0072\u0073\u0065\u0057\u004d\u006f\u0064\u0065:\u0020\u0073\u0074\u0061\u0074\u0065\u0020e\u0072\u0072\u006f\u0072\u002e\u0020\u006f\u003d\u0025\u0023\u0076",_efd );return ErrBadCMap ;};case cmapInt :_aee =int (_gag ._gggd );
};};cmap ._cdd =integer {_gada :true ,_fee :_aee };return nil ;};type cmapObject interface{};func (cmap *CMap )Type ()int {return cmap ._gba };type cmapInt struct{_gggd int64 };type fbRange struct{_fbd CharCode ;_fe CharCode ;_gcg string ;};type cmapArray struct{Array []cmapObject ;
};func (_ffb *cMapParser )parseHexString ()(cmapHexString ,error ){_ffb ._cfg .ReadByte ();_gge :=[]byte ("\u0030\u0031\u0032\u003345\u0036\u0037\u0038\u0039\u0061\u0062\u0063\u0064\u0065\u0066\u0041\u0042\u0043\u0044E\u0046");_ggeb :=_e .Buffer {};for {_ffb .skipSpaces ();
_eaff ,_aae :=_ffb ._cfg .Peek (1);if _aae !=nil {return cmapHexString {},_aae ;};if _eaff [0]=='>'{_ffb ._cfg .ReadByte ();break ;};_daae ,_ :=_ffb ._cfg .ReadByte ();if _e .IndexByte (_gge ,_daae )>=0{_ggeb .WriteByte (_daae );};};if _ggeb .Len ()%2==1{_df .Log .Debug ("\u0070\u0061rs\u0065\u0048\u0065x\u0053\u0074\u0072\u0069ng:\u0020ap\u0070\u0065\u006e\u0064\u0069\u006e\u0067 '\u0030\u0027\u0020\u0074\u006f\u0020\u0025#\u0071",_ggeb .String ());
_ggeb .WriteByte ('0');};_bdd :=_ggeb .Len ()/2;_fdd ,_ :=_g .DecodeString (_ggeb .String ());return cmapHexString {_gbg :_bdd ,_addb :_fdd },nil ;};type cmapString struct{String string ;};type cmapFloat struct{_afea float64 };const (_bb =4;MissingCodeRune ='\ufffd';
MissingCodeString =string (MissingCodeRune ););func (cmap *CMap )NBits ()int {return cmap ._eg };func _ceeb (_aeaa cmapHexString )CharCode {_gca :=CharCode (0);for _ ,_gdb :=range _aeaa ._addb {_gca <<=8;_gca |=CharCode (_gdb );};return _gca ;};func (_ege *cMapParser )parseName ()(cmapName ,error ){_efee :="";
_bgg :=false ;for {_cdbf ,_cgdd :=_ege ._cfg .Peek (1);if _cgdd ==_c .EOF {break ;};if _cgdd !=nil {return cmapName {_efee },_cgdd ;};if !_bgg {if _cdbf [0]=='/'{_bgg =true ;_ege ._cfg .ReadByte ();}else {_df .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u004e\u0061\u006d\u0065\u0020\u0073\u0074a\u0072t\u0069n\u0067 \u0077\u0069\u0074\u0068\u0020\u0025\u0073\u0020\u0028\u0025\u0020\u0078\u0029",_cdbf ,_cdbf );
return cmapName {_efee },_b .Errorf ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u006ea\u006d\u0065:\u0020\u0028\u0025\u0063\u0029",_cdbf [0]);};}else {if _ge .IsWhiteSpace (_cdbf [0]){break ;}else if (_cdbf [0]=='/')||(_cdbf [0]=='[')||(_cdbf [0]=='(')||(_cdbf [0]==']')||(_cdbf [0]=='<')||(_cdbf [0]=='>'){break ;
}else if _cdbf [0]=='#'{_ffd ,_cbcb :=_ege ._cfg .Peek (3);if _cbcb !=nil {return cmapName {_efee },_cbcb ;};_ege ._cfg .Discard (3);_daab ,_cbcb :=_g .DecodeString (string (_ffd [1:3]));if _cbcb !=nil {return cmapName {_efee },_cbcb ;};_efee +=string (_daab );
}else {_eadd ,_ :=_ege ._cfg .ReadByte ();_efee +=string (_eadd );};};};return cmapName {_efee },nil ;};type Codespace struct{NumBytes int ;Low CharCode ;High CharCode ;};func (_ebad *cMapParser )parseObject ()(cmapObject ,error ){_ebad .skipSpaces ();
for {_edgbd ,_fdef :=_ebad ._cfg .Peek (2);if _fdef !=nil {return nil ,_fdef ;};if _edgbd [0]=='%'{_ebad .parseComment ();_ebad .skipSpaces ();continue ;}else if _edgbd [0]=='/'{_aacb ,_gdg :=_ebad .parseName ();return _aacb ,_gdg ;}else if _edgbd [0]=='('{_aega ,_agab :=_ebad .parseString ();
return _aega ,_agab ;}else if _edgbd [0]=='['{_gfb ,_dcc :=_ebad .parseArray ();return _gfb ,_dcc ;}else if (_edgbd [0]=='<')&&(_edgbd [1]=='<'){_fbgg ,_daec :=_ebad .parseDict ();return _fbgg ,_daec ;}else if _edgbd [0]=='<'{_gbe ,_dfgb :=_ebad .parseHexString ();
return _gbe ,_dfgb ;}else if _ge .IsDecimalDigit (_edgbd [0])||(_edgbd [0]=='-'&&_ge .IsDecimalDigit (_edgbd [1])){_cga ,_dbf :=_ebad .parseNumber ();if _dbf !=nil {return nil ,_dbf ;};return _cga ,nil ;}else {_dgg ,_bcea :=_ebad .parseOperand ();if _bcea !=nil {return nil ,_bcea ;
};return _dgg ,nil ;};};};func (cmap *CMap )CharcodeBytesToUnicode (data []byte )(string ,int ){_ede ,_db :=cmap .BytesToCharcodes (data );if !_db {_df .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0043\u0068\u0061\u0072\u0063\u006f\u0064\u0065\u0042\u0079\u0074\u0065s\u0054\u006f\u0055\u006e\u0069\u0063\u006f\u0064\u0065\u002e\u0020\u004e\u006f\u0074\u0020\u0069n\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u002e\u0020\u0064\u0061\u0074\u0061\u003d\u005b\u0025\u0020\u0030\u0032\u0078]\u0020\u0063\u006d\u0061\u0070=\u0025\u0073",data ,cmap );
return "",0;};_fg :=make ([]string ,len (_ede ));var _eca []CharCode ;for _abg ,_edg :=range _ede {_bc ,_da :=cmap ._bad [_edg ];if !_da {_eca =append (_eca ,_edg );_bc =MissingCodeString ;};_fg [_abg ]=_bc ;};_ada :=_gf .Join (_fg ,"");if len (_eca )> 0{_df .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020C\u0068\u0061\u0072c\u006f\u0064\u0065\u0042y\u0074\u0065\u0073\u0054\u006f\u0055\u006e\u0069\u0063\u006f\u0064\u0065\u002e\u0020\u004e\u006f\u0074\u0020\u0069\u006e\u0020\u006d\u0061\u0070\u002e\u000a"+"\u0009d\u0061t\u0061\u003d\u005b\u0025\u00200\u0032\u0078]\u003d\u0025\u0023\u0071\u000a"+"\u0009\u0063h\u0061\u0072\u0063o\u0064\u0065\u0073\u003d\u0025\u0030\u0032\u0078\u000a"+"\u0009\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u003d\u0025\u0064\u0020%\u0030\u0032\u0078\u000a"+"\u0009\u0075\u006e\u0069\u0063\u006f\u0064\u0065\u003d`\u0025\u0073\u0060\u000a"+"\u0009\u0063\u006d\u0061\u0070\u003d\u0025\u0073",data ,string (data ),_ede ,len (_eca ),_eca ,_ada ,cmap );
};return _ada ,len (_eca );};func (cmap *CMap )parseBfrange ()error {for {var _beb CharCode ;_dbd ,_dcfb :=cmap .parseObject ();if _dcfb !=nil {if _dcfb ==_c .EOF {break ;};return _dcfb ;};switch _deg :=_dbd .(type ){case cmapOperand :if _deg .Operand ==_gdf {return nil ;
};return _f .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");case cmapHexString :_beb =_ceeb (_deg );default:return _f .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065");
};var _fda CharCode ;_dbd ,_dcfb =cmap .parseObject ();if _dcfb !=nil {if _dcfb ==_c .EOF {break ;};return _dcfb ;};switch _deb :=_dbd .(type ){case cmapOperand :_df .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0049\u006e\u0063\u006f\u006d\u0070\u006c\u0065\u0074\u0065\u0020\u0062\u0066r\u0061\u006e\u0067\u0065\u0020\u0074\u0072i\u0070\u006c\u0065\u0074");
return ErrBadCMap ;case cmapHexString :_fda =_ceeb (_deb );if _fda > 0xffff{_fda =0xffff;};default:_df .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0055\u006e\u0065\u0078\u0070e\u0063t\u0065d\u0020\u0074\u0079\u0070\u0065\u0020\u0025T",_dbd );return ErrBadCMap ;
};_dbd ,_dcfb =cmap .parseObject ();if _dcfb !=nil {if _dcfb ==_c .EOF {break ;};return _dcfb ;};switch _agfgd :=_dbd .(type ){case cmapArray :if len (_agfgd .Array )!=int (_fda -_beb )+1{_df .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069d\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u006f\u0066\u0020\u0069\u0074\u0065\u006d\u0073\u0020\u0069\u006e\u0020a\u0072\u0072\u0061\u0079");
return ErrBadCMap ;};for _dcgb :=_beb ;_dcgb <=_fda ;_dcgb ++{_adb :=_agfgd .Array [_dcgb -_beb ];_gad ,_bada :=_adb .(cmapHexString );if !_bada {return _f .New ("\u006e\u006f\u006e-h\u0065\u0078\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0069\u006e\u0020\u0061\u0072\u0072\u0061\u0079");
};_aaba :=_gcdf (_gad );cmap ._bad [_dcgb ]=string (_aaba );};case cmapHexString :_eea :=_gcdf (_agfgd );_efcb :=len (_eea );for _agde :=_beb ;_agde <=_fda ;_agde ++{cmap ._bad [_agde ]=string (_eea );if _efcb > 0{_eea [_efcb -1]++;}else {_df .Log .Debug ("\u004e\u006f\u0020c\u006d\u0061\u0070\u0020\u0074\u0061\u0072\u0067\u0065\u0074\u0020\u0063\u0068\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065d\u0020\u0066\u006f\u0072\u0020\u0025\u0023\u0076",_agde );
};if _agde ==1<<32-1{break ;};};default:_df .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0055\u006e\u0065\u0078\u0070e\u0063t\u0065d\u0020\u0074\u0079\u0070\u0065\u0020\u0025T",_dbd );return ErrBadCMap ;};};return nil ;};func (_dfbee *cMapParser )parseString ()(cmapString ,error ){_dfbee ._cfg .ReadByte ();
_fdga :=_e .Buffer {};_dga :=1;for {_bdcf ,_acd :=_dfbee ._cfg .Peek (1);if _acd !=nil {return cmapString {_fdga .String ()},_acd ;};if _bdcf [0]=='\\'{_dfbee ._cfg .ReadByte ();_agc ,_gcge :=_dfbee ._cfg .ReadByte ();if _gcge !=nil {return cmapString {_fdga .String ()},_gcge ;
};if _ge .IsOctalDigit (_agc ){_fggf ,_caeg :=_dfbee ._cfg .Peek (2);if _caeg !=nil {return cmapString {_fdga .String ()},_caeg ;};var _gaf []byte ;_gaf =append (_gaf ,_agc );for _ ,_bebc :=range _fggf {if _ge .IsOctalDigit (_bebc ){_gaf =append (_gaf ,_bebc );
}else {break ;};};_dfbee ._cfg .Discard (len (_gaf )-1);_df .Log .Trace ("\u004e\u0075\u006d\u0065ri\u0063\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0022\u0025\u0073\u0022",_gaf );_ebc ,_caeg :=_bd .ParseUint (string (_gaf ),8,32);if _caeg !=nil {return cmapString {_fdga .String ()},_caeg ;
};_fdga .WriteByte (byte (_ebc ));continue ;};switch _agc {case 'n':_fdga .WriteByte ('\n');case 'r':_fdga .WriteByte ('\r');case 't':_fdga .WriteByte ('\t');case 'b':_fdga .WriteByte ('\b');case 'f':_fdga .WriteByte ('\f');case '(':_fdga .WriteByte ('(');
case ')':_fdga .WriteByte (')');case '\\':_fdga .WriteByte ('\\');};continue ;}else if _bdcf [0]=='('{_dga ++;}else if _bdcf [0]==')'{_dga --;if _dga ==0{_dfbee ._cfg .ReadByte ();break ;};};_dcdg ,_ :=_dfbee ._cfg .ReadByte ();_fdga .WriteByte (_dcdg );
};return cmapString {_fdga .String ()},nil ;};func (cmap *CMap )String ()string {_eba :=cmap ._bf ;_daf :=[]string {_b .Sprintf ("\u006e\u0062\u0069\u0074\u0073\u003a\u0025\u0064",cmap ._eg ),_b .Sprintf ("\u0074y\u0070\u0065\u003a\u0025\u0064",cmap ._gba )};
if cmap ._gcgc !=""{_daf =append (_daf ,_b .Sprintf ("\u0076\u0065\u0072\u0073\u0069\u006f\u006e\u003a\u0025\u0073",cmap ._gcgc ));};if cmap ._gee !=""{_daf =append (_daf ,_b .Sprintf ("u\u0073\u0065\u0063\u006d\u0061\u0070\u003a\u0025\u0023\u0071",cmap ._gee ));
};_daf =append (_daf ,_b .Sprintf ("\u0073\u0079\u0073\u0074\u0065\u006d\u0049\u006e\u0066\u006f\u003a\u0025\u0073",_eba .String ()));if len (cmap ._gfg )> 0{_daf =append (_daf ,_b .Sprintf ("\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u003a\u0025\u0064",len (cmap ._gfg )));
};if len (cmap ._bad )> 0{_daf =append (_daf ,_b .Sprintf ("\u0063\u006fd\u0065\u0054\u006fU\u006e\u0069\u0063\u006f\u0064\u0065\u003a\u0025\u0064",len (cmap ._bad )));};return _b .Sprintf ("\u0043\u004d\u0041P\u007b\u0025\u0023\u0071\u0020\u0025\u0073\u007d",cmap ._bde ,_gf .Join (_daf ,"\u0020"));
};func IsPredefinedCMap (name string )bool {return _fb .AssetExists (name )};func _ceg (_ceag cmapHexString )rune {_daag :=_gcdf (_ceag );if _fab :=len (_daag );_fab ==0{_df .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0068\u0065\u0078\u0054o\u0052\u0075\u006e\u0065\u002e\u0020\u0045\u0078p\u0065c\u0074\u0065\u0064\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0072u\u006e\u0065\u0020\u0073\u0068\u0065\u0078\u003d\u0025\u0023\u0076",_ceag );
return MissingCodeRune ;};if len (_daag )> 1{_df .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0068\u0065\u0078\u0054\u006f\u0052\u0075\u006e\u0065\u002e\u0020\u0045\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0065\u0078\u0061\u0063\u0074\u006c\u0079\u0020\u006f\u006e\u0065\u0020\u0072\u0075\u006e\u0065\u0020\u0073\u0068\u0065\u0078\u003d\u0025\u0023v\u0020\u002d\u003e\u0020\u0025#\u0076",_ceag ,_daag );
};return _daag [0];};func _aafe ()cmapDict {return cmapDict {Dict :map[string ]cmapObject {}}};func (_bdce *cMapParser )parseComment ()(string ,error ){var _ggcb _e .Buffer ;_ ,_dcd :=_bdce .skipSpaces ();if _dcd !=nil {return _ggcb .String (),_dcd ;};
_gbbc :=true ;for {_bced ,_acg :=_bdce ._cfg .Peek (1);if _acg !=nil {_df .Log .Debug ("p\u0061r\u0073\u0065\u0043\u006f\u006d\u006d\u0065\u006et\u003a\u0020\u0065\u0072r=\u0025\u0076",_acg );return _ggcb .String (),_acg ;};if _gbbc &&_bced [0]!='%'{return _ggcb .String (),ErrBadCMapComment ;
};_gbbc =false ;if (_bced [0]!='\r')&&(_bced [0]!='\n'){_deef ,_ :=_bdce ._cfg .ReadByte ();_ggcb .WriteByte (_deef );}else {break ;};};return _ggcb .String (),nil ;};func (cmap *CMap )toBfData ()string {if len (cmap ._bad )==0{return "";};_dgf :=make ([]CharCode ,0,len (cmap ._bad ));
for _cee :=range cmap ._bad {_dgf =append (_dgf ,_cee );};_af .Slice (_dgf ,func (_add ,_fbgb int )bool {return _dgf [_add ]< _dgf [_fbgb ]});var _cff []charRange ;_eaf :=charRange {_dgf [0],_dgf [0]};_cab :=cmap ._bad [_dgf [0]];for _ ,_fa :=range _dgf [1:]{_ggc :=cmap ._bad [_fa ];
if _fa ==_eaf ._gd +1&&_dgba (_ggc )==_dgba (_cab )+1{_eaf ._gd =_fa ;}else {_cff =append (_cff ,_eaf );_eaf ._gfc ,_eaf ._gd =_fa ,_fa ;};_cab =_ggc ;};_cff =append (_cff ,_eaf );var _gff []CharCode ;var _eeb []fbRange ;for _ ,_aac :=range _cff {if _aac ._gfc ==_aac ._gd {_gff =append (_gff ,_aac ._gfc );
}else {_eeb =append (_eeb ,fbRange {_fbd :_aac ._gfc ,_fe :_aac ._gd ,_gcg :cmap ._bad [_aac ._gfc ]});};};_df .Log .Trace ("\u0063\u0068ar\u0052\u0061\u006eg\u0065\u0073\u003d\u0025d f\u0062Ch\u0061\u0072\u0073\u003d\u0025\u0064\u0020fb\u0052\u0061\u006e\u0067\u0065\u0073\u003d%\u0064",len (_cff ),len (_gff ),len (_eeb ));
var _bdc []string ;if len (_gff )> 0{_dfg :=(len (_gff )+_cgdc -1)/_cgdc ;for _ecd :=0;_ecd < _dfg ;_ecd ++{_cfd :=_acae (len (_gff )-_ecd *_cgdc ,_cgdc );_bdc =append (_bdc ,_b .Sprintf ("\u0025\u0064\u0020\u0062\u0065\u0067\u0069\u006e\u0062f\u0063\u0068\u0061\u0072",_cfd ));
for _aad :=0;_aad < _cfd ;_aad ++{_adf :=_gff [_ecd *_cgdc +_aad ];_dfgf :=cmap ._bad [_adf ];_bdc =append (_bdc ,_b .Sprintf ("\u003c%\u0030\u0034\u0078\u003e\u0020\u0025s",_adf ,_abc (_dfgf )));};_bdc =append (_bdc ,"\u0065n\u0064\u0062\u0066\u0063\u0068\u0061r");
};};if len (_eeb )> 0{_abf :=(len (_eeb )+_cgdc -1)/_cgdc ;for _ggf :=0;_ggf < _abf ;_ggf ++{_gffg :=_acae (len (_eeb )-_ggf *_cgdc ,_cgdc );_bdc =append (_bdc ,_b .Sprintf ("\u0025d\u0020b\u0065\u0067\u0069\u006e\u0062\u0066\u0072\u0061\u006e\u0067\u0065",_gffg ));
for _dfb :=0;_dfb < _gffg ;_dfb ++{_ead :=_eeb [_ggf *_cgdc +_dfb ];_bdc =append (_bdc ,_b .Sprintf ("\u003c%\u00304\u0078\u003e\u003c\u0025\u0030\u0034\u0078\u003e\u0020\u0025\u0073",_ead ._fbd ,_ead ._fe ,_abc (_ead ._gcg )));};_bdc =append (_bdc ,"\u0065\u006e\u0064\u0062\u0066\u0072\u0061\u006e\u0067\u0065");
};};return _gf .Join (_bdc ,"\u000a");};func (cmap *CMap )parse ()error {var _bbde cmapObject ;for {_bca ,_ecg :=cmap .parseObject ();if _ecg !=nil {if _ecg ==_c .EOF {break ;};_df .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u004d\u0061\u0070\u003a\u0020\u0025\u0076",_ecg );
return _ecg ;};switch _edgb :=_bca .(type ){case cmapOperand :_daa :=_edgb ;switch _daa .Operand {case _ccg :_aaa :=cmap .parseCodespaceRange ();if _aaa !=nil {return _aaa ;};case _cfaf :_cfe :=cmap .parseCIDRange ();if _cfe !=nil {return _cfe ;};case _gfcc :_ecdd :=cmap .parseBfchar ();
if _ecdd !=nil {return _ecdd ;};case _ecc :_aege :=cmap .parseBfrange ();if _aege !=nil {return _aege ;};case _bfb :if _bbde ==nil {_df .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0075\u0073\u0065\u0063m\u0061\u0070\u0020\u0077\u0069\u0074\u0068\u0020\u006e\u006f \u0061\u0072\u0067");
return ErrBadCMap ;};_faa ,_eae :=_bbde .(cmapName );if !_eae {_df .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0075\u0073\u0065\u0063\u006d\u0061\u0070\u0020\u0061\u0072\u0067\u0020\u006eo\u0074\u0020\u0061\u0020\u006e\u0061\u006de\u0020\u0025\u0023\u0076",_bbde );
return ErrBadCMap ;};cmap ._gee =_faa .Name ;case _fdaa :_cbc :=cmap .parseSystemInfo ();if _cbc !=nil {return _cbc ;};};case cmapName :_fdg :=_edgb ;switch _fdg .Name {case _fdaa :_dafc :=cmap .parseSystemInfo ();if _dafc !=nil {return _dafc ;};case _aaf :_bace :=cmap .parseName ();
if _bace !=nil {return _bace ;};case _aeed :_fed :=cmap .parseType ();if _fed !=nil {return _fed ;};case _cfdc :_dcf :=cmap .parseVersion ();if _dcf !=nil {return _dcf ;};case _dba :if _ecg =cmap .parseWMode ();_ecg !=nil {return _ecg ;};};};_bbde =_bca ;
};return nil ;};func _fdc (_cbbf []byte )*cMapParser {_afe :=cMapParser {};_bce :=_e .NewBuffer (_cbbf );_afe ._cfg =_gc .NewReader (_bce );return &_afe ;};func (cmap *CMap )Stream ()(*_ge .PdfObjectStream ,error ){if cmap ._egf !=nil {return cmap ._egf ,nil ;
};_dag ,_ffe :=_ge .MakeStream (cmap .Bytes (),_ge .NewFlateEncoder ());if _ffe !=nil {return nil ,_ffe ;};cmap ._egf =_dag ;return cmap ._egf ,nil ;};