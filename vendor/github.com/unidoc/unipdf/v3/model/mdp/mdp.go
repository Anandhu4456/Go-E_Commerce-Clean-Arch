//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package mdp ;import (_da "errors";_g "fmt";_e "github.com/unidoc/unipdf/v3/core";);func (_edc *DiffResults )addWarningWithDescription (_fdfg int ,_ece string ){if _edc .Warnings ==nil {_edc .Warnings =make ([]*DiffResult ,0);};_edc .Warnings =append (_edc .Warnings ,&DiffResult {Revision :_fdfg ,Description :_ece });
};func _cag (_gffg _e .PdfObject )([]_e .PdfObject ,error ){_dcg :=make ([]_e .PdfObject ,0);if _gffg !=nil {_eca :=_gffg ;if _cbdd ,_bda :=_e .GetIndirect (_gffg );_bda {_eca =_cbdd .PdfObject ;};if _gee ,_ad :=_e .GetArray (_eca );_ad {_dcg =_gee .Elements ();
}else {return nil ,_da .New ("\u0075n\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0061n\u006eo\u0074s\u0027\u0020\u006f\u0062\u006a\u0065\u0063t");};};return _dcg ,nil ;};

// MDPParameters describes parameters for the MDP checks (now only DocMDP).
type MDPParameters struct{DocMDPLevel DocMDPPermission ;};func (_df *defaultDiffPolicy )compareAnnots (_agaa int ,_eed ,_dfc []_e .PdfObject )error {_gfb :=make (map[int64 ]*_e .PdfObjectDictionary );for _ ,_bga :=range _eed {_cba ,_ced :=_e .GetIndirect (_bga );
if !_ced {return _da .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0061\u006e\u006e\u006ft\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");};_fa ,_ced :=_e .GetDict (_cba .PdfObject );if !_ced {return _da .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0061\u006e\u006e\u006ft\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");
};_gfb [_cba .ObjectNumber ]=_fa ;};for _ ,_efg :=range _dfc {_dbed ,_aeec :=_e .GetIndirect (_efg );if !_aeec {return _da .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0061\u006e\u006e\u006ft\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");
};_egc ,_aeec :=_e .GetDict (_dbed .PdfObject );if !_aeec {return _da .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0061\u006e\u006e\u006ft\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");};_gaa ,_ :=_e .GetStringVal (_egc .Get ("\u0054"));
_edg ,_ :=_e .GetNameVal (_egc .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));if _ ,_be :=_gfb [_dbed .ObjectNumber ];!_be {switch _df ._b {case NoRestrictions ,FillFormsAndAnnots :_df ._fd .addWarningWithDescription (_agaa ,_g .Sprintf ("\u0025\u0073\u0020\u0061\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0020\u0025\u0073\u0020\u0077\u0061\u0073\u0020\u0061d\u0064\u0065\u0064",_edg ,_gaa ));
default:_gbe ,_dbg :=_e .GetDict (_dbed .PdfObject );if !_dbg {return _da .New ("u\u006ed\u0065\u0066\u0069\u006e\u0065\u0064\u0020\u0061n\u006e\u006f\u0074\u0061ti\u006f\u006e");};_bfd ,_dbg :=_e .GetNameVal (_gbe .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));
if !_dbg {return _da .New ("\u0075\u006e\u0064\u0065\u0066\u0069\u006e\u0065\u0064\u0020a\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0027\u0073\u0020\u0073\u0075\u0062\u0074\u0079\u0070\u0065");};if _bfd =="\u0057\u0069\u0064\u0067\u0065\u0074"{switch _df ._b {case NoRestrictions ,FillFormsAndAnnots ,FillForms :_df ._fd .addWarningWithDescription (_agaa ,_g .Sprintf ("\u0025\u0073\u0020\u0061\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0020\u0025\u0073\u0020\u0077\u0061\u0073\u0020\u0061d\u0064\u0065\u0064",_edg ,_gaa ));
default:_df ._fd .addErrorWithDescription (_agaa ,_g .Sprintf ("\u0025\u0073\u0020\u0061\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0020\u0025\u0073\u0020\u0077\u0061\u0073\u0020\u0061d\u0064\u0065\u0064",_edg ,_gaa ));};}else {_df ._fd .addErrorWithDescription (_agaa ,_g .Sprintf ("\u0025\u0073\u0020\u0061\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0020\u0025\u0073\u0020\u0077\u0061\u0073\u0020\u0061d\u0064\u0065\u0064",_edg ,_gaa ));
};};}else {delete (_gfb ,_dbed .ObjectNumber );if _ggb ,_afa :=_df ._f [_dbed .ObjectNumber ];_afa {switch _df ._b {case NoRestrictions ,FillFormsAndAnnots :_df ._fd .addWarningWithDescription (_agaa ,_g .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0063\u0068\u0061\u006eg\u0065\u0064",_edg ,_gaa ));
default:_afb ,_bdg :=_e .GetIndirect (_ggb );if !_bdg {return _da .New ("u\u006ed\u0065\u0066\u0069\u006e\u0065\u0064\u0020\u0061n\u006e\u006f\u0074\u0061ti\u006f\u006e");};_cda ,_bdg :=_e .GetDict (_afb .PdfObject );if !_bdg {return _da .New ("u\u006ed\u0065\u0066\u0069\u006e\u0065\u0064\u0020\u0061n\u006e\u006f\u0074\u0061ti\u006f\u006e");
};_ab ,_bdg :=_e .GetNameVal (_cda .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));if !_bdg {return _da .New ("\u0075\u006e\u0064\u0065\u0066\u0069\u006e\u0065\u0064\u0020a\u006e\u006e\u006f\u0074\u0061\u0074\u0069o\u006e\u0027\u0073\u0020\u0073\u0075\u0062\u0074\u0079\u0070\u0065");
};if _ab =="\u0057\u0069\u0064\u0067\u0065\u0074"{switch _df ._b {case NoRestrictions ,FillFormsAndAnnots ,FillForms :_df ._fd .addWarningWithDescription (_agaa ,_g .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0063\u0068\u0061\u006eg\u0065\u0064",_edg ,_gaa ));
default:_df ._fd .addErrorWithDescription (_agaa ,_g .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0063\u0068\u0061\u006eg\u0065\u0064",_edg ,_gaa ));};}else {_df ._fd .addErrorWithDescription (_agaa ,_g .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0063\u0068\u0061\u006eg\u0065\u0064",_edg ,_gaa ));
};};};};};for _ ,_bc :=range _gfb {_eea ,_ :=_e .GetStringVal (_bc .Get ("\u0054"));_fgd ,_ :=_e .GetNameVal (_bc .Get ("\u0053u\u0062\u0074\u0079\u0070\u0065"));switch _df ._b {case NoRestrictions ,FillFormsAndAnnots :_df ._fd .addWarningWithDescription (_agaa ,_g .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0072\u0065\u006d\u006fv\u0065\u0064",_fgd ,_eea ));
default:_df ._fd .addErrorWithDescription (_agaa ,_g .Sprintf ("\u0025\u0073\u0020\u0061n\u006e\u006f\u0074\u0061\u0074\u0069\u006f\u006e\u0020\u0025s\u0020w\u0061\u0073\u0020\u0072\u0065\u006d\u006fv\u0065\u0064",_fgd ,_eea ));};};return nil ;};func (_fde *defaultDiffPolicy )compareFields (_ebc int ,_dgc ,_fgb []_e .PdfObject )error {_aeb :=make (map[int64 ]*_e .PdfObjectDictionary );
for _ ,_cdg :=range _dgc {_ebf ,_ecf :=_e .GetIndirect (_cdg );if !_ecf {return _da .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0066\u0069\u0065\u006cd\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");};_ag ,_ecf :=_e .GetDict (_ebf .PdfObject );
if !_ecf {return _da .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0061\u006e\u006e\u006ft\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");};_aeb [_ebf .ObjectNumber ]=_ag ;};for _ ,_eg :=range _fgb {_bfg ,_aee :=_e .GetIndirect (_eg );
if !_aee {return _da .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0066\u0069\u0065\u006cd\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");};_ba ,_aee :=_e .GetDict (_bfg .PdfObject );if !_aee {return _da .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0066\u0069\u0065\u006cd\u0027s\u0020\u0073\u0074\u0072\u0075\u0063\u0074u\u0072\u0065");
};T :=_ba .Get ("\u0054");if _ ,_daa :=_fde ._f [_bfg .ObjectNumber ];_daa {switch _fde ._b {case NoRestrictions ,FillForms ,FillFormsAndAnnots :_fde ._fd .addWarningWithDescription (_ebc ,_g .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0063\u0068\u0061ng\u0065\u0064",T ));
default:_fde ._fd .addErrorWithDescription (_ebc ,_g .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0063\u0068\u0061ng\u0065\u0064",T ));};};if _ ,_ed :=_aeb [_bfg .ObjectNumber ];!_ed {switch _fde ._b {case NoRestrictions ,FillForms ,FillFormsAndAnnots :_fde ._fd .addWarningWithDescription (_ebc ,_g .Sprintf ("\u0046i\u0065l\u0064\u0020\u0025\u0073\u0020w\u0061\u0073 \u0061\u0064\u0064\u0065\u0064",_ba .Get ("\u0054")));
default:_fde ._fd .addErrorWithDescription (_ebc ,_g .Sprintf ("\u0046i\u0065l\u0064\u0020\u0025\u0073\u0020w\u0061\u0073 \u0061\u0064\u0064\u0065\u0064",_ba .Get ("\u0054")));};}else {delete (_aeb ,_bfg .ObjectNumber );if _ ,_ffg :=_fde ._f [_bfg .ObjectNumber ];
_ffg {switch _fde ._b {case NoRestrictions ,FillForms ,FillFormsAndAnnots :_fde ._fd .addWarningWithDescription (_ebc ,_g .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0063\u0068\u0061ng\u0065\u0064",_ba .Get ("\u0054")));
default:_fde ._fd .addErrorWithDescription (_ebc ,_g .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0063\u0068\u0061ng\u0065\u0064",_ba .Get ("\u0054")));};};};if FT ,_gce :=_e .GetNameVal (_ba .Get ("\u0046\u0054"));_gce {if FT =="\u0053\u0069\u0067"{if _ccc ,_bac :=_e .GetIndirect (_ba .Get ("\u0056"));
_bac {if _ ,_dce :=_fde ._f [_ccc .ObjectNumber ];_dce {switch _fde ._b {case NoRestrictions ,FillForms ,FillFormsAndAnnots :_fde ._fd .addWarningWithDescription (_ebc ,_g .Sprintf ("\u0053\u0069\u0067na\u0074\u0075\u0072\u0065\u0020\u0066\u006f\u0072\u0020%\u0073 \u0066i\u0065l\u0064\u0020\u0077\u0061\u0073\u0020\u0063\u0068\u0061\u006e\u0067\u0065\u0064",T ));
default:_fde ._fd .addErrorWithDescription (_ebc ,_g .Sprintf ("\u0053\u0069\u0067na\u0074\u0075\u0072\u0065\u0020\u0066\u006f\u0072\u0020%\u0073 \u0066i\u0065l\u0064\u0020\u0077\u0061\u0073\u0020\u0063\u0068\u0061\u006e\u0067\u0065\u0064",T ));};};};};
};};for _ ,_cb :=range _aeb {switch _fde ._b {case NoRestrictions :_fde ._fd .addWarningWithDescription (_ebc ,_g .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0072\u0065\u006dov\u0065\u0064",_cb .Get ("\u0054")));default:_fde ._fd .addErrorWithDescription (_ebc ,_g .Sprintf ("F\u0069e\u006c\u0064\u0020\u0025\u0073\u0020\u0077\u0061s\u0020\u0072\u0065\u006dov\u0065\u0064",_cb .Get ("\u0054")));
};};return nil ;};func (_gge *DiffResults )addError (_gada *DiffResult ){if _gge .Errors ==nil {_gge .Errors =make ([]*DiffResult ,0);};_gge .Errors =append (_gge .Errors ,_gada );};

// DiffPolicy interface for comparing two revisions of the Pdf document.
type DiffPolicy interface{

// ReviewFile should check the revisions of the old and new parsers
// and evaluate the differences between the revisions.
// Each implementation of this interface must decide
// how to handle cases where there are multiple revisions between the old and new revisions.
ReviewFile (_adf *_e .PdfParser ,_caf *_e .PdfParser ,_ebgc *MDPParameters )(*DiffResults ,error );};func (_fcf *DiffResults )addErrorWithDescription (_ebg int ,_fab string ){if _fcf .Errors ==nil {_fcf .Errors =make ([]*DiffResult ,0);};_fcf .Errors =append (_fcf .Errors ,&DiffResult {Revision :_ebg ,Description :_fab });
};

// DiffResults describes the results of the DiffPolicy.
type DiffResults struct{Warnings []*DiffResult ;Errors []*DiffResult ;};const (NoRestrictions DocMDPPermission =0;NoChanges DocMDPPermission =1;FillForms DocMDPPermission =2;FillFormsAndAnnots DocMDPPermission =3;);func NewDefaultDiffPolicy ()DiffPolicy {return &defaultDiffPolicy {_f :nil ,_fd :&DiffResults {},_b :0};
};

// ReviewFile implementation of DiffPolicy interface
// The default policy only checks the next types of objects:
// Page, Pages (container for page objects), Annot, Annots (container for annotation objects), Field.
// It checks adding, removing and modifying objects of these types.
func (_ge *defaultDiffPolicy )ReviewFile (oldParser *_e .PdfParser ,newParser *_e .PdfParser ,params *MDPParameters )(*DiffResults ,error ){if oldParser .GetRevisionNumber ()> newParser .GetRevisionNumber (){return nil ,_da .New ("\u006f\u006c\u0064\u0020\u0072\u0065\u0076\u0069\u0073\u0069\u006f\u006e\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061n\u0020\u006e\u0065\u0077\u0020r\u0065\u0076i\u0073\u0069\u006f\u006e");
};if oldParser .GetRevisionNumber ()==newParser .GetRevisionNumber (){if oldParser !=newParser {return nil ,_da .New ("\u0073\u0061m\u0065\u0020\u0072\u0065v\u0069\u0073i\u006f\u006e\u0073\u002c\u0020\u0062\u0075\u0074 \u0064\u0069\u0066\u0066\u0065\u0072\u0065\u006e\u0074\u0020\u0070\u0061r\u0073\u0065\u0072\u0073");
};return &DiffResults {},nil ;};if params ==nil {_ge ._b =NoRestrictions ;}else {_ge ._b =params .DocMDPLevel ;};_ea :=&DiffResults {};for _ec :=oldParser .GetRevisionNumber ()+1;_ec <=newParser .GetRevisionNumber ();_ec ++{_dd ,_gc :=newParser .GetRevision (_ec -1);
if _gc !=nil {return nil ,_gc ;};_fdf ,_gc :=newParser .GetRevision (_ec );if _gc !=nil {return nil ,_gc ;};_eag ,_gc :=_ge .compareRevisions (_dd ,_fdf );if _gc !=nil {return nil ,_gc ;};_ea .Warnings =append (_ea .Warnings ,_eag .Warnings ...);_ea .Errors =append (_ea .Errors ,_eag .Errors ...);
};return _ea ,nil ;};

// String returns the state of the warning.
func (_dbec *DiffResult )String ()string {return _g .Sprintf ("\u0025\u0073\u0020\u0069n \u0072\u0065\u0076\u0069\u0073\u0069\u006f\u006e\u0073\u0020\u0023\u0025\u0064",_dbec .Description ,_dbec .Revision );};

// DocMDPPermission is values for set up access permissions for DocMDP.
// (Section 12.8.2.2, Table 254 - Entries in a signature dictionary p. 471 in PDF32000_2008).
type DocMDPPermission int64 ;func (_aa *defaultDiffPolicy )comparePages (_cg int ,_edf ,_bb *_e .PdfIndirectObject )error {if _ ,_aga :=_aa ._f [_bb .ObjectNumber ];_aga {_aa ._fd .addErrorWithDescription (_cg ,"\u0050a\u0067e\u0073\u0020\u0077\u0065\u0072e\u0020\u0063h\u0061\u006e\u0067\u0065\u0064");
};_ac ,_gfe :=_e .GetDict (_bb .PdfObject );_cbc ,_eff :=_e .GetDict (_edf .PdfObject );if !_gfe ||!_eff {return _da .New ("\u0075n\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0050\u0061g\u0065\u0073\u0027\u0020\u006f\u0062\u006a\u0065\u0063\u0074");
};_ee ,_gfe :=_e .GetArray (_ac .Get ("\u004b\u0069\u0064\u0073"));_aea ,_eff :=_e .GetArray (_cbc .Get ("\u004b\u0069\u0064\u0073"));if !_gfe ||!_eff {return _da .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0050\u0061\u0067\u0065s\u0027 \u0064\u0069\u0063\u0074\u0069\u006f\u006ea\u0072\u0079");
};_dcf :=_ee .Len ();if _dcf > _aea .Len (){_dcf =_aea .Len ();};for _agf :=0;_agf < _dcf ;_agf ++{_gff ,_cdgf :=_e .GetIndirect (_e .ResolveReference (_aea .Get (_agf )));_fe ,_ce :=_e .GetIndirect (_e .ResolveReference (_ee .Get (_agf )));if !_cdgf ||!_ce {return _da .New ("\u0075\u006e\u0065\u0078pe\u0063\u0074\u0065\u0064\u0020\u0070\u0061\u0067\u0065\u0020\u006f\u0062\u006a\u0065c\u0074");
};if _gff .ObjectNumber !=_fe .ObjectNumber {_aa ._fd .addErrorWithDescription (_cg ,_g .Sprintf ("p\u0061\u0067\u0065\u0020#%\u0064 \u0077\u0061\u0073\u0020\u0072e\u0070\u006c\u0061\u0063\u0065\u0064",_agf ));};_cde ,_cdgf :=_e .GetDict (_fe );_gfa ,_ce :=_e .GetDict (_gff );
if !_cdgf ||!_ce {return _da .New ("\u0075\u006e\u0065\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0070\u0061\u0067\u0065'\u0073 \u0064\u0069\u0063\u0074\u0069\u006f\u006ea\u0072\u0079");};_dbe ,_bae :=_cag (_cde .Get ("\u0041\u006e\u006e\u006f\u0074\u0073"));
if _bae !=nil {return _bae ;};_cfd ,_bae :=_cag (_gfa .Get ("\u0041\u006e\u006e\u006f\u0074\u0073"));if _bae !=nil {return _bae ;};if _agc :=_aa .compareAnnots (_cg ,_cfd ,_dbe );_agc !=nil {return _agc ;};};for _fce :=_dcf +1;_fce <=_ee .Len ();_fce ++{_aa ._fd .addErrorWithDescription (_cg ,_g .Sprintf ("\u0070a\u0067e\u0020\u0023\u0025\u0064\u0020w\u0061\u0073 \u0061\u0064\u0064\u0065\u0064",_fce ));
};for _bg :=_dcf +1;_bg <=_aea .Len ();_bg ++{_aa ._fd .addErrorWithDescription (_cg ,_g .Sprintf ("p\u0061g\u0065\u0020\u0023\u0025\u0064\u0020\u0077\u0061s\u0020\u0072\u0065\u006dov\u0065\u0064",_bg ));};return nil ;};type defaultDiffPolicy struct{_f map[int64 ]_e .PdfObject ;
_fd *DiffResults ;_b DocMDPPermission ;};

// IsPermitted returns true if changes permitted.
func (_gaac *DiffResults )IsPermitted ()bool {return len (_gaac .Errors )==0};

// DiffResult describes the warning or the error for the DiffPolicy results.
type DiffResult struct{Revision int ;Description string ;};func (_bf *defaultDiffPolicy )compareRevisions (_ged *_e .PdfParser ,_gb *_e .PdfParser )(*DiffResults ,error ){var _gf error ;_bf ._f ,_gf =_gb .GetUpdatedObjects (_ged );if _gf !=nil {return &DiffResults {},_gf ;
};if len (_bf ._f )==0{return &DiffResults {},nil ;};_gg :=_gb .GetRevisionNumber ();_eb ,_ef :=_e .GetIndirect (_e .ResolveReference (_ged .GetTrailer ().Get ("\u0052\u006f\u006f\u0074")));_ebd ,_a :=_e .GetIndirect (_e .ResolveReference (_gb .GetTrailer ().Get ("\u0052\u006f\u006f\u0074")));
if !_ef ||!_a {return &DiffResults {},_da .New ("\u0065\u0072\u0072o\u0072\u0020\u0077\u0068i\u006c\u0065\u0020\u0067\u0065\u0074\u0074i\u006e\u0067\u0020\u0072\u006f\u006f\u0074\u0020\u006f\u0062\u006a\u0065\u0063\u0074");};_ga ,_ef :=_e .GetDict (_e .ResolveReference (_eb .PdfObject ));
_c ,_a :=_e .GetDict (_e .ResolveReference (_ebd .PdfObject ));if !_ef ||!_a {return &DiffResults {},_da .New ("\u0065\u0072\u0072\u006f\u0072\u0020\u0077\u0068\u0069\u006c\u0065\u0020\u0067e\u0074\u0074\u0069\u006e\u0067\u0020a\u0020\u0072\u006f\u006f\u0074\u0027\u0073\u0020\u0064\u0069\u0063\u0074\u0069o\u006e\u0061\u0072\u0079");
};if _cd ,_ff :=_e .GetIndirect (_c .Get ("\u0041\u0063\u0072\u006f\u0046\u006f\u0072\u006d"));_ff {_ae ,_dc :=_e .GetDict (_cd );if !_dc {return &DiffResults {},_da .New ("\u0065\u0072\u0072\u006f\u0072 \u0077\u0068\u0069\u006c\u0065\u0020\u0067\u0065\u0074\u0074\u0069\u006e\u0067 \u0041\u0063\u0072\u006f\u0046\u006f\u0072\u006d\u0027\u0073\u0020\u0064\u0069\u0063\u0074\u0069\u006f\u006e\u0061\u0072\u0079");
};_gcb :=make ([]_e .PdfObject ,0);if _fg ,_ca :=_e .GetIndirect (_ga .Get ("\u0041\u0063\u0072\u006f\u0046\u006f\u0072\u006d"));_ca {if _cdc ,_dg :=_e .GetDict (_fg );_dg {if _fc ,_gcd :=_e .GetArray (_cdc .Get ("\u0046\u0069\u0065\u006c\u0064\u0073"));
_gcd {_gcb =_fc .Elements ();};};};_cdcd ,_dc :=_e .GetArray (_ae .Get ("\u0046\u0069\u0065\u006c\u0064\u0073"));if !_dc {return &DiffResults {},_da .New ("\u0065\u0072r\u006f\u0072\u0020\u0077h\u0069\u006ce\u0020\u0067\u0065\u0074\u0074\u0069\u006e\u0067 \u0041\u0063\u0072\u006f\u0046\u006f\u0072\u006d\u0027\u0073\u0020\u0066i\u0065\u006c\u0064\u0073");
};if _cf :=_bf .compareFields (_gg ,_gcb ,_cdcd .Elements ());_cf !=nil {return &DiffResults {},_cf ;};};_de ,_gad :=_e .GetIndirect (_c .Get ("\u0050\u0061\u0067e\u0073"));if !_gad {return &DiffResults {},_da .New ("\u0065\u0072\u0072\u006f\u0072\u0020w\u0068\u0069\u006c\u0065\u0020\u0067\u0065\u0074\u0074\u0069\u006e\u0067\u0020p\u0061\u0067\u0065\u0073\u0027\u0020\u006fb\u006a\u0065\u0063\u0074");
};_eage ,_gad :=_e .GetIndirect (_ga .Get ("\u0050\u0061\u0067e\u0073"));if !_gad {return &DiffResults {},_da .New ("\u0065\u0072\u0072\u006f\u0072\u0020w\u0068\u0069\u006c\u0065\u0020\u0067\u0065\u0074\u0074\u0069\u006e\u0067\u0020p\u0061\u0067\u0065\u0073\u0027\u0020\u006fb\u006a\u0065\u0063\u0074");
};if _db :=_bf .comparePages (_gg ,_eage ,_de );_db !=nil {return &DiffResults {},_db ;};return _bf ._fd ,nil ;};func (_eec *DiffResults )addWarning (_agca *DiffResult ){if _eec .Warnings ==nil {_eec .Warnings =make ([]*DiffResult ,0);};_eec .Warnings =append (_eec .Warnings ,_agca );
};