//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package ps implements various functionalities needed for handling Postscript for PDF uses, in particular
// for PDF function type 4.
//
// Package ps implements various functionalities needed for handling Postscript for PDF uses, in particular
// for PDF function type 4.
package ps ;import (_a "bufio";_d "bytes";_g "errors";_ag "fmt";_fd "github.com/unidoc/unipdf/v3/common";_dc "github.com/unidoc/unipdf/v3/core";_gd "io";_fe "math";);func (_cfbb *PSOperand )not (_aaed *PSStack )error {_bfeb ,_daea :=_aaed .Pop ();if _daea !=nil {return _daea ;
};if _fge ,_caaa :=_bfeb .(*PSBoolean );_caaa {_daea =_aaed .Push (MakeBool (!_fge .Val ));return _daea ;}else if _gea ,_gaa :=_bfeb .(*PSInteger );_gaa {_daea =_aaed .Push (MakeInteger (^_gea .Val ));return _daea ;}else {return ErrTypeCheck ;};};func (_dbg *PSOperand )div (_edb *PSStack )error {_fff ,_gba :=_edb .Pop ();
if _gba !=nil {return _gba ;};_abe ,_gba :=_edb .Pop ();if _gba !=nil {return _gba ;};_cdg ,_cfa :=_fff .(*PSReal );_fae ,_aca :=_fff .(*PSInteger );if !_cfa &&!_aca {return ErrTypeCheck ;};if _cfa &&_cdg .Val ==0{return ErrUndefinedResult ;};if _aca &&_fae .Val ==0{return ErrUndefinedResult ;
};_defb ,_gca :=_abe .(*PSReal );_agff ,_cadc :=_abe .(*PSInteger );if !_gca &&!_cadc {return ErrTypeCheck ;};var _cdd float64 ;if _gca {_cdd =_defb .Val ;}else {_cdd =float64 (_agff .Val );};if _cfa {_cdd /=_cdg .Val ;}else {_cdd /=float64 (_fae .Val );
};_gba =_edb .Push (MakeReal (_cdd ));return _gba ;};func (_ceg *PSOperand )Duplicate ()PSObject {_eg :=*_ceg ;return &_eg };func (_bed *PSOperand )cvi (_cae *PSStack )error {_faf ,_fg :=_cae .Pop ();if _fg !=nil {return _fg ;};if _gbg ,_eae :=_faf .(*PSReal );
_eae {_fbc :=int (_gbg .Val );_fg =_cae .Push (MakeInteger (_fbc ));}else if _cac ,_aggd :=_faf .(*PSInteger );_aggd {_bee :=_cac .Val ;_fg =_cae .Push (MakeInteger (_bee ));}else {return ErrTypeCheck ;};return _fg ;};func (_eaa *PSOperand )cos (_fba *PSStack )error {_ggf ,_ebf :=_fba .PopNumberAsFloat64 ();
if _ebf !=nil {return _ebf ;};_ffe :=_fe .Cos (_ggf *_fe .Pi /180.0);_ebf =_fba .Push (MakeReal (_ffe ));return _ebf ;};func (_age *PSOperand )exp (_bgg *PSStack )error {_aga ,_dbga :=_bgg .PopNumberAsFloat64 ();if _dbga !=nil {return _dbga ;};_bbf ,_dbga :=_bgg .PopNumberAsFloat64 ();
if _dbga !=nil {return _dbga ;};if _fe .Abs (_aga )< 1&&_bbf < 0{return ErrUndefinedResult ;};_aba :=_fe .Pow (_bbf ,_aga );_dbga =_bgg .Push (MakeReal (_aba ));return _dbga ;};

// Exec executes the program, typically leaving output values on the stack.
func (_ce *PSProgram )Exec (stack *PSStack )error {for _ ,_cc :=range *_ce {var _gf error ;switch _ec :=_cc .(type ){case *PSInteger :_da :=_ec ;_gf =stack .Push (_da );case *PSReal :_ged :=_ec ;_gf =stack .Push (_ged );case *PSBoolean :_ed :=_ec ;_gf =stack .Push (_ed );
case *PSProgram :_dee :=_ec ;_gf =stack .Push (_dee );case *PSOperand :_ggc :=_ec ;_gf =_ggc .Exec (stack );default:return ErrTypeCheck ;};if _gf !=nil {return _gf ;};};return nil ;};func (_dbb *PSOperand )ceiling (_gdga *PSStack )error {_abf ,_acg :=_gdga .Pop ();
if _acg !=nil {return _acg ;};if _debe ,_dcba :=_abf .(*PSReal );_dcba {_acg =_gdga .Push (MakeReal (_fe .Ceil (_debe .Val )));}else if _acc ,_bea :=_abf .(*PSInteger );_bea {_acg =_gdga .Push (MakeInteger (_acc .Val ));}else {_acg =ErrTypeCheck ;};return _acg ;
};func (_ggd *PSOperand )sqrt (_fafa *PSStack )error {_ebfe ,_ffed :=_fafa .PopNumberAsFloat64 ();if _ffed !=nil {return _ffed ;};if _ebfe < 0{return ErrRangeCheck ;};_cdb :=_fe .Sqrt (_ebfe );_ffed =_fafa .Push (MakeReal (_cdb ));return _ffed ;};func (_ecc *PSOperand )floor (_bfb *PSStack )error {_fea ,_bdbf :=_bfb .Pop ();
if _bdbf !=nil {return _bdbf ;};if _daef ,_aad :=_fea .(*PSReal );_aad {_bdbf =_bfb .Push (MakeReal (_fe .Floor (_daef .Val )));}else if _cacg ,_dbbg :=_fea .(*PSInteger );_dbbg {_bdbf =_bfb .Push (MakeInteger (_cacg .Val ));}else {return ErrTypeCheck ;
};return _bdbf ;};

// MakeOperand returns a new PSOperand object based on string `val`.
func MakeOperand (val string )*PSOperand {_dggc :=PSOperand (val );return &_dggc };func (_gbfa *PSOperand )index (_abcd *PSStack )error {_dgab ,_bgb :=_abcd .Pop ();if _bgb !=nil {return _bgb ;};_egca ,_bec :=_dgab .(*PSInteger );if !_bec {return ErrTypeCheck ;
};if _egca .Val < 0{return ErrRangeCheck ;};if _egca .Val > len (*_abcd )-1{return ErrStackUnderflow ;};_eecd :=(*_abcd )[len (*_abcd )-1-_egca .Val ];_bgb =_abcd .Push (_eecd .Duplicate ());return _bgb ;};func (_cff *PSOperand )String ()string {return string (*_cff )};
var ErrStackOverflow =_g .New ("\u0073\u0074\u0061\u0063\u006b\u0020\u006f\u0076\u0065r\u0066\u006c\u006f\u0077");func (_e *PSProgram )DebugString ()string {_agg :="\u007b\u0020";for _ ,_db :=range *_e {_agg +=_db .DebugString ();_agg +="\u0020";};_agg +="\u007d";
return _agg ;};func (_dcc *PSBoolean )DebugString ()string {return _ag .Sprintf ("\u0062o\u006f\u006c\u003a\u0025\u0076",_dcc .Val );};

// Exec executes the operand `op` in the state specified by `stack`.
func (_dgd *PSOperand )Exec (stack *PSStack )error {_ee :=ErrUnsupportedOperand ;switch *_dgd {case "\u0061\u0062\u0073":_ee =_dgd .abs (stack );case "\u0061\u0064\u0064":_ee =_dgd .add (stack );case "\u0061\u006e\u0064":_ee =_dgd .and (stack );case "\u0061\u0074\u0061\u006e":_ee =_dgd .atan (stack );
case "\u0062\u0069\u0074\u0073\u0068\u0069\u0066\u0074":_ee =_dgd .bitshift (stack );case "\u0063e\u0069\u006c\u0069\u006e\u0067":_ee =_dgd .ceiling (stack );case "\u0063\u006f\u0070\u0079":_ee =_dgd .copy (stack );case "\u0063\u006f\u0073":_ee =_dgd .cos (stack );
case "\u0063\u0076\u0069":_ee =_dgd .cvi (stack );case "\u0063\u0076\u0072":_ee =_dgd .cvr (stack );case "\u0064\u0069\u0076":_ee =_dgd .div (stack );case "\u0064\u0075\u0070":_ee =_dgd .dup (stack );case "\u0065\u0071":_ee =_dgd .eq (stack );case "\u0065\u0078\u0063\u0068":_ee =_dgd .exch (stack );
case "\u0065\u0078\u0070":_ee =_dgd .exp (stack );case "\u0066\u006c\u006fo\u0072":_ee =_dgd .floor (stack );case "\u0067\u0065":_ee =_dgd .ge (stack );case "\u0067\u0074":_ee =_dgd .gt (stack );case "\u0069\u0064\u0069\u0076":_ee =_dgd .idiv (stack );
case "\u0069\u0066":_ee =_dgd .ifCondition (stack );case "\u0069\u0066\u0065\u006c\u0073\u0065":_ee =_dgd .ifelse (stack );case "\u0069\u006e\u0064e\u0078":_ee =_dgd .index (stack );case "\u006c\u0065":_ee =_dgd .le (stack );case "\u006c\u006f\u0067":_ee =_dgd .log (stack );
case "\u006c\u006e":_ee =_dgd .ln (stack );case "\u006c\u0074":_ee =_dgd .lt (stack );case "\u006d\u006f\u0064":_ee =_dgd .mod (stack );case "\u006d\u0075\u006c":_ee =_dgd .mul (stack );case "\u006e\u0065":_ee =_dgd .ne (stack );case "\u006e\u0065\u0067":_ee =_dgd .neg (stack );
case "\u006e\u006f\u0074":_ee =_dgd .not (stack );case "\u006f\u0072":_ee =_dgd .or (stack );case "\u0070\u006f\u0070":_ee =_dgd .pop (stack );case "\u0072\u006f\u0075n\u0064":_ee =_dgd .round (stack );case "\u0072\u006f\u006c\u006c":_ee =_dgd .roll (stack );
case "\u0073\u0069\u006e":_ee =_dgd .sin (stack );case "\u0073\u0071\u0072\u0074":_ee =_dgd .sqrt (stack );case "\u0073\u0075\u0062":_ee =_dgd .sub (stack );case "\u0074\u0072\u0075\u006e\u0063\u0061\u0074\u0065":_ee =_dgd .truncate (stack );case "\u0078\u006f\u0072":_ee =_dgd .xor (stack );
};return _ee ;};func (_egc *PSOperand )add (_bfe *PSStack )error {_cbc ,_gcd :=_bfe .Pop ();if _gcd !=nil {return _gcd ;};_ca ,_gcd :=_bfe .Pop ();if _gcd !=nil {return _gcd ;};_gfb ,_afe :=_cbc .(*PSReal );_dae ,_ecac :=_cbc .(*PSInteger );if !_afe &&!_ecac {return ErrTypeCheck ;
};_be ,_df :=_ca .(*PSReal );_eee ,_bfd :=_ca .(*PSInteger );if !_df &&!_bfd {return ErrTypeCheck ;};if _ecac &&_bfd {_bdff :=_dae .Val +_eee .Val ;_eag :=_bfe .Push (MakeInteger (_bdff ));return _eag ;};var _gfc float64 ;if _afe {_gfc =_gfb .Val ;}else {_gfc =float64 (_dae .Val );
};if _df {_gfc +=_be .Val ;}else {_gfc +=float64 (_eee .Val );};_gcd =_bfe .Push (MakeReal (_gfc ));return _gcd ;};func (_ebfd *PSOperand )le (_ebg *PSStack )error {_ceab ,_gcf :=_ebg .PopNumberAsFloat64 ();if _gcf !=nil {return _gcf ;};_fgfg ,_gcf :=_ebg .PopNumberAsFloat64 ();
if _gcf !=nil {return _gcf ;};if _fe .Abs (_fgfg -_ceab )< _dca {_dcbg :=_ebg .Push (MakeBool (true ));return _dcbg ;}else if _fgfg < _ceab {_cde :=_ebg .Push (MakeBool (true ));return _cde ;}else {_gfcd :=_ebg .Push (MakeBool (false ));return _gfcd ;};
};

// NewPSProgram returns an empty, initialized PSProgram.
func NewPSProgram ()*PSProgram {return &PSProgram {}};

// NewPSStack returns an initialized PSStack.
func NewPSStack ()*PSStack {return &PSStack {}};func (_cdef *PSOperand )or (_eda *PSStack )error {_bbfbc ,_gfff :=_eda .Pop ();if _gfff !=nil {return _gfff ;};_dad ,_gfff :=_eda .Pop ();if _gfff !=nil {return _gfff ;};if _gdgfb ,_aef :=_bbfbc .(*PSBoolean );
_aef {_fag ,_fabd :=_dad .(*PSBoolean );if !_fabd {return ErrTypeCheck ;};_gfff =_eda .Push (MakeBool (_gdgfb .Val ||_fag .Val ));return _gfff ;};if _dfg ,_cee :=_bbfbc .(*PSInteger );_cee {_caaag ,_affc :=_dad .(*PSInteger );if !_affc {return ErrTypeCheck ;
};_gfff =_eda .Push (MakeInteger (_dfg .Val |_caaag .Val ));return _gfff ;};return ErrTypeCheck ;};func (_beec *PSOperand )gt (_beea *PSStack )error {_ggfg ,_ecg :=_beea .PopNumberAsFloat64 ();if _ecg !=nil {return _ecg ;};_gec ,_ecg :=_beea .PopNumberAsFloat64 ();
if _ecg !=nil {return _ecg ;};if _fe .Abs (_gec -_ggfg )< _dca {_dag :=_beea .Push (MakeBool (false ));return _dag ;}else if _gec > _ggfg {_dbff :=_beea .Push (MakeBool (true ));return _dbff ;}else {_aacd :=_beea .Push (MakeBool (false ));return _aacd ;
};};

// PopNumberAsFloat64 pops and return the numeric value of the top of the stack as a float64.
// Real or integer only.
func (_gefa *PSStack )PopNumberAsFloat64 ()(float64 ,error ){_gdbf ,_gfab :=_gefa .Pop ();if _gfab !=nil {return 0,_gfab ;};if _eece ,_fcb :=_gdbf .(*PSReal );_fcb {return _eece .Val ,nil ;}else if _cca ,_geab :=_gdbf .(*PSInteger );_geab {return float64 (_cca .Val ),nil ;
}else {return 0,ErrTypeCheck ;};};var ErrRangeCheck =_g .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");

// PSStack defines a stack of PSObjects. PSObjects can be pushed on or pull from the stack.
type PSStack []PSObject ;func (_fab *PSInteger )Duplicate ()PSObject {_def :=PSInteger {};_def .Val =_fab .Val ;return &_def };

// PSParser is a basic Postscript parser.
type PSParser struct{_adg *_a .Reader };func (_ffee *PSOperand )mul (_fcf *PSStack )error {_fcd ,_fcga :=_fcf .Pop ();if _fcga !=nil {return _fcga ;};_fga ,_fcga :=_fcf .Pop ();if _fcga !=nil {return _fcga ;};_geb ,_efeg :=_fcd .(*PSReal );_fad ,_gde :=_fcd .(*PSInteger );
if !_efeg &&!_gde {return ErrTypeCheck ;};_fdbe ,_fbcf :=_fga .(*PSReal );_ddb ,_fed :=_fga .(*PSInteger );if !_fbcf &&!_fed {return ErrTypeCheck ;};if _gde &&_fed {_edba :=_fad .Val *_ddb .Val ;_dcee :=_fcf .Push (MakeInteger (_edba ));return _dcee ;};
var _bcfd float64 ;if _efeg {_bcfd =_geb .Val ;}else {_bcfd =float64 (_fad .Val );};if _fbcf {_bcfd *=_fdbe .Val ;}else {_bcfd *=float64 (_ddb .Val );};_fcga =_fcf .Push (MakeReal (_bcfd ));return _fcga ;};func (_ecad *PSOperand )abs (_fdc *PSStack )error {_ceb ,_ccc :=_fdc .Pop ();
if _ccc !=nil {return _ccc ;};if _dbf ,_fef :=_ceb .(*PSReal );_fef {_ea :=_dbf .Val ;if _ea < 0{_ccc =_fdc .Push (MakeReal (-_ea ));}else {_ccc =_fdc .Push (MakeReal (_ea ));};}else if _ead ,_agf :=_ceb .(*PSInteger );_agf {_bf :=_ead .Val ;if _bf < 0{_ccc =_fdc .Push (MakeInteger (-_bf ));
}else {_ccc =_fdc .Push (MakeInteger (_bf ));};}else {return ErrTypeCheck ;};return _ccc ;};func (_fdca *PSOperand )log (_dea *PSStack )error {_deab ,_bcb :=_dea .PopNumberAsFloat64 ();if _bcb !=nil {return _bcb ;};_gee :=_fe .Log10 (_deab );_bcb =_dea .Push (MakeReal (_gee ));
return _bcb ;};func (_abc *PSOperand )atan (_eef *PSStack )error {_bca ,_ccb :=_eef .PopNumberAsFloat64 ();if _ccb !=nil {return _ccb ;};_gege ,_ccb :=_eef .PopNumberAsFloat64 ();if _ccb !=nil {return _ccb ;};if _bca ==0{var _cad error ;if _gege < 0{_cad =_eef .Push (MakeReal (270));
}else {_cad =_eef .Push (MakeReal (90));};return _cad ;};_deb :=_gege /_bca ;_bdb :=_fe .Atan (_deb )*180/_fe .Pi ;_ccb =_eef .Push (MakeReal (_bdb ));return _ccb ;};

// NewPSParser returns a new instance of the PDF Postscript parser from input data.
func NewPSParser (content []byte )*PSParser {_eced :=PSParser {};_bde :=_d .NewBuffer (content );_eced ._adg =_a .NewReader (_bde );return &_eced ;};func (_ga *PSOperand )ln (_efe *PSStack )error {_bcbc ,_feb :=_efe .PopNumberAsFloat64 ();if _feb !=nil {return _feb ;
};_beee :=_fe .Log (_bcbc );_feb =_efe .Push (MakeReal (_beee ));return _feb ;};func (_ecd *PSOperand )and (_bfc *PSStack )error {_aac ,_fefc :=_bfc .Pop ();if _fefc !=nil {return _fefc ;};_dcb ,_fefc :=_bfc .Pop ();if _fefc !=nil {return _fefc ;};if _dfd ,_bg :=_aac .(*PSBoolean );
_bg {_dcf ,_cda :=_dcb .(*PSBoolean );if !_cda {return ErrTypeCheck ;};_fefc =_bfc .Push (MakeBool (_dfd .Val &&_dcf .Val ));return _fefc ;};if _acd ,_gb :=_aac .(*PSInteger );_gb {_dceb ,_geg :=_dcb .(*PSInteger );if !_geg {return ErrTypeCheck ;};_fefc =_bfc .Push (MakeInteger (_acd .Val &_dceb .Val ));
return _fefc ;};return ErrTypeCheck ;};func (_ddba *PSParser )parseBool ()(*PSBoolean ,error ){_fecga ,_dfag :=_ddba ._adg .Peek (4);if _dfag !=nil {return MakeBool (false ),_dfag ;};if (len (_fecga )>=4)&&(string (_fecga [:4])=="\u0074\u0072\u0075\u0065"){_ddba ._adg .Discard (4);
return MakeBool (true ),nil ;};_fecga ,_dfag =_ddba ._adg .Peek (5);if _dfag !=nil {return MakeBool (false ),_dfag ;};if (len (_fecga )>=5)&&(string (_fecga [:5])=="\u0066\u0061\u006cs\u0065"){_ddba ._adg .Discard (5);return MakeBool (false ),nil ;};return MakeBool (false ),_g .New ("\u0075n\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0062o\u006fl\u0065a\u006e\u0020\u0073\u0074\u0072\u0069\u006eg");
};

// Append appends an object to the PSProgram.
func (_dg *PSProgram )Append (obj PSObject ){*_dg =append (*_dg ,obj )};func (_ba *PSOperand )copy (_gdgb *PSStack )error {_eada ,_fdcd :=_gdgb .PopInteger ();if _fdcd !=nil {return _fdcd ;};if _eada < 0{return ErrRangeCheck ;};if _eada > len (*_gdgb ){return ErrRangeCheck ;
};*_gdgb =append (*_gdgb ,(*_gdgb )[len (*_gdgb )-_eada :]...);return nil ;};func (_dcd *PSOperand )idiv (_dfb *PSStack )error {_cebd ,_bbff :=_dfb .Pop ();if _bbff !=nil {return _bbff ;};_aaf ,_bbff :=_dfb .Pop ();if _bbff !=nil {return _bbff ;};_cfb ,_bage :=_cebd .(*PSInteger );
if !_bage {return ErrTypeCheck ;};if _cfb .Val ==0{return ErrUndefinedResult ;};_ddc ,_bage :=_aaf .(*PSInteger );if !_bage {return ErrTypeCheck ;};_dcdc :=_ddc .Val /_cfb .Val ;_bbff =_dfb .Push (MakeInteger (_dcdc ));return _bbff ;};

// PSOperand represents a Postscript operand (text string).
type PSOperand string ;func (_bb *PSOperand )bitshift (_ddg *PSStack )error {_aae ,_caa :=_ddg .PopInteger ();if _caa !=nil {return _caa ;};_eb ,_caa :=_ddg .PopInteger ();if _caa !=nil {return _caa ;};var _affe int ;if _aae >=0{_affe =_eb <<uint (_aae );
}else {_affe =_eb >>uint (-_aae );};_caa =_ddg .Push (MakeInteger (_affe ));return _caa ;};func (_abb *PSProgram )Duplicate ()PSObject {_aa :=&PSProgram {};for _ ,_fc :=range *_abb {_aa .Append (_fc .Duplicate ());};return _aa ;};

// NewPSExecutor returns an initialized PSExecutor for an input `program`.
func NewPSExecutor (program *PSProgram )*PSExecutor {_ab :=&PSExecutor {};_ab .Stack =NewPSStack ();_ab ._b =program ;return _ab ;};

// MakeReal returns a new PSReal object initialized with `val`.
func MakeReal (val float64 )*PSReal {_affac :=PSReal {};_affac .Val =val ;return &_affac };func (_caeg *PSOperand )lt (_add *PSStack )error {_bgd ,_fbb :=_add .PopNumberAsFloat64 ();if _fbb !=nil {return _fbb ;};_cabg ,_fbb :=_add .PopNumberAsFloat64 ();
if _fbb !=nil {return _fbb ;};if _fe .Abs (_cabg -_bgd )< _dca {_cdgd :=_add .Push (MakeBool (false ));return _cdgd ;}else if _cabg < _bgd {_aaa :=_add .Push (MakeBool (true ));return _aaa ;}else {_faba :=_add .Push (MakeBool (false ));return _faba ;};
};

// Execute executes the program for an input parameters `objects` and returns a slice of output objects.
func (_c *PSExecutor )Execute (objects []PSObject )([]PSObject ,error ){for _ ,_dcg :=range objects {_bd :=_c .Stack .Push (_dcg );if _bd !=nil {return nil ,_bd ;};};_fa :=_c ._b .Exec (_c .Stack );if _fa !=nil {_fd .Log .Debug ("\u0045x\u0065c\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_fa );
return nil ,_fa ;};_gdgf :=[]PSObject (*_c .Stack );_c .Stack .Empty ();return _gdgf ,nil ;};func (_gdc *PSOperand )ne (_caba *PSStack )error {_bdcc :=_gdc .eq (_caba );if _bdcc !=nil {return _bdcc ;};_bdcc =_gdc .not (_caba );return _bdcc ;};func (_bdec *PSParser )skipSpaces ()(int ,error ){_egeb :=0;
for {_efgg ,_dgbf :=_bdec ._adg .Peek (1);if _dgbf !=nil {return 0,_dgbf ;};if _dc .IsWhiteSpace (_efgg [0]){_bdec ._adg .ReadByte ();_egeb ++;}else {break ;};};return _egeb ,nil ;};func (_eea *PSOperand )dup (_bba *PSStack )error {_fdb ,_fac :=_bba .Pop ();
if _fac !=nil {return _fac ;};_fac =_bba .Push (_fdb );if _fac !=nil {return _fac ;};_fac =_bba .Push (_fdb .Duplicate ());return _fac ;};func (_adf *PSOperand )ifelse (_affd *PSStack )error {_gbb ,_aeb :=_affd .Pop ();if _aeb !=nil {return _aeb ;};_ffg ,_aeb :=_affd .Pop ();
if _aeb !=nil {return _aeb ;};_fgfd ,_aeb :=_affd .Pop ();if _aeb !=nil {return _aeb ;};_egd ,_bbd :=_gbb .(*PSProgram );if !_bbd {return ErrTypeCheck ;};_egdb ,_bbd :=_ffg .(*PSProgram );if !_bbd {return ErrTypeCheck ;};_agc ,_bbd :=_fgfd .(*PSBoolean );
if !_bbd {return ErrTypeCheck ;};if _agc .Val {_aec :=_egdb .Exec (_affd );return _aec ;};_aeb =_egd .Exec (_affd );return _aeb ;};var ErrStackUnderflow =_g .New ("\u0073t\u0061c\u006b\u0020\u0075\u006e\u0064\u0065\u0072\u0066\u006c\u006f\u0077");

// MakeInteger returns a new PSInteger object initialized with `val`.
func MakeInteger (val int )*PSInteger {_gebc :=PSInteger {};_gebc .Val =val ;return &_gebc };

// Push pushes an object on top of the stack.
func (_dfc *PSStack )Push (obj PSObject )error {if len (*_dfc )> 100{return ErrStackOverflow ;};*_dfc =append (*_dfc ,obj );return nil ;};func (_eagg *PSOperand )ifCondition (_deg *PSStack )error {_ef ,_ggfd :=_deg .Pop ();if _ggfd !=nil {return _ggfd ;
};_eeb ,_ggfd :=_deg .Pop ();if _ggfd !=nil {return _ggfd ;};_bbb ,_dga :=_ef .(*PSProgram );if !_dga {return ErrTypeCheck ;};_ffa ,_dga :=_eeb .(*PSBoolean );if !_dga {return ErrTypeCheck ;};if _ffa .Val {_gga :=_bbb .Exec (_deg );return _gga ;};return nil ;
};func (_fec *PSOperand )truncate (_ffag *PSStack )error {_cege ,_dbdd :=_ffag .Pop ();if _dbdd !=nil {return _dbdd ;};if _gedc ,_bgcgf :=_cege .(*PSReal );_bgcgf {_fefe :=int (_gedc .Val );_dbdd =_ffag .Push (MakeReal (float64 (_fefe )));}else if _fgee ,_bgbc :=_cege .(*PSInteger );
_bgbc {_dbdd =_ffag .Push (MakeInteger (_fgee .Val ));}else {return ErrTypeCheck ;};return _dbdd ;};

// PSBoolean represents a boolean value.
type PSBoolean struct{Val bool ;};func _bce (_cdad int )int {if _cdad < 0{return -_cdad ;};return _cdad ;};func (_cfaf *PSOperand )eq (_dgdf *PSStack )error {_bag ,_bcf :=_dgdf .Pop ();if _bcf !=nil {return _bcf ;};_cab ,_bcf :=_dgdf .Pop ();if _bcf !=nil {return _bcf ;
};_fbd ,_eed :=_bag .(*PSBoolean );_fgf ,_egb :=_cab .(*PSBoolean );if _eed ||_egb {var _ae error ;if _eed &&_egb {_ae =_dgdf .Push (MakeBool (_fbd .Val ==_fgf .Val ));}else {_ae =_dgdf .Push (MakeBool (false ));};return _ae ;};var _cgb float64 ;var _ffc float64 ;
if _bdc ,_eec :=_bag .(*PSInteger );_eec {_cgb =float64 (_bdc .Val );}else if _fbde ,_decf :=_bag .(*PSReal );_decf {_cgb =_fbde .Val ;}else {return ErrTypeCheck ;};if _eba ,_bcag :=_cab .(*PSInteger );_bcag {_ffc =float64 (_eba .Val );}else if _ffd ,_affa :=_cab .(*PSReal );
_affa {_ffc =_ffd .Val ;}else {return ErrTypeCheck ;};if _fe .Abs (_ffc -_cgb )< _dca {_bcf =_dgdf .Push (MakeBool (true ));}else {_bcf =_dgdf .Push (MakeBool (false ));};return _bcf ;};

// DebugString returns a descriptive string representation of the stack - intended for debugging.
func (_dgc *PSStack )DebugString ()string {_bab :="\u005b\u0020";for _ ,_ecab :=range *_dgc {_bab +=_ecab .DebugString ();_bab +="\u0020";};_bab +="\u005d";return _bab ;};func (_ccf *PSOperand )xor (_dcbf *PSStack )error {_gagf ,_abfa :=_dcbf .Pop ();if _abfa !=nil {return _abfa ;
};_ecee ,_abfa :=_dcbf .Pop ();if _abfa !=nil {return _abfa ;};if _bgf ,_ggac :=_gagf .(*PSBoolean );_ggac {_fbg ,_cbb :=_ecee .(*PSBoolean );if !_cbb {return ErrTypeCheck ;};_abfa =_dcbf .Push (MakeBool (_bgf .Val !=_fbg .Val ));return _abfa ;};if _cgbb ,_fecg :=_gagf .(*PSInteger );
_fecg {_cddc ,_bda :=_ecee .(*PSInteger );if !_bda {return ErrTypeCheck ;};_abfa =_dcbf .Push (MakeInteger (_cgbb .Val ^_cddc .Val ));return _abfa ;};return ErrTypeCheck ;};

// Parse parses the postscript and store as a program that can be executed.
func (_fbe *PSParser )Parse ()(*PSProgram ,error ){_fbe .skipSpaces ();_fbeb ,_fdg :=_fbe ._adg .Peek (2);if _fdg !=nil {return nil ,_fdg ;};if _fbeb [0]!='{'{return nil ,_g .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0050\u0053\u0020\u0050\u0072\u006f\u0067\u0072\u0061\u006d\u0020\u006e\u006f\u0074\u0020\u0073t\u0061\u0072\u0074\u0069\u006eg\u0020\u0077i\u0074\u0068\u0020\u007b");
};_ebc ,_fdg :=_fbe .parseFunction ();if _fdg !=nil &&_fdg !=_gd .EOF {return nil ,_fdg ;};return _ebc ,_fdg ;};

// PSExecutor has its own execution stack and is used to executre a PS routine (program).
type PSExecutor struct{Stack *PSStack ;_b *PSProgram ;};var ErrTypeCheck =_g .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");func (_bdf *PSBoolean )Duplicate ()PSObject {_cfe :=PSBoolean {};_cfe .Val =_bdf .Val ;
return &_cfe };func (_cea *PSOperand )ge (_gdgd *PSStack )error {_gbf ,_ege :=_gdgd .PopNumberAsFloat64 ();if _ege !=nil {return _ege ;};_egf ,_ege :=_gdgd .PopNumberAsFloat64 ();if _ege !=nil {return _ege ;};if _fe .Abs (_egf -_gbf )< _dca {_gdag :=_gdgd .Push (MakeBool (true ));
return _gdag ;}else if _egf > _gbf {_caf :=_gdgd .Push (MakeBool (true ));return _caf ;}else {_gff :=_gdgd .Push (MakeBool (false ));return _gff ;};};func (_eefa *PSOperand )pop (_bagd *PSStack )error {_ ,_cafd :=_bagd .Pop ();if _cafd !=nil {return _cafd ;
};return nil ;};func (_cf *PSInteger )String ()string {return _ag .Sprintf ("\u0025\u0064",_cf .Val )};func (_deed *PSParser )parseOperand ()(*PSOperand ,error ){var _cgcb []byte ;for {_edg ,_fdbd :=_deed ._adg .Peek (1);if _fdbd !=nil {if _fdbd ==_gd .EOF {break ;
};return nil ,_fdbd ;};if _dc .IsDelimiter (_edg [0]){break ;};if _dc .IsWhiteSpace (_edg [0]){break ;};_dceeg ,_ :=_deed ._adg .ReadByte ();_cgcb =append (_cgcb ,_dceeg );};if len (_cgcb )==0{return nil ,_g .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064\u0020\u0028\u0065\u006d\u0070\u0074\u0079\u0029");
};return MakeOperand (string (_cgcb )),nil ;};func (_aecg *PSOperand )sub (_bfa *PSStack )error {_eefaf ,_acab :=_bfa .Pop ();if _acab !=nil {return _acab ;};_bbfa ,_acab :=_bfa .Pop ();if _acab !=nil {return _acab ;};_cgee ,_eebg :=_eefaf .(*PSReal );
_cdf ,_bgcg :=_eefaf .(*PSInteger );if !_eebg &&!_bgcg {return ErrTypeCheck ;};_ecga ,_gfba :=_bbfa .(*PSReal );_gdad ,_fabc :=_bbfa .(*PSInteger );if !_gfba &&!_fabc {return ErrTypeCheck ;};if _bgcg &&_fabc {_ebgd :=_gdad .Val -_cdf .Val ;_efd :=_bfa .Push (MakeInteger (_ebgd ));
return _efd ;};var _dgb float64 =0;if _gfba {_dgb =_ecga .Val ;}else {_dgb =float64 (_gdad .Val );};if _eebg {_dgb -=_cgee .Val ;}else {_dgb -=float64 (_cdf .Val );};_acab =_bfa .Push (MakeReal (_dgb ));return _acab ;};func (_gdb *PSProgram )String ()string {_aff :="\u007b\u0020";
for _ ,_cg :=range *_gdb {_aff +=_cg .String ();_aff +="\u0020";};_aff +="\u007d";return _aff ;};func (_ebd *PSOperand )cvr (_faa *PSStack )error {_adb ,_gcc :=_faa .Pop ();if _gcc !=nil {return _gcc ;};if _daee ,_gdgaf :=_adb .(*PSReal );_gdgaf {_gcc =_faa .Push (MakeReal (_daee .Val ));
}else if _gbga ,_gda :=_adb .(*PSInteger );_gda {_gcc =_faa .Push (MakeReal (float64 (_gbga .Val )));}else {return ErrTypeCheck ;};return _gcc ;};func (_cfg *PSOperand )exch (_cge *PSStack )error {_bcd ,_bge :=_cge .Pop ();if _bge !=nil {return _bge ;};
_beb ,_bge :=_cge .Pop ();if _bge !=nil {return _bge ;};_bge =_cge .Push (_bcd );if _bge !=nil {return _bge ;};_bge =_cge .Push (_beb );return _bge ;};

// Empty empties the stack.
func (_eaf *PSStack )Empty (){*_eaf =[]PSObject {}};func (_fcg *PSOperand )mod (_ddf *PSStack )error {_ceaf ,_gegc :=_ddf .Pop ();if _gegc !=nil {return _gegc ;};_dbd ,_gegc :=_ddf .Pop ();if _gegc !=nil {return _gegc ;};_fffb ,_dfa :=_ceaf .(*PSInteger );
if !_dfa {return ErrTypeCheck ;};if _fffb .Val ==0{return ErrUndefinedResult ;};_gab ,_dfa :=_dbd .(*PSInteger );if !_dfa {return ErrTypeCheck ;};_bdcg :=_gab .Val %_fffb .Val ;_gegc =_ddf .Push (MakeInteger (_bdcg ));return _gegc ;};const _dca =0.000001;


// PSInteger represents an integer.
type PSInteger struct{Val int ;};func (_degc *PSParser )parseFunction ()(*PSProgram ,error ){_acac ,_ :=_degc ._adg .ReadByte ();if _acac !='{'{return nil ,_g .New ("\u0069\u006ev\u0061\u006c\u0069d\u0020\u0066\u0075\u006e\u0063\u0074\u0069\u006f\u006e");
};_gebb :=NewPSProgram ();for {_degc .skipSpaces ();_degc .skipComments ();_bcda ,_gef :=_degc ._adg .Peek (2);if _gef !=nil {if _gef ==_gd .EOF {break ;};return nil ,_gef ;};_fd .Log .Trace ("\u0050e\u0065k\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u003a\u0020\u0025\u0073",string (_bcda ));
if _bcda [0]=='}'{_fd .Log .Trace ("\u0045\u004f\u0046 \u0066\u0075\u006e\u0063\u0074\u0069\u006f\u006e");_degc ._adg .ReadByte ();break ;}else if _bcda [0]=='{'{_fd .Log .Trace ("\u0046u\u006e\u0063\u0074\u0069\u006f\u006e!");_ecef ,_ebb :=_degc .parseFunction ();
if _ebb !=nil {return nil ,_ebb ;};_gebb .Append (_ecef );}else if _dc .IsDecimalDigit (_bcda [0])||(_bcda [0]=='-'&&_dc .IsDecimalDigit (_bcda [1])){_fd .Log .Trace ("\u002d>\u004e\u0075\u006d\u0062\u0065\u0072!");_aaaa ,_ebe :=_degc .parseNumber ();if _ebe !=nil {return nil ,_ebe ;
};_gebb .Append (_aaaa );}else {_fd .Log .Trace ("\u002d>\u004fp\u0065\u0072\u0061\u006e\u0064 \u006f\u0072 \u0062\u006f\u006f\u006c\u003f");_bcda ,_ =_degc ._adg .Peek (5);_faaf :=string (_bcda );_fd .Log .Trace ("\u0050\u0065\u0065k\u0020\u0073\u0074\u0072\u003a\u0020\u0025\u0073",_faaf );
if (len (_faaf )> 4)&&(_faaf [:5]=="\u0066\u0061\u006cs\u0065"){_fcca ,_agd :=_degc .parseBool ();if _agd !=nil {return nil ,_agd ;};_gebb .Append (_fcca );}else if (len (_faaf )> 3)&&(_faaf [:4]=="\u0074\u0072\u0075\u0065"){_gdf ,_bgee :=_degc .parseBool ();
if _bgee !=nil {return nil ,_bgee ;};_gebb .Append (_gdf );}else {_cgca ,_afa :=_degc .parseOperand ();if _afa !=nil {return nil ,_afa ;};_gebb .Append (_cgca );};};};return _gebb ,nil ;};func (_eca *PSOperand )DebugString ()string {return _ag .Sprintf ("\u006fp\u003a\u0027\u0025\u0073\u0027",*_eca );
};func (_bgbd *PSOperand )round (_cba *PSStack )error {_ggb ,_gfg :=_cba .Pop ();if _gfg !=nil {return _gfg ;};if _efg ,_fcff :=_ggb .(*PSReal );_fcff {_gfg =_cba .Push (MakeReal (_fe .Floor (_efg .Val +0.5)));}else if _fcc ,_egg :=_ggb .(*PSInteger );
_egg {_gfg =_cba .Push (MakeInteger (_fcc .Val ));}else {return ErrTypeCheck ;};return _gfg ;};func (_abcc *PSParser )parseNumber ()(PSObject ,error ){_bff ,_fafag :=_dc .ParseNumber (_abcc ._adg );if _fafag !=nil {return nil ,_fafag ;};switch _aadf :=_bff .(type ){case *_dc .PdfObjectFloat :return MakeReal (float64 (*_aadf )),nil ;
case *_dc .PdfObjectInteger :return MakeInteger (int (*_aadf )),nil ;};return nil ,_ag .Errorf ("\u0075n\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0054",_bff );};

// PSObject represents a postscript object.
type PSObject interface{

// Duplicate makes a fresh copy of the PSObject.
Duplicate ()PSObject ;

// DebugString returns a descriptive representation of the PSObject with more information than String()
// for debugging purposes.
DebugString ()string ;

// String returns a string representation of the PSObject.
String ()string ;};func (_dec *PSBoolean )String ()string {return _ag .Sprintf ("\u0025\u0076",_dec .Val )};func (_ada *PSOperand )sin (_cef *PSStack )error {_ggfa ,_caaf :=_cef .PopNumberAsFloat64 ();if _caaf !=nil {return _caaf ;};_ccg :=_fe .Sin (_ggfa *_fe .Pi /180.0);
_caaf =_cef .Push (MakeReal (_ccg ));return _caaf ;};var ErrUndefinedResult =_g .New ("\u0075\u006e\u0064\u0065fi\u006e\u0065\u0064\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0065\u0072\u0072o\u0072");

// PSReal represents a real number.
type PSReal struct{Val float64 ;};func (_degb *PSParser )skipComments ()error {if _ ,_fbaa :=_degb .skipSpaces ();_fbaa !=nil {return _fbaa ;};_gcg :=true ;for {_feba ,_fbdf :=_degb ._adg .Peek (1);if _fbdf !=nil {_fd .Log .Debug ("\u0045\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_fbdf .Error ());
return _fbdf ;};if _gcg &&_feba [0]!='%'{return nil ;};_gcg =false ;if (_feba [0]!='\r')&&(_feba [0]!='\n'){_degb ._adg .ReadByte ();}else {break ;};};return _degb .skipComments ();};

// Pop pops an object from the top of the stack.
func (_ffcf *PSStack )Pop ()(PSObject ,error ){if len (*_ffcf )< 1{return nil ,ErrStackUnderflow ;};_cbg :=(*_ffcf )[len (*_ffcf )-1];*_ffcf =(*_ffcf )[0:len (*_ffcf )-1];return _cbg ,nil ;};func (_fde *PSReal )DebugString ()string {return _ag .Sprintf ("\u0072e\u0061\u006c\u003a\u0025\u002e\u0035f",_fde .Val );
};func (_cfc *PSReal )Duplicate ()PSObject {_fb :=PSReal {};_fb .Val =_cfc .Val ;return &_fb };var ErrUnsupportedOperand =_g .New ("\u0075\u006e\u0073\u0075pp\u006f\u0072\u0074\u0065\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064");

// MakeBool returns a new PSBoolean object initialized with `val`.
func MakeBool (val bool )*PSBoolean {_ede :=PSBoolean {};_ede .Val =val ;return &_ede };

// PopInteger specificially pops an integer from the top of the stack, returning the value as an int.
func (_ggfc *PSStack )PopInteger ()(int ,error ){_edc ,_ffaf :=_ggfc .Pop ();if _ffaf !=nil {return 0,_ffaf ;};if _debee ,_acde :=_edc .(*PSInteger );_acde {return _debee .Val ,nil ;};return 0,ErrTypeCheck ;};func (_gfa *PSOperand )neg (_bbfb *PSStack )error {_beaa ,_fbdc :=_bbfb .Pop ();
if _fbdc !=nil {return _fbdc ;};if _dgdd ,_bgc :=_beaa .(*PSReal );_bgc {_fbdc =_bbfb .Push (MakeReal (-_dgdd .Val ));return _fbdc ;}else if _bbde ,_ebff :=_beaa .(*PSInteger );_ebff {_fbdc =_bbfb .Push (MakeInteger (-_bbde .Val ));return _fbdc ;}else {return ErrTypeCheck ;
};};

// String returns a string representation of the stack.
func (_geec *PSStack )String ()string {_afg :="\u005b\u0020";for _ ,_bbg :=range *_geec {_afg +=_bbg .String ();_afg +="\u0020";};_afg +="\u005d";return _afg ;};func (_cd *PSInteger )DebugString ()string {return _ag .Sprintf ("\u0069\u006e\u0074\u003a\u0025\u0064",_cd .Val );
};

// PSProgram defines a Postscript program which is a series of PS objects (arguments, commands, programs etc).
type PSProgram []PSObject ;

// PSObjectArrayToFloat64Array converts []PSObject into a []float64 array. Each PSObject must represent a number,
// otherwise a ErrTypeCheck error occurs.
func PSObjectArrayToFloat64Array (objects []PSObject )([]float64 ,error ){var _bc []float64 ;for _ ,_af :=range objects {if _gg ,_ff :=_af .(*PSInteger );_ff {_bc =append (_bc ,float64 (_gg .Val ));}else if _gdg ,_ad :=_af .(*PSReal );_ad {_bc =append (_bc ,_gdg .Val );
}else {return nil ,ErrTypeCheck ;};};return _bc ,nil ;};func (_fgd *PSOperand )roll (_debb *PSStack )error {_cce ,_ece :=_debb .Pop ();if _ece !=nil {return _ece ;};_dgg ,_ece :=_debb .Pop ();if _ece !=nil {return _ece ;};_cgc ,_gag :=_cce .(*PSInteger );
if !_gag {return ErrTypeCheck ;};_fgg ,_gag :=_dgg .(*PSInteger );if !_gag {return ErrTypeCheck ;};if _fgg .Val < 0{return ErrRangeCheck ;};if _fgg .Val ==0||_fgg .Val ==1{return nil ;};if _fgg .Val > len (*_debb ){return ErrStackUnderflow ;};for _bdg :=0;
_bdg < _bce (_cgc .Val );_bdg ++{var _ace []PSObject ;_ace =(*_debb )[len (*_debb )-(_fgg .Val ):len (*_debb )];if _cgc .Val > 0{_faab :=_ace [len (_ace )-1];_ace =append ([]PSObject {_faab },_ace [0:len (_ace )-1]...);}else {_ggad :=_ace [len (_ace )-_fgg .Val ];
_ace =append (_ace [1:],_ggad );};_gaaa :=append ((*_debb )[0:len (*_debb )-_fgg .Val ],_ace ...);_debb =&_gaaa ;};return nil ;};func (_ac *PSReal )String ()string {return _ag .Sprintf ("\u0025\u002e\u0035\u0066",_ac .Val )};